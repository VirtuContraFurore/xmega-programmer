
Xluca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000413  00800100  00800100  00001538  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006416  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ebe  00000000  00000000  00007d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003505  00000000  00000000  00009bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  0000d0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000211a  00000000  00000000  0000dc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000040a6  00000000  00000000  0000fd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00013dd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_10>
      2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4c 00 75 00     ..L.U.F.A. .L.u.
      bc:	63 00 61 00 20 00 58 00 20 00 70 00 72 00 6f 00     c.a. .X. .p.r.o.
      cc:	67 00 72 00 61 00 6d 00 6d 00 65 00 72 00 00 00     g.r.a.m.m.e.r...

000000dc <ManufacturerString>:
      dc:	1e 03 4c 00 75 00 63 00 61 00 20 00 43 00 65 00     ..L.u.c.a. .C.e.
      ec:	72 00 61 00 67 00 69 00 6f 00 6c 00 69 00 00 00     r.a.g.i.o.l.i...

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ConfigurationDescriptor>:
     100:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
     110:	ff 00 07 05 82 02 40 00 05 07 05 01 02 40 00 05     ......@......@..

00000120 <DeviceDescriptor>:
     120:	12 01 10 01 00 00 00 40 eb 03 6c 20 01 00 01 02     .......@..l ....
     130:	00 01                                               ..

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	da e0       	ldi	r29, 0x0A	; 10
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_clear_bss>:
     13e:	25 e0       	ldi	r18, 0x05	; 5
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a3 31       	cpi	r26, 0x13	; 19
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	03 d0       	rcall	.+6      	; 0x156 <main>
     150:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <main>:

int main(void)
{
//	SoftUsart_setup();
//	SoftUsart_print("Hay LUFA is here");
	USB_Init();
     156:	4b d7       	rcall	.+3734   	; 0xfee <USB_Init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     158:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     15a:	0e 94 32 0a 	call	0x1464	; 0x1464 <USB_USBTask>
     15e:	fd cf       	rjmp	.-6      	; 0x15a <main+0x4>

00000160 <lucax_get_descriptor>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     160:	e8 ee       	ldi	r30, 0xE8	; 232
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     170:	80 81       	ld	r24, Z
     172:	8e 77       	andi	r24, 0x7E	; 126
     174:	80 83       	st	Z, r24
void lucax_get_descriptor(void){
//	SoftUsart_print("* * Get Descriptor");
	Endpoint_ClearSETUP();
	Endpoint_Write_8(0x01); //bit 0: support PDI
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
     176:	a9 c6       	rjmp	.+3410   	; 0xeca <Endpoint_ClearStatusStage>

00000178 <lucax_release_interface>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     178:	e8 ee       	ldi	r30, 0xE8	; 232
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	80 81       	ld	r24, Z
     17e:	87 7f       	andi	r24, 0xF7	; 247
     180:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     182:	80 81       	ld	r24, Z
     184:	8e 77       	andi	r24, 0x7E	; 126
     186:	80 83       	st	Z, r24

void lucax_release_interface(void){
//	SoftUsart_print("* * Release Interface");
	Endpoint_ClearSETUP();
	Endpoint_ClearIN();
	pdi_exit();
     188:	4d d4       	rcall	.+2202   	; 0xa24 <pdi_exit>
	last_op = 0;
     18a:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <last_op>
     18e:	08 95       	ret

00000190 <lucax_pdi_nvm_read>:
//	SoftUsart_print("* * Chip erase");
	last_op = nvm_chip_erase();
	lucax_report_error();
}

void lucax_pdi_nvm_read(void){
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	1f 92       	push	r1
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
//	SoftUsart_print("* * NVM read");
	unsigned int count = USB_ControlRequest.wIndex;
     1a6:	00 91 0f 05 	lds	r16, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
     1aa:	10 91 10 05 	lds	r17, 0x0510	; 0x800510 <USB_ControlRequest+0x5>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     1ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     1b2:	87 7f       	andi	r24, 0xF7	; 247
     1b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	unsigned long address = 0;

	Endpoint_ClearSETUP();

	while(Endpoint_IsOUTReceived() == false);
     1bc:	82 ff       	sbrs	r24, 2
     1be:	fc cf       	rjmp	.-8      	; 0x1b8 <lucax_pdi_nvm_read+0x28>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     1c0:	c0 90 f1 00 	lds	r12, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
     1c4:	d0 90 f1 00 	lds	r13, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
     1c8:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
     1cc:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     1d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     1d4:	8b 77       	andi	r24, 0x7B	; 123
     1d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	Endpoint_ClearStatusStage();
     1da:	77 d6       	rcall	.+3310   	; 0xeca <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(VENDOR_IN_EPADDR);

	if(count == 1){
     1e2:	01 30       	cpi	r16, 0x01	; 1
     1e4:	11 05       	cpc	r17, r1
     1e6:	91 f4       	brne	.+36     	; 0x20c <lucax_pdi_nvm_read+0x7c>
		unsigned char data = 0;
     1e8:	19 82       	std	Y+1, r1	; 0x01
		last_op = nvm_read_byte(address, &data);
     1ea:	ae 01       	movw	r20, r28
     1ec:	4f 5f       	subi	r20, 0xFF	; 255
     1ee:	5f 4f       	sbci	r21, 0xFF	; 255
     1f0:	b6 01       	movw	r22, r12
     1f2:	c7 01       	movw	r24, r14
     1f4:	1b d2       	rcall	.+1078   	; 0x62c <nvm_read_byte>
     1f6:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
		Endpoint_Write_8(data);
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     1fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     200:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     204:	8e 77       	andi	r24, 0x7E	; 126
     206:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     20a:	33 c0       	rjmp	.+102    	; 0x272 <lucax_pdi_nvm_read+0xe2>
     20c:	01 30       	cpi	r16, 0x01	; 1
     20e:	84 e0       	ldi	r24, 0x04	; 4
     210:	18 07       	cpc	r17, r24
     212:	10 f0       	brcs	.+4      	; 0x218 <lucax_pdi_nvm_read+0x88>
     214:	00 e0       	ldi	r16, 0x00	; 0
     216:	14 e0       	ldi	r17, 0x04	; 4
		return;
	}


	if(count > MAX_BUFFER) count = MAX_BUFFER;
	last_op = nvm_read_bytes(address, buffer, count);
     218:	98 01       	movw	r18, r16
     21a:	41 e0       	ldi	r20, 0x01	; 1
     21c:	51 e0       	ldi	r21, 0x01	; 1
     21e:	b6 01       	movw	r22, r12
     220:	c7 01       	movw	r24, r14
     222:	19 d2       	rcall	.+1074   	; 0x656 <nvm_read_bytes>
     224:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>


	int done = 0;
     228:	c1 2c       	mov	r12, r1
     22a:	d1 2c       	mov	r13, r1
	while(count > 0){
     22c:	01 15       	cp	r16, r1
     22e:	11 05       	cpc	r17, r1
     230:	01 f1       	breq	.+64     	; 0x272 <lucax_pdi_nvm_read+0xe2>

//		SoftUsart_print("Read - w");
		int packet = (count>VENDOR_IO_EPSIZE_IN) ? VENDOR_IO_EPSIZE_IN : count;
     232:	78 01       	movw	r14, r16
     234:	01 34       	cpi	r16, 0x41	; 65
     236:	11 05       	cpc	r17, r1
     238:	18 f0       	brcs	.+6      	; 0x240 <lucax_pdi_nvm_read+0xb0>
     23a:	80 e4       	ldi	r24, 0x40	; 64
     23c:	e8 2e       	mov	r14, r24
     23e:	f1 2c       	mov	r15, r1

		int time_out=0;
		while(Endpoint_IsINReady()==false){
     240:	81 e3       	ldi	r24, 0x31	; 49
     242:	95 e7       	ldi	r25, 0x75	; 117
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     244:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     248:	20 fd       	sbrc	r18, 0
     24a:	02 c0       	rjmp	.+4      	; 0x250 <lucax_pdi_nvm_read+0xc0>
     24c:	01 97       	sbiw	r24, 0x01	; 1
			if(time_out++ == 30000)
     24e:	d1 f7       	brne	.-12     	; 0x244 <lucax_pdi_nvm_read+0xb4>
				break;
		}
		Endpoint_Write_Stream_LE(buffer+done, packet, NULL);
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	b7 01       	movw	r22, r14
     256:	c6 01       	movw	r24, r12
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	9e 4f       	sbci	r25, 0xFE	; 254
     25c:	6a d4       	rcall	.+2260   	; 0xb32 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     25e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     262:	8e 77       	andi	r24, 0x7E	; 126
     264:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		Endpoint_ClearIN();

		count -= packet;
     268:	0e 19       	sub	r16, r14
     26a:	1f 09       	sbc	r17, r15
		done += packet;
     26c:	ce 0c       	add	r12, r14
     26e:	df 1c       	adc	r13, r15
     270:	dd cf       	rjmp	.-70     	; 0x22c <lucax_pdi_nvm_read+0x9c>
//	SoftUsart_print_hex(done);
//	SoftUsart_send_str(" bytes at 0x");
//	SoftUsart_print_hex(address >> 16);
//	SoftUsart_print_hex(address & 0xFFFF);
//	SoftUsart_print(" absolute");
}
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	ef 90       	pop	r14
     280:	df 90       	pop	r13
     282:	cf 90       	pop	r12
     284:	08 95       	ret

00000286 <lucax_pdi_nvm_write_page>:


void lucax_pdi_nvm_write_page(void){
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
//	SoftUsart_print("* * NVM write page");
	unsigned int count = USB_ControlRequest.wIndex;
     29c:	e0 90 0f 05 	lds	r14, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
     2a0:	f0 90 10 05 	lds	r15, 0x0510	; 0x800510 <USB_ControlRequest+0x5>
	unsigned char memory_type = USB_ControlRequest.wValue;
     2a4:	00 91 0d 05 	lds	r16, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     2a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	unsigned long address = 0;

	Endpoint_ClearSETUP();

	while(Endpoint_IsOUTReceived() == false);
     2b6:	82 ff       	sbrs	r24, 2
     2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <lucax_pdi_nvm_write_page+0x2c>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     2ba:	90 90 f1 00 	lds	r9, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
     2be:	a0 90 f1 00 	lds	r10, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
     2c2:	b0 90 f1 00 	lds	r11, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
     2c6:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     2ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2ce:	8b 77       	andi	r24, 0x7B	; 123
     2d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	Endpoint_ClearStatusStage();
     2d4:	fa d5       	rcall	.+3060   	; 0xeca <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     2dc:	e7 01       	movw	r28, r14
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	e8 16       	cp	r14, r24
     2e2:	84 e0       	ldi	r24, 0x04	; 4
     2e4:	f8 06       	cpc	r15, r24
     2e6:	10 f0       	brcs	.+4      	; 0x2ec <lucax_pdi_nvm_write_page+0x66>
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	d4 e0       	ldi	r29, 0x04	; 4
     2ec:	e1 2c       	mov	r14, r1
     2ee:	f1 2c       	mov	r15, r1
	Endpoint_SelectEndpoint(VENDOR_OUT_EPADDR);

	if(count > MAX_BUFFER) count = MAX_BUFFER;

	int done = 0;
	while(count > 0){
     2f0:	20 97       	sbiw	r28, 0x00	; 0
     2f2:	09 f1       	breq	.+66     	; 0x336 <lucax_pdi_nvm_write_page+0xb0>

//		SoftUsart_print("Write - r");
		int packet = (count>VENDOR_IO_EPSIZE_OUT) ? VENDOR_IO_EPSIZE_OUT : count;
     2f4:	6e 01       	movw	r12, r28
     2f6:	c1 34       	cpi	r28, 0x41	; 65
     2f8:	d1 05       	cpc	r29, r1
     2fa:	18 f0       	brcs	.+6      	; 0x302 <lucax_pdi_nvm_write_page+0x7c>
     2fc:	80 e4       	ldi	r24, 0x40	; 64
     2fe:	c8 2e       	mov	r12, r24
     300:	d1 2c       	mov	r13, r1

		unsigned int time_out = 0;
		while(Endpoint_IsOUTReceived()==false){
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     306:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     30a:	22 fd       	sbrc	r18, 2
     30c:	03 c0       	rjmp	.+6      	; 0x314 <lucax_pdi_nvm_write_page+0x8e>
     30e:	01 97       	sbiw	r24, 0x01	; 1
			if(time_out++ == 0xFFFF){
     310:	d1 f7       	brne	.-12     	; 0x306 <lucax_pdi_nvm_write_page+0x80>
     312:	1b c0       	rjmp	.+54     	; 0x34a <lucax_pdi_nvm_write_page+0xc4>
//				SoftUsart_print("Waiting for out timed out - r");
				return;
			}
		}
		Endpoint_Read_Stream_LE(buffer+done, packet, NULL);
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	b6 01       	movw	r22, r12
     31a:	c7 01       	movw	r24, r14
     31c:	8f 5f       	subi	r24, 0xFF	; 255
     31e:	9e 4f       	sbci	r25, 0xFE	; 254
     320:	52 d4       	rcall	.+2212   	; 0xbc6 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     322:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     326:	8b 77       	andi	r24, 0x7B	; 123
     328:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		Endpoint_ClearOUT();

		count -= packet;
     32c:	cc 19       	sub	r28, r12
     32e:	dd 09       	sbc	r29, r13
		done += packet;
     330:	ec 0c       	add	r14, r12
     332:	fd 1c       	adc	r15, r13
     334:	dd cf       	rjmp	.-70     	; 0x2f0 <lucax_pdi_nvm_write_page+0x6a>
	}

	last_op = nvm_paged_write(address, buffer, done, memory_type);
     336:	97 01       	movw	r18, r14
     338:	41 e0       	ldi	r20, 0x01	; 1
     33a:	51 e0       	ldi	r21, 0x01	; 1
     33c:	69 2d       	mov	r22, r9
     33e:	7a 2d       	mov	r23, r10
     340:	8b 2d       	mov	r24, r11
     342:	91 2f       	mov	r25, r17
     344:	c1 d1       	rcall	.+898    	; 0x6c8 <nvm_paged_write>
     346:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
//	SoftUsart_print_hex(done);
//	SoftUsart_send_str(" bytes at 0x");
//	SoftUsart_print_hex(address >> 16);
//	SoftUsart_print_hex(address & 0xFFFF);
//	SoftUsart_print(" absolute");
}
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	bf 90       	pop	r11
     35c:	af 90       	pop	r10
     35e:	9f 90       	pop	r9
     360:	08 95       	ret

00000362 <lucax_pdi_nvm_write_byte>:

void lucax_pdi_nvm_write_byte(void){
//	SoftUsart_print("* * NVM write byte");
	unsigned char data = USB_ControlRequest.wIndex;
     362:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
	unsigned char memory_type = USB_ControlRequest.wValue;
     366:	20 91 0d 05 	lds	r18, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     36a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     36e:	87 7f       	andi	r24, 0xF7	; 247
     370:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     374:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	unsigned long address = 0;

	Endpoint_ClearSETUP();
	while(Endpoint_IsOUTReceived() == false);
     378:	82 ff       	sbrs	r24, 2
     37a:	fc cf       	rjmp	.-8      	; 0x374 <lucax_pdi_nvm_write_byte+0x12>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     37c:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
     380:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[2] = UEDATX;
     384:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[3] = UEDATX;
     388:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     38c:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     390:	3b 77       	andi	r19, 0x7B	; 123
     392:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     396:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	while(Endpoint_IsINReady() == false);
     39a:	30 ff       	sbrs	r19, 0
     39c:	fc cf       	rjmp	.-8      	; 0x396 <lucax_pdi_nvm_write_byte+0x34>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     39e:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3a2:	3e 77       	andi	r19, 0x7E	; 126
     3a4:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	last_op = nvm_write_byte(address, data, memory_type);
     3a8:	71 d1       	rcall	.+738    	; 0x68c <nvm_write_byte>
     3aa:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     3b4:	08 95       	ret

000003b6 <lucax_report_error>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3b6:	e8 ee       	ldi	r30, 0xE8	; 232
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	87 7f       	andi	r24, 0xF7	; 247
     3be:	80 83       	st	Z, r24
}

void lucax_report_error(void){
//	SoftUsart_print("* * Report error");
	Endpoint_ClearSETUP();
	Endpoint_Write_8(last_op); //send result
     3c0:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <last_op>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3c8:	80 81       	ld	r24, Z
     3ca:	8e 77       	andi	r24, 0x7E	; 126
     3cc:	80 83       	st	Z, r24
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
     3ce:	7d c5       	rjmp	.+2810   	; 0xeca <Endpoint_ClearStatusStage>

000003d0 <lucax_pdi_init>:
	last_op = 0;
}

void lucax_pdi_init(void){
//	SoftUsart_print("* * Pdi init");
	last_op = pdi_init(USB_ControlRequest.wValue);
     3d0:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
     3d4:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <USB_ControlRequest+0x3>
     3d8:	4f d3       	rcall	.+1694   	; 0xa78 <pdi_init>
     3da:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
	lucax_report_error();
     3de:	eb cf       	rjmp	.-42     	; 0x3b6 <lucax_report_error>

000003e0 <lucax_pdi_chip_erase>:
     3e0:	21 d1       	rcall	.+578    	; 0x624 <nvm_chip_erase>
}

void lucax_pdi_chip_erase(void){
//	SoftUsart_print("* * Chip erase");
	last_op = nvm_chip_erase();
     3e2:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
	lucax_report_error();
     3e6:	e7 cf       	rjmp	.-50     	; 0x3b6 <lucax_report_error>

000003e8 <lucax_pdi_raw_read>:
     3e8:	cf 93       	push	r28
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
}


void lucax_pdi_raw_read(void){
     3ea:	df 93       	push	r29
     3ec:	cb e0       	ldi	r28, 0x0B	; 11
     3ee:	d5 e0       	ldi	r29, 0x05	; 5
     3f0:	6a 81       	ldd	r22, Y+2	; 0x02
     3f2:	7b 81       	ldd	r23, Y+3	; 0x03
     3f4:	8c 81       	ldd	r24, Y+4	; 0x04
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3f8:	e8 ee       	ldi	r30, 0xE8	; 232
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	20 81       	ld	r18, Z
     3fe:	27 7f       	andi	r18, 0xF7	; 247
     400:	20 83       	st	Z, r18
//	SoftUsart_print("* * Raw read");
	long address = USB_ControlRequest.wIndex;
	address<<=16;
	address |= USB_ControlRequest.wValue;
	Endpoint_ClearSETUP();
	last_op = pdi_read_bytes(address, buffer, USB_ControlRequest.wLength);
     402:	2e 81       	ldd	r18, Y+6	; 0x06
     404:	3f 81       	ldd	r19, Y+7	; 0x07
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	51 e0       	ldi	r21, 0x01	; 1
     40a:	52 d2       	rcall	.+1188   	; 0x8b0 <pdi_read_bytes>
     40c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>

	Endpoint_Write_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     410:	6e 81       	ldd	r22, Y+6	; 0x06
     412:	7f 81       	ldd	r23, Y+7	; 0x07
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	20 d4       	rcall	.+2112   	; 0xc5a <Endpoint_Write_Control_Stream_LE>

	Endpoint_ClearStatusStage();

}
     41a:	df 91       	pop	r29
	Endpoint_ClearSETUP();
	last_op = pdi_read_bytes(address, buffer, USB_ControlRequest.wLength);

	Endpoint_Write_Control_Stream_LE(buffer, USB_ControlRequest.wLength);

	Endpoint_ClearStatusStage();
     41c:	cf 91       	pop	r28
     41e:	55 c5       	rjmp	.+2730   	; 0xeca <Endpoint_ClearStatusStage>

00000420 <lucax_pdi_raw_write>:

}

void lucax_pdi_raw_write(void){
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cb e0       	ldi	r28, 0x0B	; 11
     42e:	d5 e0       	ldi	r29, 0x05	; 5
     430:	ca 80       	ldd	r12, Y+2	; 0x02
     432:	db 80       	ldd	r13, Y+3	; 0x03
     434:	ec 80       	ldd	r14, Y+4	; 0x04
     436:	fd 80       	ldd	r15, Y+5	; 0x05
     438:	e8 ee       	ldi	r30, 0xE8	; 232
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	87 7f       	andi	r24, 0xF7	; 247
     440:	80 83       	st	Z, r24
	long address = USB_ControlRequest.wIndex;
	address<<=16;
	address |= USB_ControlRequest.wValue;
	Endpoint_ClearSETUP();

	Endpoint_Read_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     442:	6e 81       	ldd	r22, Y+6	; 0x06
     444:	7f 81       	ldd	r23, Y+7	; 0x07
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	68 d4       	rcall	.+2256   	; 0xd1c <Endpoint_Read_Control_Stream_LE>

	Endpoint_ClearStatusStage();
     44c:	3e d5       	rcall	.+2684   	; 0xeca <Endpoint_ClearStatusStage>
     44e:	2e 81       	ldd	r18, Y+6	; 0x06

	last_op = pdi_write_bytes(address, buffer, USB_ControlRequest.wLength);
     450:	3f 81       	ldd	r19, Y+7	; 0x07
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	51 e0       	ldi	r21, 0x01	; 1
     456:	c7 01       	movw	r24, r14
     458:	b6 01       	movw	r22, r12
     45a:	85 d2       	rcall	.+1290   	; 0x966 <pdi_write_bytes>
     45c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <last_op>
     460:	df 91       	pop	r29
}
     462:	cf 91       	pop	r28
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <EVENT_USB_Device_ControlRequest>:
     46e:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <USB_ControlRequest+0x1>
{
//	SoftUsart_send_str("Control request 0x");
//	SoftUsart_print_hex(USB_ControlRequest.bRequest);
//	SoftUsart_send_str("\n\r");

	switch(USB_ControlRequest.bRequest){
     472:	86 32       	cpi	r24, 0x26	; 38
     474:	09 f4       	brne	.+2      	; 0x478 <EVENT_USB_Device_ControlRequest+0xa>
     476:	3d c0       	rjmp	.+122    	; 0x4f2 <EVENT_USB_Device_ControlRequest+0x84>
     478:	58 f4       	brcc	.+22     	; 0x490 <EVENT_USB_Device_ControlRequest+0x22>
     47a:	82 32       	cpi	r24, 0x22	; 34
     47c:	09 f1       	breq	.+66     	; 0x4c0 <EVENT_USB_Device_ControlRequest+0x52>
     47e:	18 f4       	brcc	.+6      	; 0x486 <EVENT_USB_Device_ControlRequest+0x18>
     480:	81 32       	cpi	r24, 0x21	; 33
     482:	a1 f0       	breq	.+40     	; 0x4ac <EVENT_USB_Device_ControlRequest+0x3e>
     484:	08 95       	ret
     486:	83 32       	cpi	r24, 0x23	; 35
     488:	01 f1       	breq	.+64     	; 0x4ca <EVENT_USB_Device_ControlRequest+0x5c>
     48a:	84 32       	cpi	r24, 0x24	; 36
     48c:	41 f1       	breq	.+80     	; 0x4de <EVENT_USB_Device_ControlRequest+0x70>
     48e:	08 95       	ret
     490:	89 32       	cpi	r24, 0x29	; 41
     492:	09 f4       	brne	.+2      	; 0x496 <EVENT_USB_Device_ControlRequest+0x28>
     494:	38 c0       	rjmp	.+112    	; 0x506 <EVENT_USB_Device_ControlRequest+0x98>
     496:	28 f4       	brcc	.+10     	; 0x4a2 <EVENT_USB_Device_ControlRequest+0x34>
     498:	87 32       	cpi	r24, 0x27	; 39
     49a:	31 f1       	breq	.+76     	; 0x4e8 <EVENT_USB_Device_ControlRequest+0x7a>
     49c:	88 32       	cpi	r24, 0x28	; 40
     49e:	71 f1       	breq	.+92     	; 0x4fc <EVENT_USB_Device_ControlRequest+0x8e>
     4a0:	08 95       	ret
     4a2:	8a 32       	cpi	r24, 0x2A	; 42
     4a4:	41 f0       	breq	.+16     	; 0x4b6 <EVENT_USB_Device_ControlRequest+0x48>
     4a6:	8b 32       	cpi	r24, 0x2B	; 43
     4a8:	a9 f0       	breq	.+42     	; 0x4d4 <EVENT_USB_Device_ControlRequest+0x66>
     4aa:	08 95       	ret

	case LUCAX_GET_DESCRIPTOR:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4ac:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4b0:	87 ff       	sbrs	r24, 7
     4b2:	2d c0       	rjmp	.+90     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_get_descriptor();
     4b4:	55 ce       	rjmp	.-854    	; 0x160 <lucax_get_descriptor>
		break;
	case LUCAX_REPORT_ERROR:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4b6:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4ba:	87 ff       	sbrs	r24, 7
			lucax_report_error();
     4bc:	28 c0       	rjmp	.+80     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
     4be:	7b cf       	rjmp	.-266    	; 0x3b6 <lucax_report_error>
		break;
	case LUCAX_RELEASE_INTERFACE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     4c0:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4c4:	87 fd       	sbrc	r24, 7
			lucax_release_interface();
     4c6:	23 c0       	rjmp	.+70     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
     4c8:	57 ce       	rjmp	.-850    	; 0x178 <lucax_release_interface>
		break;

	case LUCAX_PDI_INIT:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4ca:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4ce:	87 ff       	sbrs	r24, 7
			lucax_pdi_init();
     4d0:	1e c0       	rjmp	.+60     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
     4d2:	7e cf       	rjmp	.-260    	; 0x3d0 <lucax_pdi_init>
		break;
	case LUCAX_PDI_CHIP_ERASE:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4d4:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4d8:	87 ff       	sbrs	r24, 7
			lucax_pdi_chip_erase();
     4da:	19 c0       	rjmp	.+50     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
		break;
	case LUCAX_PDI_NVM_READ:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     4dc:	81 cf       	rjmp	.-254    	; 0x3e0 <lucax_pdi_chip_erase>
     4de:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     4e2:	87 fd       	sbrc	r24, 7
			lucax_pdi_nvm_read();
     4e4:	14 c0       	rjmp	.+40     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
		break;
	case LUCAX_PDI_NVM_WRITE_PAGE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     4e6:	54 ce       	rjmp	.-856    	; 0x190 <lucax_pdi_nvm_read>
     4e8:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
			lucax_pdi_nvm_write_page();
     4ec:	87 fd       	sbrc	r24, 7
     4ee:	0f c0       	rjmp	.+30     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
		break;
	case LUCAX_PDI_NVM_WRITE_BYTE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     4f0:	ca ce       	rjmp	.-620    	; 0x286 <lucax_pdi_nvm_write_page>
     4f2:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
			lucax_pdi_nvm_write_byte();
     4f6:	87 fd       	sbrc	r24, 7
     4f8:	0a c0       	rjmp	.+20     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
		break;
	case LUCAX_PDI_RAW_READ:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     4fa:	33 cf       	rjmp	.-410    	; 0x362 <lucax_pdi_nvm_write_byte>
     4fc:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
			lucax_pdi_raw_read();
     500:	87 ff       	sbrs	r24, 7
     502:	05 c0       	rjmp	.+10     	; 0x50e <EVENT_USB_Device_ControlRequest+0xa0>
		break;
	case LUCAX_PDI_RAW_WRITE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     504:	71 cf       	rjmp	.-286    	; 0x3e8 <lucax_pdi_raw_read>
     506:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
			lucax_pdi_raw_write();
     50a:	87 ff       	sbrs	r24, 7
     50c:	89 cf       	rjmp	.-238    	; 0x420 <lucax_pdi_raw_write>
     50e:	08 95       	ret

00000510 <EVENT_USB_Device_Connect>:
     510:	08 95       	ret

00000512 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
     512:	08 95       	ret

00000514 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     514:	42 e3       	ldi	r20, 0x32	; 50
     516:	61 e8       	ldi	r22, 0x81	; 129
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	a2 d4       	rcall	.+2372   	; 0xe60 <Endpoint_ConfigureEndpoint_Prv>
     51c:	42 e3       	ldi	r20, 0x32	; 50
     51e:	60 e8       	ldi	r22, 0x80	; 128
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	9e c4       	rjmp	.+2364   	; 0xe60 <Endpoint_ConfigureEndpoint_Prv>

00000524 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     524:	29 2f       	mov	r18, r25
     526:	33 27       	eor	r19, r19
     528:	22 30       	cpi	r18, 0x02	; 2
     52a:	31 05       	cpc	r19, r1
     52c:	59 f0       	breq	.+22     	; 0x544 <CALLBACK_USB_GetDescriptor+0x20>
     52e:	23 30       	cpi	r18, 0x03	; 3
     530:	31 05       	cpc	r19, r1
     532:	69 f0       	breq	.+26     	; 0x54e <CALLBACK_USB_GetDescriptor+0x2a>
     534:	21 30       	cpi	r18, 0x01	; 1
     536:	31 05       	cpc	r19, r1
     538:	e9 f4       	brne	.+58     	; 0x574 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     53a:	82 e1       	ldi	r24, 0x12	; 18
     53c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     53e:	20 e2       	ldi	r18, 0x20	; 32
     540:	31 e0       	ldi	r19, 0x01	; 1
     542:	1c c0       	rjmp	.+56     	; 0x57c <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     544:	80 e2       	ldi	r24, 0x20	; 32
     546:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     54c:	17 c0       	rjmp	.+46     	; 0x57c <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     54e:	99 27       	eor	r25, r25
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	91 05       	cpc	r25, r1
     554:	49 f0       	breq	.+18     	; 0x568 <CALLBACK_USB_GetDescriptor+0x44>
     556:	28 f0       	brcs	.+10     	; 0x562 <CALLBACK_USB_GetDescriptor+0x3e>
     558:	02 97       	sbiw	r24, 0x02	; 2
     55a:	61 f4       	brne	.+24     	; 0x574 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     55c:	ec ea       	ldi	r30, 0xAC	; 172
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	05 c0       	rjmp	.+10     	; 0x56c <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     562:	ec ef       	ldi	r30, 0xFC	; 252
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	02 c0       	rjmp	.+4      	; 0x56c <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     568:	ec ed       	ldi	r30, 0xDC	; 220
     56a:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     56c:	84 91       	lpm	r24, Z
     56e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     570:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     572:	04 c0       	rjmp	.+8      	; 0x57c <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
                                    const void ** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     57c:	fa 01       	movw	r30, r20
     57e:	31 83       	std	Z+1, r19	; 0x01
     580:	20 83       	st	Z, r18
	return Size;
}
     582:	08 95       	ret

00000584 <nvm_pointer>:
#include "driver/pdi_physical.h"
#include "driver/pdi_const.h"

#include <util/delay.h>

void nvm_pointer(unsigned long c){
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	00 d0       	rcall	.+0      	; 0x58a <nvm_pointer+0x6>
     58a:	00 d0       	rcall	.+0      	; 0x58c <nvm_pointer+0x8>
     58c:	1f 92       	push	r1
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[5];
	data[0] = PDI_STORE_INDIRECT | (PTR<<2) | LONG;
     592:	2b e6       	ldi	r18, 0x6B	; 107
     594:	29 83       	std	Y+1, r18	; 0x01
	data[1] = c;
     596:	6a 83       	std	Y+2, r22	; 0x02
	data[2] = c>>8;
     598:	7b 83       	std	Y+3, r23	; 0x03
	data[3] = c>>16;
     59a:	8c 83       	std	Y+4, r24	; 0x04
	data[4] = c>>24;
     59c:	9d 83       	std	Y+5, r25	; 0x05
	pdi_write_raw(data, 5);
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	ce 01       	movw	r24, r28
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	cc d1       	rcall	.+920    	; 0x940 <pdi_write_raw>
}
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <nvm_cmd>:

void  nvm_cmd(unsigned char c){
	pdi_write_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_CMD, c);
     5b8:	48 2f       	mov	r20, r24
     5ba:	6a ec       	ldi	r22, 0xCA	; 202
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	52 c1       	rjmp	.+676    	; 0x868 <pdi_write_byte>

000005c4 <trig_cmdex>:
}


void  trig_cmdex(void){
	pdi_write_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_CTRLA, 0x01);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	6b ec       	ldi	r22, 0xCB	; 203
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	4c c1       	rjmp	.+664    	; 0x868 <pdi_write_byte>

000005d0 <wait_nvm>:
}

PdiResult wait_nvm(void){
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	1f 92       	push	r1
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	unsigned char wait = 0xff;
	while(wait--){
     5dc:	1e ef       	ldi	r17, 0xFE	; 254
     5de:	1f 3f       	cpi	r17, 0xFF	; 255
     5e0:	c9 f0       	breq	.+50     	; 0x614 <wait_nvm+0x44>
		unsigned char status;
		unsigned char ret = pdi_read_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_STATUS, &status);
     5e2:	ae 01       	movw	r20, r28
     5e4:	4f 5f       	subi	r20, 0xFF	; 255
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f ec       	ldi	r22, 0xCF	; 207
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	13 d1       	rcall	.+550    	; 0x818 <pdi_read_byte>
		if(ret != NO_ERROR)
     5f2:	81 11       	cpse	r24, r1
     5f4:	12 c0       	rjmp	.+36     	; 0x61a <wait_nvm+0x4a>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	81 0f       	add	r24, r17
			return ret;
		if((status & (1<<7)) == 0) //Poll NVMBUSY flag
     5fa:	99 81       	ldd	r25, Y+1	; 0x01
     5fc:	97 ff       	sbrs	r25, 7
     5fe:	08 c0       	rjmp	.+16     	; 0x610 <wait_nvm+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     600:	ef e9       	ldi	r30, 0x9F	; 159
     602:	ff e0       	ldi	r31, 0x0F	; 15
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	f1 f7       	brne	.-4      	; 0x604 <wait_nvm+0x34>
     608:	00 c0       	rjmp	.+0      	; 0x60a <wait_nvm+0x3a>
     60a:	00 00       	nop
     60c:	18 2f       	mov	r17, r24
     60e:	e7 cf       	rjmp	.-50     	; 0x5de <wait_nvm+0xe>
			break;
		_delay_ms(1);
	}
	if(wait == 0)
     610:	11 23       	and	r17, r17
     612:	11 f0       	breq	.+4      	; 0x618 <wait_nvm+0x48>
		return TIME_OUT;
	return NO_ERROR;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	01 c0       	rjmp	.+2      	; 0x61a <wait_nvm+0x4a>
		if((status & (1<<7)) == 0) //Poll NVMBUSY flag
			break;
		_delay_ms(1);
	}
	if(wait == 0)
		return TIME_OUT;
     618:	82 e0       	ldi	r24, 0x02	; 2
	return NO_ERROR;
}
     61a:	0f 90       	pop	r0
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	08 95       	ret

00000624 <nvm_chip_erase>:

PdiResult nvm_chip_erase(){
	nvm_cmd(CHIP_ERASE);
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	c8 df       	rcall	.-112    	; 0x5b8 <nvm_cmd>
	trig_cmdex();
     628:	cd df       	rcall	.-102    	; 0x5c4 <trig_cmdex>
	return wait_nvm();
     62a:	d2 cf       	rjmp	.-92     	; 0x5d0 <wait_nvm>

0000062c <nvm_read_byte>:
     62c:	cf 92       	push	r12
}

PdiResult nvm_read_byte(unsigned long address, unsigned char * data){
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	6b 01       	movw	r12, r22
     63a:	7c 01       	movw	r14, r24
     63c:	ea 01       	movw	r28, r20
	nvm_cmd(READ_NVM); //read nvm
     63e:	83 e4       	ldi	r24, 0x43	; 67
     640:	bb df       	rcall	.-138    	; 0x5b8 <nvm_cmd>
	return pdi_read_byte(address, data);
     642:	ae 01       	movw	r20, r28
     644:	c7 01       	movw	r24, r14
     646:	b6 01       	movw	r22, r12
}
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
	return wait_nvm();
}

PdiResult nvm_read_byte(unsigned long address, unsigned char * data){
	nvm_cmd(READ_NVM); //read nvm
	return pdi_read_byte(address, data);
     652:	cf 90       	pop	r12
     654:	e1 c0       	rjmp	.+450    	; 0x818 <pdi_read_byte>

00000656 <nvm_read_bytes>:
}


PdiResult nvm_read_bytes(unsigned long address, unsigned char * data, unsigned int count){
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	6b 01       	movw	r12, r22
     668:	7c 01       	movw	r14, r24
     66a:	ea 01       	movw	r28, r20
     66c:	89 01       	movw	r16, r18
	nvm_cmd(READ_NVM); //read nvm
     66e:	83 e4       	ldi	r24, 0x43	; 67
     670:	a3 df       	rcall	.-186    	; 0x5b8 <nvm_cmd>
	return pdi_read_bytes(address, data, count);
     672:	98 01       	movw	r18, r16
     674:	ae 01       	movw	r20, r28
     676:	c7 01       	movw	r24, r14
     678:	b6 01       	movw	r22, r12
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
}


PdiResult nvm_read_bytes(unsigned long address, unsigned char * data, unsigned int count){
	nvm_cmd(READ_NVM); //read nvm
	return pdi_read_bytes(address, data, count);
     688:	cf 90       	pop	r12
     68a:	12 c1       	rjmp	.+548    	; 0x8b0 <pdi_read_bytes>

0000068c <nvm_write_byte>:
}


PdiResult nvm_write_byte(unsigned long address, unsigned char data, ByteMemory mem){
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	6b 01       	movw	r12, r22
     69a:	7c 01       	movw	r14, r24
     69c:	d4 2f       	mov	r29, r20
     69e:	c2 2f       	mov	r28, r18
	nvm_cmd((mem == LOCK) ? WRITE_LOCK : WRITE_FUSE);
     6a0:	21 30       	cpi	r18, 0x01	; 1
     6a2:	11 f0       	breq	.+4      	; 0x6a8 <nvm_write_byte+0x1c>
     6a4:	8c e4       	ldi	r24, 0x4C	; 76
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <nvm_write_byte+0x1e>
     6a8:	88 e0       	ldi	r24, 0x08	; 8
     6aa:	86 df       	rcall	.-244    	; 0x5b8 <nvm_cmd>
	pdi_write_byte(address, data);
     6ac:	4d 2f       	mov	r20, r29
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	da d0       	rcall	.+436    	; 0x868 <pdi_write_byte>

	if(mem == LOCK)
     6b4:	c1 30       	cpi	r28, 0x01	; 1
		trig_cmdex();
     6b6:	09 f4       	brne	.+2      	; 0x6ba <nvm_write_byte+0x2e>
     6b8:	85 df       	rcall	.-246    	; 0x5c4 <trig_cmdex>

	return wait_nvm();
}
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
	pdi_write_byte(address, data);

	if(mem == LOCK)
		trig_cmdex();

	return wait_nvm();
     6c4:	cf 90       	pop	r12
     6c6:	84 cf       	rjmp	.-248    	; 0x5d0 <wait_nvm>

000006c8 <nvm_paged_write>:
}

PdiResult nvm_paged_write(unsigned long address, unsigned char * data, unsigned int count, PagedMemory mem){
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <nvm_paged_write+0x18>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	4a 01       	movw	r8, r20
     6ea:	59 01       	movw	r10, r18
	//erase page buffer
	nvm_pointer(address);
     6ec:	4b df       	rcall	.-362    	; 0x584 <nvm_pointer>
	nvm_cmd((mem == FLASH) ? ERASE_FLASH_PAGE_BUFFER : ERASE_EEPROM_PAGE_BUFFER);
     6ee:	00 23       	and	r16, r16
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <nvm_paged_write+0x2e>
     6f2:	86 e3       	ldi	r24, 0x36	; 54
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <nvm_paged_write+0x30>
     6f6:	86 e2       	ldi	r24, 0x26	; 38
	trig_cmdex();
     6f8:	5f df       	rcall	.-322    	; 0x5b8 <nvm_cmd>
     6fa:	64 df       	rcall	.-312    	; 0x5c4 <trig_cmdex>
	wait_nvm();
     6fc:	69 df       	rcall	.-302    	; 0x5d0 <wait_nvm>
     6fe:	00 23       	and	r16, r16

	//load page buffer
	nvm_cmd((mem == FLASH) ? LOAD_FLASH_PAGE_BUFFER : LOAD_EEPROM_PAGE_BUFFER);
     700:	11 f0       	breq	.+4      	; 0x706 <nvm_paged_write+0x3e>
     702:	83 e3       	ldi	r24, 0x33	; 51
     704:	01 c0       	rjmp	.+2      	; 0x708 <nvm_paged_write+0x40>
     706:	83 e2       	ldi	r24, 0x23	; 35
     708:	57 df       	rcall	.-338    	; 0x5b8 <nvm_cmd>
	pdi_write_bytes(address, data, count);
     70a:	95 01       	movw	r18, r10
     70c:	a4 01       	movw	r20, r8
     70e:	c7 01       	movw	r24, r14
     710:	b6 01       	movw	r22, r12
     712:	29 d1       	rcall	.+594    	; 0x966 <pdi_write_bytes>

	//write page
	nvm_cmd((mem == FLASH) ? ERASE_WRITE_FLASH_PAGE : ERASE_WRITE_EEPROM_PAGE); //erase and write
     714:	00 23       	and	r16, r16
     716:	11 f0       	breq	.+4      	; 0x71c <nvm_paged_write+0x54>
     718:	85 e3       	ldi	r24, 0x35	; 53
     71a:	01 c0       	rjmp	.+2      	; 0x71e <nvm_paged_write+0x56>
     71c:	8f e2       	ldi	r24, 0x2F	; 47
     71e:	4c df       	rcall	.-360    	; 0x5b8 <nvm_cmd>
	nvm_pointer(address);
     720:	c7 01       	movw	r24, r14
     722:	b6 01       	movw	r22, r12
     724:	2f df       	rcall	.-418    	; 0x584 <nvm_pointer>
	unsigned char dummy[] = {PDI_STORE_INDIRECT | (PTR_DATA_INC<<2), 0x00};	//perform a dummy write to trigger previous command
     726:	84 e6       	ldi	r24, 0x64	; 100
     728:	89 83       	std	Y+1, r24	; 0x01
	pdi_write_raw(dummy, sizeof(dummy));
     72a:	1a 82       	std	Y+2, r1	; 0x02
     72c:	62 e0       	ldi	r22, 0x02	; 2
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	ce 01       	movw	r24, r28
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	05 d1       	rcall	.+522    	; 0x940 <pdi_write_raw>

	return wait_nvm();
     736:	4c df       	rcall	.-360    	; 0x5d0 <wait_nvm>
     738:	0f 90       	pop	r0
}
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	08 95       	ret

00000754 <usart_setup>:

UsartState state;
char pending;

void usart_setup(unsigned int ubrr){
	UBRR1 = (ubrr&0xFFFF)-1; //baud
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     75a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1C = (1<<UMSEL10) | (1<<UPM11) | (1<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (1<<UCPOL1);
     75e:	8f e6       	ldi	r24, 0x6F	; 111
     760:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     764:	08 95       	ret

00000766 <usart_tx_mode>:
}

void usart_tx_mode(void){
	UCSR1B = 1<<TXEN1;
     766:	88 e0       	ldi	r24, 0x08	; 8
     768:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	state = UTX;
     76c:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <state>
	pending = 0;
     770:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <pending>
     774:	08 95       	ret

00000776 <usart_rx_mode>:
}

void usart_rx_mode(void){
	UCSR1B = 1<<RXEN1;
     776:	80 e1       	ldi	r24, 0x10	; 16
     778:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	state = URX;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <state>
     782:	08 95       	ret

00000784 <usart_disconnect>:
}

void usart_disconnect(void){
	UCSR1B = 0;
     784:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
     788:	08 95       	ret

0000078a <send_byte>:
}


void send_byte(unsigned char data){
     78a:	cf 93       	push	r28
     78c:	c8 2f       	mov	r28, r24
	if(state == URX)
     78e:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <state>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	09 f4       	brne	.+2      	; 0x798 <send_byte+0xe>
		usart_tx_mode();
     796:	e7 df       	rcall	.-50     	; 0x766 <usart_tx_mode>
	while(!(UCSR1A & (1<<UDRE1))); //wait until the transmitter buffer is ready to accept new data
     798:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     79c:	85 ff       	sbrs	r24, 5
     79e:	fc cf       	rjmp	.-8      	; 0x798 <send_byte+0xe>
	UDR1 = data;
     7a0:	c0 93 ce 00 	sts	0x00CE, r28	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	UCSR1A |= 1<<TXC1; //clear transmit completed flag
     7a4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     7a8:	80 64       	ori	r24, 0x40	; 64
     7aa:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	pending = 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <pending>
}
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <read_byte>:

//TODO: add time out control
unsigned char read_byte(unsigned char *data){
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ec 01       	movw	r28, r24
	if(state == UTX){
     7be:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <state>
     7c2:	81 11       	cpse	r24, r1
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <read_byte+0x1c>
		while (!(UCSR1A & (1<<TXC1)));//check if transmission is completed before disabling the transmitter
     7c6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     7ca:	86 ff       	sbrs	r24, 6
     7cc:	fc cf       	rjmp	.-8      	; 0x7c6 <read_byte+0xe>
		usart_rx_mode();
     7ce:	d3 df       	rcall	.-90     	; 0x776 <usart_rx_mode>
		pending = 0;
     7d0:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <pending>
	UCSR1A |= 1<<TXC1; //clear transmit completed flag
	pending = 1;
}

//TODO: add time out control
unsigned char read_byte(unsigned char *data){
     7d4:	8a ef       	ldi	r24, 0xFA	; 250
		while (!(UCSR1A & (1<<TXC1)));//check if transmission is completed before disabling the transmitter
		usart_rx_mode();
		pending = 0;
	}
	unsigned char retry = 250;
	while (!(UCSR1A & (1<<RXC1))){
     7d6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     7da:	97 fd       	sbrc	r25, 7
     7dc:	07 c0       	rjmp	.+14     	; 0x7ec <read_byte+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7de:	90 e5       	ldi	r25, 0x50	; 80
     7e0:	9a 95       	dec	r25
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <read_byte+0x28>
     7e4:	81 50       	subi	r24, 0x01	; 1
		retry--;
		_delay_us(15);
		if(retry == 0) return 0x01;
     7e6:	b9 f7       	brne	.-18     	; 0x7d6 <read_byte+0x1e>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <read_byte+0x3c>
	}
	*data = UDR1;
     7ec:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     7f0:	88 83       	st	Y, r24
	return 0;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <usart_wait_tx>:

void usart_wait_tx(void){
	if((state == UTX) && (pending == 1)){
     7fa:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <state>
     7fe:	81 11       	cpse	r24, r1
     800:	0a c0       	rjmp	.+20     	; 0x816 <usart_wait_tx+0x1c>
     802:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <pending>
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	31 f4       	brne	.+12     	; 0x816 <usart_wait_tx+0x1c>
		while (!(UCSR1A & (1<<TXC1)));
     80a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     80e:	86 ff       	sbrs	r24, 6
     810:	fc cf       	rjmp	.-8      	; 0x80a <usart_wait_tx+0x10>
		pending = 0;
     812:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <pending>
     816:	08 95       	ret

00000818 <pdi_read_byte>:
	pdi_on = 1;
	return NO_ERROR;
}


PdiResult pdi_read_byte(unsigned long address, unsigned char *data){
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	6b 01       	movw	r12, r22
     828:	7c 01       	movw	r14, r24
     82a:	8a 01       	movw	r16, r20
	if(pdi_on == 0) return PDI_DISABLED;
     82c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     830:	88 23       	and	r24, r24
     832:	89 f0       	breq	.+34     	; 0x856 <pdi_read_byte+0x3e>
	send_byte(PDI_LOAD_DIRECT | (LONG<<2) | (BYTE<<0));
     834:	8c e0       	ldi	r24, 0x0C	; 12
     836:	a9 df       	rcall	.-174    	; 0x78a <send_byte>
     838:	c4 e0       	ldi	r28, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(address&0xFF);
     83a:	8c 2d       	mov	r24, r12
     83c:	a6 df       	rcall	.-180    	; 0x78a <send_byte>
		address>>=8;
     83e:	cd 2c       	mov	r12, r13
     840:	de 2c       	mov	r13, r14
     842:	ef 2c       	mov	r14, r15
     844:	ff 24       	eor	r15, r15
     846:	c1 50       	subi	r28, 0x01	; 1
	}
	if(read_byte(data)) return TIME_OUT;
     848:	c1 f7       	brne	.-16     	; 0x83a <pdi_read_byte+0x22>
     84a:	c8 01       	movw	r24, r16
     84c:	b5 df       	rcall	.-150    	; 0x7b8 <read_byte>
     84e:	88 23       	and	r24, r24
     850:	19 f0       	breq	.+6      	; 0x858 <pdi_read_byte+0x40>
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	01 c0       	rjmp	.+2      	; 0x858 <pdi_read_byte+0x40>
	return NO_ERROR;
}


PdiResult pdi_read_byte(unsigned long address, unsigned char *data){
	if(pdi_on == 0) return PDI_DISABLED;
     856:	81 e0       	ldi	r24, 0x01	; 1
		address>>=8;
	}
	if(read_byte(data)) return TIME_OUT;
	//TODO:check for error
	return NO_ERROR;
}
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	08 95       	ret

00000868 <pdi_write_byte>:

PdiResult pdi_write_byte(unsigned long address, unsigned char data){
     868:	cf 92       	push	r12
     86a:	df 92       	push	r13
     86c:	ef 92       	push	r14
     86e:	ff 92       	push	r15
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
     878:	d4 2f       	mov	r29, r20
	if(pdi_on == 0) return PDI_DISABLED;
     87a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     87e:	88 23       	and	r24, r24
     880:	79 f0       	breq	.+30     	; 0x8a0 <pdi_write_byte+0x38>
	send_byte(PDI_STORE_DIRECT | (LONG<<2) | (BYTE<<0));
     882:	8c e4       	ldi	r24, 0x4C	; 76
     884:	82 df       	rcall	.-252    	; 0x78a <send_byte>
     886:	c4 e0       	ldi	r28, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(address);
     888:	8c 2d       	mov	r24, r12
     88a:	7f df       	rcall	.-258    	; 0x78a <send_byte>
		address>>=8;
     88c:	cd 2c       	mov	r12, r13
     88e:	de 2c       	mov	r13, r14
     890:	ef 2c       	mov	r14, r15
     892:	ff 24       	eor	r15, r15
     894:	c1 50       	subi	r28, 0x01	; 1
	}
	send_byte(data);
     896:	c1 f7       	brne	.-16     	; 0x888 <pdi_write_byte+0x20>
     898:	8d 2f       	mov	r24, r29
     89a:	77 df       	rcall	.-274    	; 0x78a <send_byte>
	return NO_ERROR;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <pdi_write_byte+0x3a>
	//TODO:check for error
	return NO_ERROR;
}

PdiResult pdi_write_byte(unsigned long address, unsigned char data){
	if(pdi_on == 0) return PDI_DISABLED;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
		send_byte(address);
		address>>=8;
	}
	send_byte(data);
	return NO_ERROR;
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	ff 90       	pop	r15
     8a8:	ef 90       	pop	r14
     8aa:	df 90       	pop	r13
     8ac:	cf 90       	pop	r12
     8ae:	08 95       	ret

000008b0 <pdi_read_bytes>:

PdiResult pdi_read_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	6b 01       	movw	r12, r22
     8ca:	7c 01       	movw	r14, r24
     8cc:	4a 01       	movw	r8, r20
     8ce:	89 01       	movw	r16, r18
	if(pdi_on == 0) return PDI_DISABLED;
     8d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     8d4:	88 23       	and	r24, r24
     8d6:	31 f1       	breq	.+76     	; 0x924 <pdi_read_bytes+0x74>
	unsigned int count_tmp = count-1;
     8d8:	59 01       	movw	r10, r18
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	a8 1a       	sub	r10, r24
     8de:	b1 08       	sbc	r11, r1
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
     8e0:	8b e6       	ldi	r24, 0x6B	; 107
     8e2:	53 df       	rcall	.-346    	; 0x78a <send_byte>
     8e4:	c4 e0       	ldi	r28, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(start_address);
     8e6:	8c 2d       	mov	r24, r12
     8e8:	50 df       	rcall	.-352    	; 0x78a <send_byte>
		start_address>>=8;
     8ea:	cd 2c       	mov	r12, r13
     8ec:	de 2c       	mov	r13, r14
     8ee:	ef 2c       	mov	r14, r15
     8f0:	ff 24       	eor	r15, r15
     8f2:	c1 50       	subi	r28, 0x01	; 1
	}
	//set repeat counter
	send_byte(PDI_REPEAT | WORD);
     8f4:	c1 f7       	brne	.-16     	; 0x8e6 <pdi_read_bytes+0x36>
     8f6:	81 ea       	ldi	r24, 0xA1	; 161
	send_byte(count_tmp);
     8f8:	48 df       	rcall	.-368    	; 0x78a <send_byte>
     8fa:	8a 2d       	mov	r24, r10
	count_tmp>>=8;
	send_byte(count_tmp);
     8fc:	46 df       	rcall	.-372    	; 0x78a <send_byte>
     8fe:	8b 2d       	mov	r24, r11
     900:	44 df       	rcall	.-376    	; 0x78a <send_byte>
	//send first read instruction
	send_byte(PDI_LOAD_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
     902:	84 e2       	ldi	r24, 0x24	; 36
     904:	42 df       	rcall	.-380    	; 0x78a <send_byte>
     906:	e4 01       	movw	r28, r8
     908:	08 0d       	add	r16, r8
     90a:	19 1d       	adc	r17, r9
	for(unsigned int c=0; c<count; c++){
     90c:	c0 17       	cp	r28, r16
     90e:	d1 07       	cpc	r29, r17
     910:	39 f0       	breq	.+14     	; 0x920 <pdi_read_bytes+0x70>
		if(read_byte(data+c))
     912:	ce 01       	movw	r24, r28
     914:	51 df       	rcall	.-350    	; 0x7b8 <read_byte>
     916:	21 96       	adiw	r28, 0x01	; 1
     918:	88 23       	and	r24, r24
     91a:	c1 f3       	breq	.-16     	; 0x90c <pdi_read_bytes+0x5c>
     91c:	82 e0       	ldi	r24, 0x02	; 2
			return TIME_OUT;
     91e:	03 c0       	rjmp	.+6      	; 0x926 <pdi_read_bytes+0x76>
     920:	80 e0       	ldi	r24, 0x00	; 0
	}

	return NO_ERROR;
     922:	01 c0       	rjmp	.+2      	; 0x926 <pdi_read_bytes+0x76>
     924:	81 e0       	ldi	r24, 0x01	; 1
	send_byte(data);
	return NO_ERROR;
}

PdiResult pdi_read_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
     926:	df 91       	pop	r29
		if(read_byte(data+c))
			return TIME_OUT;
	}

	return NO_ERROR;
}
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	9f 90       	pop	r9
     93c:	8f 90       	pop	r8
     93e:	08 95       	ret

00000940 <pdi_write_raw>:
     940:	0f 93       	push	r16
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
	pdi_write_raw(data, count);
	return NO_ERROR;
}

void pdi_write_raw(unsigned char * data, unsigned int count){
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8c 01       	movw	r16, r24
     94c:	06 0f       	add	r16, r22
     94e:	17 1f       	adc	r17, r23
	for(; count>0; count--, data++)
     950:	c0 17       	cp	r28, r16
     952:	d1 07       	cpc	r29, r17
     954:	19 f0       	breq	.+6      	; 0x95c <pdi_write_raw+0x1c>
		send_byte(*data);
     956:	89 91       	ld	r24, Y+
     958:	18 df       	rcall	.-464    	; 0x78a <send_byte>
     95a:	fa cf       	rjmp	.-12     	; 0x950 <pdi_write_raw+0x10>
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <pdi_write_bytes>:
	}

	return NO_ERROR;
}

PdiResult pdi_write_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
     966:	8f 92       	push	r8
     968:	9f 92       	push	r9
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	4b 01       	movw	r8, r22
     97e:	5c 01       	movw	r10, r24
     980:	6a 01       	movw	r12, r20
     982:	89 01       	movw	r16, r18
	if(pdi_on == 0) return PDI_DISABLED;
     984:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
     988:	88 23       	and	r24, r24
     98a:	e1 f0       	breq	.+56     	; 0x9c4 <pdi_write_bytes+0x5e>
	unsigned int count_tmp = count-1;
     98c:	79 01       	movw	r14, r18
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	e8 1a       	sub	r14, r24
     992:	f1 08       	sbc	r15, r1
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
     994:	8b e6       	ldi	r24, 0x6B	; 107
     996:	f9 de       	rcall	.-526    	; 0x78a <send_byte>
     998:	c4 e0       	ldi	r28, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(start_address);
     99a:	88 2d       	mov	r24, r8
     99c:	f6 de       	rcall	.-532    	; 0x78a <send_byte>
		start_address>>=8;
     99e:	89 2c       	mov	r8, r9
     9a0:	9a 2c       	mov	r9, r10
     9a2:	ab 2c       	mov	r10, r11
     9a4:	bb 24       	eor	r11, r11
     9a6:	c1 50       	subi	r28, 0x01	; 1
	}
	//set repeat counter
	send_byte(PDI_REPEAT | WORD);
     9a8:	c1 f7       	brne	.-16     	; 0x99a <pdi_write_bytes+0x34>
     9aa:	81 ea       	ldi	r24, 0xA1	; 161
	send_byte(count_tmp);
     9ac:	ee de       	rcall	.-548    	; 0x78a <send_byte>
     9ae:	8e 2d       	mov	r24, r14
	count_tmp>>=8;
	send_byte(count_tmp);
     9b0:	ec de       	rcall	.-552    	; 0x78a <send_byte>
     9b2:	8f 2d       	mov	r24, r15
	//send first read instruction
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
     9b4:	ea de       	rcall	.-556    	; 0x78a <send_byte>
     9b6:	84 e6       	ldi	r24, 0x64	; 100
     9b8:	e8 de       	rcall	.-560    	; 0x78a <send_byte>
	pdi_write_raw(data, count);
     9ba:	b8 01       	movw	r22, r16
     9bc:	c6 01       	movw	r24, r12
     9be:	c0 df       	rcall	.-128    	; 0x940 <pdi_write_raw>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
	return NO_ERROR;
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <pdi_write_bytes+0x60>
     9c4:	81 e0       	ldi	r24, 0x01	; 1

	return NO_ERROR;
}

PdiResult pdi_write_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
     9c6:	cf 91       	pop	r28
	send_byte(count_tmp);
	//send first read instruction
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
	pdi_write_raw(data, count);
	return NO_ERROR;
}
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	9f 90       	pop	r9
     9da:	8f 90       	pop	r8
     9dc:	08 95       	ret

000009de <send_break>:
     9de:	53 9a       	sbi	0x0a, 3	; 10
	pdi_on = 0;
}

void send_break(void){
	PDI_DDR |= (1<<TX); //tx output low (from default state)
	usart_rx_mode();//put in rx mode to manually override data pin
     9e0:	ca de       	rcall	.-620    	; 0x776 <usart_rx_mode>
	for(unsigned int c = 0; c<char_us; c+=10)
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <char_us>
     9ea:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <char_us+0x1>
     9ee:	82 17       	cp	r24, r18
     9f0:	93 07       	cpc	r25, r19
     9f2:	28 f4       	brcc	.+10     	; 0x9fe <send_break+0x20>
     9f4:	20 e3       	ldi	r18, 0x30	; 48
     9f6:	2a 95       	dec	r18
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <send_break+0x18>
     9fa:	0a 96       	adiw	r24, 0x0a	; 10
     9fc:	f4 cf       	rjmp	.-24     	; 0x9e6 <send_break+0x8>
		_delay_us(9);
	PDI_DDR &= ~(1<<TX); //restore
	usart_tx_mode();
     9fe:	53 98       	cbi	0x0a, 3	; 10
     a00:	b2 ce       	rjmp	.-668    	; 0x766 <usart_tx_mode>

00000a02 <send_idle>:
}

void send_idle(void){
	usart_wait_tx();
     a02:	fb de       	rcall	.-522    	; 0x7fa <usart_wait_tx>
	usart_tx_mode();
     a04:	b0 de       	rcall	.-672    	; 0x766 <usart_tx_mode>
     a06:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned int c = 0; c<char_us; c+=10)
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <char_us>
     a0e:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <char_us+0x1>
     a12:	82 17       	cp	r24, r18
     a14:	93 07       	cpc	r25, r19
     a16:	28 f4       	brcc	.+10     	; 0xa22 <send_idle+0x20>
     a18:	20 e3       	ldi	r18, 0x30	; 48
     a1a:	2a 95       	dec	r18
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <send_idle+0x18>
     a1e:	0a 96       	adiw	r24, 0x0a	; 10
     a20:	f4 cf       	rjmp	.-24     	; 0xa0a <send_idle+0x8>
     a22:	08 95       	ret

00000a24 <pdi_exit>:
		_delay_us(9);
}
     a24:	dc df       	rcall	.-72     	; 0x9de <send_break>
}

void pdi_exit(void){
	//always synchronize the protocol in case something went bad
	send_break();
	send_break();
     a26:	db df       	rcall	.-74     	; 0x9de <send_break>
	send_idle();
     a28:	ec df       	rcall	.-40     	; 0xa02 <send_idle>
	send_idle();
     a2a:	eb df       	rcall	.-42     	; 0xa02 <send_idle>
	//end reset
	send_byte(PDI_STORE_CONTROL_REG | PDI_RESET_REG);
     a2c:	81 ec       	ldi	r24, 0xC1	; 193
	send_byte(0);
     a2e:	ad de       	rcall	.-678    	; 0x78a <send_byte>

	send_idle();
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	ab de       	rcall	.-682    	; 0x78a <send_byte>
	send_idle();
     a34:	e6 df       	rcall	.-52     	; 0xa02 <send_idle>
     a36:	e5 df       	rcall	.-54     	; 0xa02 <send_idle>
	send_idle();
     a38:	e4 df       	rcall	.-56     	; 0xa02 <send_idle>
     a3a:	e3 df       	rcall	.-58     	; 0xa02 <send_idle>
	send_idle();
     a3c:	a3 de       	rcall	.-698    	; 0x784 <usart_disconnect>
     a3e:	8b b1       	in	r24, 0x0b	; 11

	usart_disconnect();
     a40:	83 7d       	andi	r24, 0xD3	; 211
     a42:	8b b9       	out	0x0b, r24	; 11
	PDI_PORT &= ~((1<<CLK) | (1<<TX) | (1<<RX)); //disable pull ups
     a44:	8a b1       	in	r24, 0x0a	; 10
     a46:	83 7d       	andi	r24, 0xD3	; 211
     a48:	8a b9       	out	0x0a, r24	; 10
	PDI_DDR &= ~((1<<CLK) | (1<<TX) | (1<<RX)); //all input
     a4a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
     a4e:	08 95       	ret

00000a50 <send_idles>:
	pdi_on = 0;
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	d8 2f       	mov	r29, r24
	for(unsigned int c = 0; c<char_us; c+=10)
		_delay_us(9);
}

void send_idles(char n){
	for(char c = 0; c<n; c++)
     a56:	c0 e0       	ldi	r28, 0x00	; 0
     a58:	cd 17       	cp	r28, r29
     a5a:	19 f0       	breq	.+6      	; 0xa62 <send_idles+0x12>
		send_idle();
     a5c:	d2 df       	rcall	.-92     	; 0xa02 <send_idle>
	for(unsigned int c = 0; c<char_us; c+=10)
		_delay_us(9);
}

void send_idles(char n){
	for(char c = 0; c<n; c++)
     a5e:	cf 5f       	subi	r28, 0xFF	; 255
     a60:	fb cf       	rjmp	.-10     	; 0xa58 <send_idles+0x8>
		send_idle();
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <pin_default_state>:

void pin_default_state(void){
	//RX input, TX input, CLK output
	PDI_PORT &= ~((1<<TX) | (1<<RX) | (1<<CLK));
     a68:	8b b1       	in	r24, 0x0b	; 11
     a6a:	83 7d       	andi	r24, 0xD3	; 211
     a6c:	8b b9       	out	0x0b, r24	; 11
	PDI_DDR &= ~((1<<RX) | (1<<TX));
     a6e:	8a b1       	in	r24, 0x0a	; 10
     a70:	83 7f       	andi	r24, 0xF3	; 243
     a72:	8a b9       	out	0x0a, r24	; 10
	PDI_DDR |= (1<<CLK) ;
     a74:	55 9a       	sbi	0x0a, 5	; 10
     a76:	08 95       	ret

00000a78 <pdi_init>:
#include "pdi_const.h"

unsigned char pdi_on = 0;
unsigned int char_us;

PdiResult pdi_init(unsigned int freq_khz){
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	1f 92       	push	r1
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	9c 01       	movw	r18, r24
	char_us = 12000/freq_khz; //break and idle character length in us
     a86:	80 ee       	ldi	r24, 0xE0	; 224
     a88:	9e e2       	ldi	r25, 0x2E	; 46
     a8a:	b9 01       	movw	r22, r18
     a8c:	05 d5       	rcall	.+2570   	; 0x1498 <__udivmodhi4>
     a8e:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <char_us+0x1>
     a92:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <char_us>
	//RX input, TX output low, CLK output low
	PDI_PORT &= ~((1<<TX) | (1<<RX) | (1<<CLK));
     a96:	8b b1       	in	r24, 0x0b	; 11
     a98:	83 7d       	andi	r24, 0xD3	; 211
     a9a:	8b b9       	out	0x0b, r24	; 11
	PDI_DDR &= ~(1<<RX);
     a9c:	52 98       	cbi	0x0a, 2	; 10
	PDI_DDR |= (1<<CLK) | (1<<TX);
     a9e:	8a b1       	in	r24, 0x0a	; 10
     aa0:	88 62       	ori	r24, 0x28	; 40
     aa2:	8a b9       	out	0x0a, r24	; 10

	//Setup USART
	long brr = (F_CPU/2000)/freq_khz;
	usart_setup(brr);
     aa4:	80 e4       	ldi	r24, 0x40	; 64
     aa6:	9f e1       	ldi	r25, 0x1F	; 31
     aa8:	b9 01       	movw	r22, r18
     aaa:	f6 d4       	rcall	.+2540   	; 0x1498 <__udivmodhi4>
     aac:	cb 01       	movw	r24, r22
     aae:	52 de       	rcall	.-860    	; 0x754 <usart_setup>
     ab0:	85 e3       	ldi	r24, 0x35	; 53
     ab2:	8a 95       	dec	r24
     ab4:	f1 f7       	brne	.-4      	; 0xab2 <pdi_init+0x3a>

	_delay_us(10); //TODO: check if could be removed
	PDI_PORT |= 1<<TX; //Disable reset and wait at least 95 ns and opt 100us
     ab6:	00 00       	nop

	usart_tx_mode();
     ab8:	5b 9a       	sbi	0x0b, 3	; 11
	pin_default_state();
     aba:	55 de       	rcall	.-854    	; 0x766 <usart_tx_mode>
	send_idles(2);
     abc:	d5 df       	rcall	.-86     	; 0xa68 <pin_default_state>

	//set idle bits between dir. change to 16
	send_byte(PDI_STORE_CONTROL_REG | PDI_CTRL_REG);
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	c7 df       	rcall	.-114    	; 0xa50 <send_idles>
	send_byte(0x03);
     ac2:	82 ec       	ldi	r24, 0xC2	; 194
     ac4:	62 de       	rcall	.-828    	; 0x78a <send_byte>
	send_idle();
     ac6:	83 e0       	ldi	r24, 0x03	; 3

	//reset device
	send_byte(PDI_STORE_CONTROL_REG | PDI_RESET_REG);
     ac8:	60 de       	rcall	.-832    	; 0x78a <send_byte>
     aca:	9b df       	rcall	.-202    	; 0xa02 <send_idle>
	send_byte(PDI_RESET_SIGNATURE);
     acc:	81 ec       	ldi	r24, 0xC1	; 193
     ace:	5d de       	rcall	.-838    	; 0x78a <send_byte>
	send_idle();
     ad0:	89 e5       	ldi	r24, 0x59	; 89

	//provide 64bit programming key - little endian
	send_byte(PDI_KEY);
     ad2:	5b de       	rcall	.-842    	; 0x78a <send_byte>
     ad4:	96 df       	rcall	.-212    	; 0xa02 <send_idle>
	send_byte(0xFF);
     ad6:	80 ee       	ldi	r24, 0xE0	; 224
     ad8:	58 de       	rcall	.-848    	; 0x78a <send_byte>
	send_byte(0x88);
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	56 de       	rcall	.-852    	; 0x78a <send_byte>
	send_byte(0xD8);
     ade:	88 e8       	ldi	r24, 0x88	; 136
     ae0:	54 de       	rcall	.-856    	; 0x78a <send_byte>
	send_byte(0xCD);
     ae2:	88 ed       	ldi	r24, 0xD8	; 216
     ae4:	52 de       	rcall	.-860    	; 0x78a <send_byte>
	send_byte(0x45);
     ae6:	8d ec       	ldi	r24, 0xCD	; 205
     ae8:	50 de       	rcall	.-864    	; 0x78a <send_byte>
     aea:	85 e4       	ldi	r24, 0x45	; 69
	send_byte(0xAB);
     aec:	4e de       	rcall	.-868    	; 0x78a <send_byte>
     aee:	8b ea       	ldi	r24, 0xAB	; 171
	send_byte(0x89);
     af0:	4c de       	rcall	.-872    	; 0x78a <send_byte>
     af2:	89 e8       	ldi	r24, 0x89	; 137
     af4:	4a de       	rcall	.-876    	; 0x78a <send_byte>
	send_byte(0x12);
     af6:	82 e1       	ldi	r24, 0x12	; 18
     af8:	48 de       	rcall	.-880    	; 0x78a <send_byte>
     afa:	82 e0       	ldi	r24, 0x02	; 2
	send_idles(2);
     afc:	a9 df       	rcall	.-174    	; 0xa50 <send_idles>
     afe:	18 ec       	ldi	r17, 0xC8	; 200
     b00:	80 e8       	ldi	r24, 0x80	; 128
     b02:	43 de       	rcall	.-890    	; 0x78a <send_byte>

	//poll Non Volatile Memory Enable bit
	unsigned char retry = 200;
	for(; retry > 0; retry--){
		send_byte(PDI_LOAD_CONTROL_REG | PDI_STATUS_REG);
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	57 de       	rcall	.-850    	; 0x7b8 <read_byte>
		unsigned char status;
		if(read_byte(&status))
     b0a:	81 11       	cpse	r24, r1
     b0c:	07 c0       	rjmp	.+14     	; 0xb1c <__stack+0x1d>
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	81 fd       	sbrc	r24, 1
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <__stack+0x21>
     b14:	82 e0       	ldi	r24, 0x02	; 2
			return TIME_OUT;
		if(status & (1<<NVMEN))break;
     b16:	9c df       	rcall	.-200    	; 0xa50 <send_idles>
     b18:	11 50       	subi	r17, 0x01	; 1
     b1a:	91 f7       	brne	.-28     	; 0xb00 <__stack+0x1>
		send_idles(2);
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__stack+0x29>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	if(retry == 0) return TIME_OUT;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0f 90       	pop	r0

	pdi_on = 1;
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
	return NO_ERROR;
     b30:	08 95       	ret

00000b32 <Endpoint_Write_Stream_LE>:
}
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	8b 01       	movw	r16, r22
     b46:	7a 01       	movw	r14, r20
     b48:	df d1       	rcall	.+958    	; 0xf08 <Endpoint_WaitUntilReady>
     b4a:	81 11       	cpse	r24, r1
     b4c:	33 c0       	rjmp	.+102    	; 0xbb4 <Endpoint_Write_Stream_LE+0x82>
     b4e:	e1 14       	cp	r14, r1
     b50:	f1 04       	cpc	r15, r1
     b52:	39 f0       	breq	.+14     	; 0xb62 <Endpoint_Write_Stream_LE+0x30>
     b54:	f7 01       	movw	r30, r14
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	08 1b       	sub	r16, r24
     b5c:	19 0b       	sbc	r17, r25
     b5e:	c8 0f       	add	r28, r24
     b60:	d9 1f       	adc	r29, r25
     b62:	c1 2c       	mov	r12, r1
     b64:	d1 2c       	mov	r13, r1
     b66:	01 15       	cp	r16, r1
     b68:	11 05       	cpc	r17, r1
     b6a:	19 f1       	breq	.+70     	; 0xbb2 <Endpoint_Write_Stream_LE+0x80>
     b6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b70:	85 fd       	sbrc	r24, 5
     b72:	16 c0       	rjmp	.+44     	; 0xba0 <Endpoint_Write_Stream_LE+0x6e>
     b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b78:	8e 77       	andi	r24, 0x7E	; 126
     b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b7e:	72 d4       	rcall	.+2276   	; 0x1464 <USB_USBTask>
     b80:	e1 14       	cp	r14, r1
     b82:	f1 04       	cpc	r15, r1
     b84:	49 f0       	breq	.+18     	; 0xb98 <Endpoint_Write_Stream_LE+0x66>
     b86:	f7 01       	movw	r30, r14
     b88:	80 81       	ld	r24, Z
     b8a:	91 81       	ldd	r25, Z+1	; 0x01
     b8c:	c8 0e       	add	r12, r24
     b8e:	d9 1e       	adc	r13, r25
     b90:	d1 82       	std	Z+1, r13	; 0x01
     b92:	c0 82       	st	Z, r12
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <Endpoint_Write_Stream_LE+0x82>
     b98:	b7 d1       	rcall	.+878    	; 0xf08 <Endpoint_WaitUntilReady>
     b9a:	88 23       	and	r24, r24
     b9c:	21 f3       	breq	.-56     	; 0xb66 <Endpoint_Write_Stream_LE+0x34>
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <Endpoint_Write_Stream_LE+0x82>
     ba0:	89 91       	ld	r24, Y+
     ba2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ba6:	01 50       	subi	r16, 0x01	; 1
     ba8:	11 09       	sbc	r17, r1
     baa:	ff ef       	ldi	r31, 0xFF	; 255
     bac:	cf 1a       	sub	r12, r31
     bae:	df 0a       	sbc	r13, r31
     bb0:	da cf       	rjmp	.-76     	; 0xb66 <Endpoint_Write_Stream_LE+0x34>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	08 95       	ret

00000bc6 <Endpoint_Read_Stream_LE>:
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	8b 01       	movw	r16, r22
     bda:	7a 01       	movw	r14, r20
     bdc:	95 d1       	rcall	.+810    	; 0xf08 <Endpoint_WaitUntilReady>
     bde:	81 11       	cpse	r24, r1
     be0:	33 c0       	rjmp	.+102    	; 0xc48 <Endpoint_Read_Stream_LE+0x82>
     be2:	e1 14       	cp	r14, r1
     be4:	f1 04       	cpc	r15, r1
     be6:	39 f0       	breq	.+14     	; 0xbf6 <Endpoint_Read_Stream_LE+0x30>
     be8:	f7 01       	movw	r30, r14
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	08 1b       	sub	r16, r24
     bf0:	19 0b       	sbc	r17, r25
     bf2:	c8 0f       	add	r28, r24
     bf4:	d9 1f       	adc	r29, r25
     bf6:	c1 2c       	mov	r12, r1
     bf8:	d1 2c       	mov	r13, r1
     bfa:	01 15       	cp	r16, r1
     bfc:	11 05       	cpc	r17, r1
     bfe:	19 f1       	breq	.+70     	; 0xc46 <Endpoint_Read_Stream_LE+0x80>
     c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c04:	85 fd       	sbrc	r24, 5
     c06:	16 c0       	rjmp	.+44     	; 0xc34 <Endpoint_Read_Stream_LE+0x6e>
     c08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c0c:	8b 77       	andi	r24, 0x7B	; 123
     c0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c12:	28 d4       	rcall	.+2128   	; 0x1464 <USB_USBTask>
     c14:	e1 14       	cp	r14, r1
     c16:	f1 04       	cpc	r15, r1
     c18:	49 f0       	breq	.+18     	; 0xc2c <Endpoint_Read_Stream_LE+0x66>
     c1a:	f7 01       	movw	r30, r14
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	c8 0e       	add	r12, r24
     c22:	d9 1e       	adc	r13, r25
     c24:	d1 82       	std	Z+1, r13	; 0x01
     c26:	c0 82       	st	Z, r12
     c28:	85 e0       	ldi	r24, 0x05	; 5
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <Endpoint_Read_Stream_LE+0x82>
     c2c:	6d d1       	rcall	.+730    	; 0xf08 <Endpoint_WaitUntilReady>
     c2e:	88 23       	and	r24, r24
     c30:	21 f3       	breq	.-56     	; 0xbfa <Endpoint_Read_Stream_LE+0x34>
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <Endpoint_Read_Stream_LE+0x82>
     c34:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c38:	89 93       	st	Y+, r24
     c3a:	01 50       	subi	r16, 0x01	; 1
     c3c:	11 09       	sbc	r17, r1
     c3e:	ff ef       	ldi	r31, 0xFF	; 255
     c40:	cf 1a       	sub	r12, r31
     c42:	df 0a       	sbc	r13, r31
     c44:	da cf       	rjmp	.-76     	; 0xbfa <Endpoint_Read_Stream_LE+0x34>
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	08 95       	ret

00000c5a <Endpoint_Write_Control_Stream_LE>:
     c5a:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <USB_ControlRequest+0x6>
     c5e:	30 91 12 05 	lds	r19, 0x0512	; 0x800512 <USB_ControlRequest+0x7>
     c62:	26 17       	cp	r18, r22
     c64:	37 07       	cpc	r19, r23
     c66:	48 f0       	brcs	.+18     	; 0xc7a <Endpoint_Write_Control_Stream_LE+0x20>
     c68:	61 15       	cp	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	39 f4       	brne	.+14     	; 0xc7c <Endpoint_Write_Control_Stream_LE+0x22>
     c6e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c72:	2e 77       	andi	r18, 0x7E	; 126
     c74:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <Endpoint_Write_Control_Stream_LE+0x22>
     c7a:	b9 01       	movw	r22, r18
     c7c:	fc 01       	movw	r30, r24
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	61 15       	cp	r22, r1
     c82:	71 05       	cpc	r23, r1
     c84:	91 f1       	breq	.+100    	; 0xcea <Endpoint_Write_Control_Stream_LE+0x90>
     c86:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     c8a:	88 23       	and	r24, r24
     c8c:	09 f4       	brne	.+2      	; 0xc90 <Endpoint_Write_Control_Stream_LE+0x36>
     c8e:	40 c0       	rjmp	.+128    	; 0xd10 <Endpoint_Write_Control_Stream_LE+0xb6>
     c90:	85 30       	cpi	r24, 0x05	; 5
     c92:	09 f4       	brne	.+2      	; 0xc96 <Endpoint_Write_Control_Stream_LE+0x3c>
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <Endpoint_Write_Control_Stream_LE+0xba>
     c96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c9a:	83 fd       	sbrc	r24, 3
     c9c:	3d c0       	rjmp	.+122    	; 0xd18 <Endpoint_Write_Control_Stream_LE+0xbe>
     c9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ca2:	82 fd       	sbrc	r24, 2
     ca4:	2f c0       	rjmp	.+94     	; 0xd04 <Endpoint_Write_Control_Stream_LE+0xaa>
     ca6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     caa:	80 ff       	sbrs	r24, 0
     cac:	e9 cf       	rjmp	.-46     	; 0xc80 <Endpoint_Write_Control_Stream_LE+0x26>
     cae:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     cb2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	92 2b       	or	r25, r18
     cba:	61 15       	cp	r22, r1
     cbc:	71 05       	cpc	r23, r1
     cbe:	51 f0       	breq	.+20     	; 0xcd4 <Endpoint_Write_Control_Stream_LE+0x7a>
     cc0:	80 34       	cpi	r24, 0x40	; 64
     cc2:	91 05       	cpc	r25, r1
     cc4:	38 f4       	brcc	.+14     	; 0xcd4 <Endpoint_Write_Control_Stream_LE+0x7a>
     cc6:	21 91       	ld	r18, Z+
     cc8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ccc:	61 50       	subi	r22, 0x01	; 1
     cce:	71 09       	sbc	r23, r1
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	f3 cf       	rjmp	.-26     	; 0xcba <Endpoint_Write_Control_Stream_LE+0x60>
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	80 34       	cpi	r24, 0x40	; 64
     cd8:	91 05       	cpc	r25, r1
     cda:	09 f0       	breq	.+2      	; 0xcde <Endpoint_Write_Control_Stream_LE+0x84>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ce2:	8e 77       	andi	r24, 0x7E	; 126
     ce4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ce8:	cb cf       	rjmp	.-106    	; 0xc80 <Endpoint_Write_Control_Stream_LE+0x26>
     cea:	21 11       	cpse	r18, r1
     cec:	cc cf       	rjmp	.-104    	; 0xc86 <Endpoint_Write_Control_Stream_LE+0x2c>
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <Endpoint_Write_Control_Stream_LE+0xaa>
     cf0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     cf4:	88 23       	and	r24, r24
     cf6:	61 f0       	breq	.+24     	; 0xd10 <Endpoint_Write_Control_Stream_LE+0xb6>
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	61 f0       	breq	.+24     	; 0xd14 <Endpoint_Write_Control_Stream_LE+0xba>
     cfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d00:	83 fd       	sbrc	r24, 3
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <Endpoint_Write_Control_Stream_LE+0xbe>
     d04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d08:	82 ff       	sbrs	r24, 2
     d0a:	f2 cf       	rjmp	.-28     	; 0xcf0 <Endpoint_Write_Control_Stream_LE+0x96>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	08 95       	ret
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	08 95       	ret
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	08 95       	ret

00000d1c <Endpoint_Read_Control_Stream_LE>:
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	29 f4       	brne	.+10     	; 0xd2c <Endpoint_Read_Control_Stream_LE+0x10>
     d22:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d26:	2b 77       	andi	r18, 0x7B	; 123
     d28:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d2c:	fc 01       	movw	r30, r24
     d2e:	61 15       	cp	r22, r1
     d30:	71 05       	cpc	r23, r1
     d32:	41 f1       	breq	.+80     	; 0xd84 <Endpoint_Read_Control_Stream_LE+0x68>
     d34:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     d38:	88 23       	and	r24, r24
     d3a:	61 f1       	breq	.+88     	; 0xd94 <Endpoint_Read_Control_Stream_LE+0x78>
     d3c:	85 30       	cpi	r24, 0x05	; 5
     d3e:	61 f1       	breq	.+88     	; 0xd98 <Endpoint_Read_Control_Stream_LE+0x7c>
     d40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d44:	83 fd       	sbrc	r24, 3
     d46:	24 c0       	rjmp	.+72     	; 0xd90 <Endpoint_Read_Control_Stream_LE+0x74>
     d48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d4c:	82 ff       	sbrs	r24, 2
     d4e:	ef cf       	rjmp	.-34     	; 0xd2e <Endpoint_Read_Control_Stream_LE+0x12>
     d50:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     d54:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	92 2b       	or	r25, r18
     d5c:	89 2b       	or	r24, r25
     d5e:	31 f0       	breq	.+12     	; 0xd6c <Endpoint_Read_Control_Stream_LE+0x50>
     d60:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d64:	81 93       	st	Z+, r24
     d66:	61 50       	subi	r22, 0x01	; 1
     d68:	71 09       	sbc	r23, r1
     d6a:	91 f7       	brne	.-28     	; 0xd50 <Endpoint_Read_Control_Stream_LE+0x34>
     d6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d70:	8b 77       	andi	r24, 0x7B	; 123
     d72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d76:	db cf       	rjmp	.-74     	; 0xd2e <Endpoint_Read_Control_Stream_LE+0x12>
     d78:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     d7c:	88 23       	and	r24, r24
     d7e:	51 f0       	breq	.+20     	; 0xd94 <Endpoint_Read_Control_Stream_LE+0x78>
     d80:	85 30       	cpi	r24, 0x05	; 5
     d82:	51 f0       	breq	.+20     	; 0xd98 <Endpoint_Read_Control_Stream_LE+0x7c>
     d84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d88:	80 ff       	sbrs	r24, 0
     d8a:	f6 cf       	rjmp	.-20     	; 0xd78 <Endpoint_Read_Control_Stream_LE+0x5c>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	08 95       	ret
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	08 95       	ret
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	08 95       	ret

00000d9c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     d9c:	20 91 11 05 	lds	r18, 0x0511	; 0x800511 <USB_ControlRequest+0x6>
     da0:	30 91 12 05 	lds	r19, 0x0512	; 0x800512 <USB_ControlRequest+0x7>
     da4:	26 17       	cp	r18, r22
     da6:	37 07       	cpc	r19, r23
     da8:	48 f0       	brcs	.+18     	; 0xdbc <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     daa:	61 15       	cp	r22, r1
     dac:	71 05       	cpc	r23, r1
     dae:	39 f4       	brne	.+14     	; 0xdbe <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     db4:	2e 77       	andi	r18, 0x7E	; 126
     db6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <Endpoint_Write_Control_PStream_LE+0x22>
     dbc:	b9 01       	movw	r22, r18
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     dc2:	61 15       	cp	r22, r1
     dc4:	71 05       	cpc	r23, r1
     dc6:	99 f1       	breq	.+102    	; 0xe2e <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     dc8:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <Endpoint_Write_Control_PStream_LE+0x36>
     dd0:	41 c0       	rjmp	.+130    	; 0xe54 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     dd2:	85 30       	cpi	r24, 0x05	; 5
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <Endpoint_Write_Control_PStream_LE+0x3c>
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     ddc:	83 fd       	sbrc	r24, 3
     dde:	3e c0       	rjmp	.+124    	; 0xe5c <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     de0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     de4:	82 fd       	sbrc	r24, 2
     de6:	30 c0       	rjmp	.+96     	; 0xe48 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     dec:	80 ff       	sbrs	r24, 0
     dee:	e9 cf       	rjmp	.-46     	; 0xdc2 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     df0:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     df4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     dfc:	61 15       	cp	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	59 f0       	breq	.+22     	; 0xe18 <Endpoint_Write_Control_PStream_LE+0x7c>
     e02:	80 34       	cpi	r24, 0x40	; 64
     e04:	91 05       	cpc	r25, r1
     e06:	40 f4       	brcc	.+16     	; 0xe18 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     e08:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e0a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     e0e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     e10:	61 50       	subi	r22, 0x01	; 1
     e12:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	f2 cf       	rjmp	.-28     	; 0xdfc <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	80 34       	cpi	r24, 0x40	; 64
     e1c:	91 05       	cpc	r25, r1
     e1e:	09 f0       	breq	.+2      	; 0xe22 <Endpoint_Write_Control_PStream_LE+0x86>
     e20:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e26:	8e 77       	andi	r24, 0x7E	; 126
     e28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e2c:	ca cf       	rjmp	.-108    	; 0xdc2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e2e:	21 11       	cpse	r18, r1
     e30:	cb cf       	rjmp	.-106    	; 0xdc8 <Endpoint_Write_Control_PStream_LE+0x2c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e34:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e38:	88 23       	and	r24, r24
     e3a:	61 f0       	breq	.+24     	; 0xe54 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e3c:	85 30       	cpi	r24, 0x05	; 5
     e3e:	61 f0       	breq	.+24     	; 0xe58 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e44:	83 fd       	sbrc	r24, 3
     e46:	0a c0       	rjmp	.+20     	; 0xe5c <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e4c:	82 ff       	sbrs	r24, 2
     e4e:	f2 cf       	rjmp	.-28     	; 0xe34 <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     e58:	83 e0       	ldi	r24, 0x03	; 3
     e5a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     e5e:	08 95       	ret

00000e60 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     e60:	98 2f       	mov	r25, r24
     e62:	97 30       	cpi	r25, 0x07	; 7
     e64:	68 f5       	brcc	.+90     	; 0xec0 <Endpoint_ConfigureEndpoint_Prv+0x60>
     e66:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     e6a:	98 17       	cp	r25, r24
     e6c:	39 f0       	breq	.+14     	; 0xe7c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     e6e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     e72:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     e76:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <Endpoint_ConfigureEndpoint_Prv+0x22>
     e7c:	24 2f       	mov	r18, r20
     e7e:	76 2f       	mov	r23, r22
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	21 fd       	sbrc	r18, 1
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <Endpoint_ConfigureEndpoint_Prv+0x2a>
     e86:	9f 5f       	subi	r25, 0xFF	; 255
     e88:	ec cf       	rjmp	.-40     	; 0xe62 <Endpoint_ConfigureEndpoint_Prv+0x2>
     e8a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e8e:	3e 7f       	andi	r19, 0xFE	; 254
     e90:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e94:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     e98:	3d 7f       	andi	r19, 0xFD	; 253
     e9a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     e9e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ea2:	31 60       	ori	r19, 0x01	; 1
     ea4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ea8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     eac:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     eb0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     eb4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     eb8:	27 fd       	sbrc	r18, 7
     eba:	e5 cf       	rjmp	.-54     	; 0xe86 <Endpoint_ConfigureEndpoint_Prv+0x26>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	08 95       	ret
     ec0:	8f 70       	andi	r24, 0x0F	; 15
     ec2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	08 95       	ret

00000eca <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     eca:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>
     ece:	87 ff       	sbrs	r24, 7
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     ed6:	82 fd       	sbrc	r24, 2
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     eda:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     ede:	81 11       	cpse	r24, r1
     ee0:	f8 cf       	rjmp	.-16     	; 0xed2 <Endpoint_ClearStatusStage+0x8>
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ee4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ee8:	8b 77       	andi	r24, 0x7B	; 123
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     eec:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
     ef0:	88 23       	and	r24, r24
     ef2:	49 f0       	breq	.+18     	; 0xf06 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     ef8:	80 ff       	sbrs	r24, 0
     efa:	f8 cf       	rjmp	.-16     	; 0xeec <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     efc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f00:	8e 77       	andi	r24, 0x7E	; 126
     f02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f06:	08 95       	ret

00000f08 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     f08:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     f0c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     f10:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     f12:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f16:	84 2f       	mov	r24, r20
     f18:	81 70       	andi	r24, 0x01	; 1
     f1a:	40 ff       	sbrs	r20, 0
     f1c:	23 c0       	rjmp	.+70     	; 0xf64 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     f22:	80 fd       	sbrc	r24, 0
     f24:	1d c0       	rjmp	.+58     	; 0xf60 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f26:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f2a:	88 23       	and	r24, r24
     f2c:	99 f0       	breq	.+38     	; 0xf54 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f2e:	85 30       	cpi	r24, 0x05	; 5
     f30:	99 f0       	breq	.+38     	; 0xf58 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f32:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     f36:	85 fd       	sbrc	r24, 5
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <Endpoint_WaitUntilReady+0x54>
     f3a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     f3e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     f42:	24 17       	cp	r18, r20
     f44:	35 07       	cpc	r19, r21
     f46:	29 f3       	breq	.-54     	; 0xf12 <Endpoint_WaitUntilReady+0xa>
     f48:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     f4a:	11 f0       	breq	.+4      	; 0xf50 <Endpoint_WaitUntilReady+0x48>
     f4c:	9a 01       	movw	r18, r20
     f4e:	e1 cf       	rjmp	.-62     	; 0xf12 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     f58:	83 e0       	ldi	r24, 0x03	; 3
     f5a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f64:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     f68:	42 ff       	sbrs	r20, 2
     f6a:	dd cf       	rjmp	.-70     	; 0xf26 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     f6c:	08 95       	ret

00000f6e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f76:	4b d0       	rcall	.+150    	; 0x100e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f78:	52 d0       	rcall	.+164    	; 0x101e <USB_INT_ClearAllInterrupts>
     f7a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f7c:	d0 e0       	ldi	r29, 0x00	; 0
     f7e:	88 81       	ld	r24, Y
     f80:	8f 77       	andi	r24, 0x7F	; 127
     f82:	88 83       	st	Y, r24
     f84:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	88 83       	st	Y, r24
     f8a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f8c:	8f 7d       	andi	r24, 0xDF	; 223
     f8e:	88 83       	st	Y, r24
     f90:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f92:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     f96:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     f9a:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     f9e:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     fa2:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	f8 01       	movw	r30, r16
     fa8:	80 81       	ld	r24, Z
     faa:	8b 7f       	andi	r24, 0xFB	; 251
     fac:	80 83       	st	Z, r24
     fae:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	88 83       	st	Y, r24
     fb4:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	52 df       	rcall	.-348    	; 0xe60 <Endpoint_ConfigureEndpoint_Prv>
     fbc:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8e 7f       	andi	r24, 0xFE	; 254
     fc4:	80 83       	st	Z, r24
     fc6:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	80 83       	st	Z, r24
     fd0:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     fd2:	88 60       	ori	r24, 0x08	; 8
     fd4:	80 83       	st	Z, r24
     fd6:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     fd8:	80 81       	ld	r24, Z
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	80 83       	st	Z, r24
     fde:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     fe0:	80 61       	ori	r24, 0x10	; 16
     fe2:	88 83       	st	Y, r24
     fe4:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	08 95       	ret

00000fee <USB_Init>:
     fee:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8f 7e       	andi	r24, 0xEF	; 239
     ff6:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     ff8:	e7 ed       	ldi	r30, 0xD7	; 215
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <USB_IsInitialized>

	USB_ResetInterface();
    100c:	b0 cf       	rjmp	.-160    	; 0xf6e <USB_ResetInterface>

0000100e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    100e:	e8 ed       	ldi	r30, 0xD8	; 216
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1018:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    101c:	08 95       	ret

0000101e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    101e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1022:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1026:	08 95       	ret

00001028 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    104a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    104e:	82 ff       	sbrs	r24, 2
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1052:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1056:	82 ff       	sbrs	r24, 2
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    105a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1064:	fe d1       	rcall	.+1020   	; 0x1462 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1066:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    106a:	80 ff       	sbrs	r24, 0
    106c:	1d c0       	rjmp	.+58     	; 0x10a8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    106e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1072:	80 ff       	sbrs	r24, 0
    1074:	19 c0       	rjmp	.+50     	; 0x10a8 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1076:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1080:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1084:	80 ff       	sbrs	r24, 0
    1086:	0c c0       	rjmp	.+24     	; 0x10a0 <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1088:	80 e1       	ldi	r24, 0x10	; 16
    108a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    108c:	82 e1       	ldi	r24, 0x12	; 18
    108e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1090:	09 b4       	in	r0, 0x29	; 41
    1092:	00 fe       	sbrs	r0, 0
    1094:	fd cf       	rjmp	.-6      	; 0x1090 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>
			EVENT_USB_Device_Connect();
    109c:	39 da       	rcall	.-2958   	; 0x510 <EVENT_USB_Device_Connect>
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10a0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    10a2:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    10a6:	35 da       	rcall	.-2966   	; 0x512 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    10a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    10ac:	80 ff       	sbrs	r24, 0
    10ae:	18 c0       	rjmp	.+48     	; 0x10e0 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    10b0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    10b4:	80 ff       	sbrs	r24, 0
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    10b8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    10bc:	8e 7f       	andi	r24, 0xFE	; 254
    10be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    10c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    10c6:	80 61       	ori	r24, 0x10	; 16
    10c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    10cc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    10d0:	80 62       	ori	r24, 0x20	; 32
    10d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    10d6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    10de:	c1 d1       	rcall	.+898    	; 0x1462 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    10e0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    10e4:	84 ff       	sbrs	r24, 4
    10e6:	2f c0       	rjmp	.+94     	; 0x1146 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    10e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    10ec:	84 ff       	sbrs	r24, 4
    10ee:	2b c0       	rjmp	.+86     	; 0x1146 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    10f0:	80 e1       	ldi	r24, 0x10	; 16
    10f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    10f4:	82 e1       	ldi	r24, 0x12	; 18
    10f6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    10f8:	09 b4       	in	r0, 0x29	; 41
    10fa:	00 fe       	sbrs	r0, 0
    10fc:	fd cf       	rjmp	.-6      	; 0x10f8 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    10fe:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1102:	8f 7d       	andi	r24, 0xDF	; 223
    1104:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1108:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    110c:	8f 7e       	andi	r24, 0xEF	; 239
    110e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1112:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1116:	8f 7e       	andi	r24, 0xEF	; 239
    1118:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    111c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1120:	81 60       	ori	r24, 0x01	; 1
    1122:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1126:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <USB_Device_ConfigurationNumber>
    112a:	88 23       	and	r24, r24
    112c:	11 f0       	breq	.+4      	; 0x1132 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1132:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1136:	87 fd       	sbrc	r24, 7
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__vector_10+0x116>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	01 c0       	rjmp	.+2      	; 0x1140 <__vector_10+0x118>
    113e:	83 e0       	ldi	r24, 0x03	; 3
    1140:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1144:	8e d1       	rcall	.+796    	; 0x1462 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1146:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    114a:	83 ff       	sbrs	r24, 3
    114c:	22 c0       	rjmp	.+68     	; 0x1192 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    114e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1152:	83 ff       	sbrs	r24, 3
    1154:	1e c0       	rjmp	.+60     	; 0x1192 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1156:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    115a:	87 7f       	andi	r24, 0xF7	; 247
    115c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1166:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    116a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1174:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1178:	8e 7f       	andi	r24, 0xFE	; 254
    117a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    117e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1182:	80 61       	ori	r24, 0x10	; 16
    1184:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1188:	42 e3       	ldi	r20, 0x32	; 50
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	68 de       	rcall	.-816    	; 0xe60 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1190:	68 d1       	rcall	.+720    	; 0x1462 <USB_Event_Stub>
    1192:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <USB_Device_ProcessControlRequest>:
    11b4:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	aa 97       	sbiw	r28, 0x2a	; 42
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	eb e0       	ldi	r30, 0x0B	; 11
    11cc:	f5 e0       	ldi	r31, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    11ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    11d2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    11d4:	25 e0       	ldi	r18, 0x05	; 5
    11d6:	e3 31       	cpi	r30, 0x13	; 19
    11d8:	f2 07       	cpc	r31, r18
    11da:	c9 f7       	brne	.-14     	; 0x11ce <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    11dc:	48 d9       	rcall	.-3440   	; 0x46e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    11e2:	83 ff       	sbrs	r24, 3
    11e4:	26 c1       	rjmp	.+588    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    11e6:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    11ea:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <USB_ControlRequest+0x1>
    11ee:	95 30       	cpi	r25, 0x05	; 5
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <USB_Device_ProcessControlRequest+0x40>
    11f2:	78 c0       	rjmp	.+240    	; 0x12e4 <USB_Device_ProcessControlRequest+0x130>
    11f4:	30 f4       	brcc	.+12     	; 0x1202 <USB_Device_ProcessControlRequest+0x4e>
    11f6:	91 30       	cpi	r25, 0x01	; 1
    11f8:	81 f1       	breq	.+96     	; 0x125a <USB_Device_ProcessControlRequest+0xa6>
    11fa:	68 f0       	brcs	.+26     	; 0x1216 <USB_Device_ProcessControlRequest+0x62>
    11fc:	93 30       	cpi	r25, 0x03	; 3
    11fe:	69 f1       	breq	.+90     	; 0x125a <USB_Device_ProcessControlRequest+0xa6>
    1200:	18 c1       	rjmp	.+560    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
    1202:	98 30       	cpi	r25, 0x08	; 8
    1204:	09 f4       	brne	.+2      	; 0x1208 <USB_Device_ProcessControlRequest+0x54>
    1206:	e2 c0       	rjmp	.+452    	; 0x13cc <USB_Device_ProcessControlRequest+0x218>
    1208:	99 30       	cpi	r25, 0x09	; 9
    120a:	09 f4       	brne	.+2      	; 0x120e <USB_Device_ProcessControlRequest+0x5a>
    120c:	f1 c0       	rjmp	.+482    	; 0x13f0 <USB_Device_ProcessControlRequest+0x23c>
    120e:	96 30       	cpi	r25, 0x06	; 6
    1210:	09 f0       	breq	.+2      	; 0x1214 <USB_Device_ProcessControlRequest+0x60>
    1212:	0f c1       	rjmp	.+542    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
    1214:	89 c0       	rjmp	.+274    	; 0x1328 <USB_Device_ProcessControlRequest+0x174>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1216:	80 38       	cpi	r24, 0x80	; 128
    1218:	81 f0       	breq	.+32     	; 0x123a <USB_Device_ProcessControlRequest+0x86>
    121a:	82 38       	cpi	r24, 0x82	; 130
    121c:	09 f0       	breq	.+2      	; 0x1220 <USB_Device_ProcessControlRequest+0x6c>
    121e:	09 c1       	rjmp	.+530    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1220:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
    1224:	8f 70       	andi	r24, 0x0F	; 15
    1226:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    122a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    122e:	85 fb       	bst	r24, 5
    1230:	88 27       	eor	r24, r24
    1232:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1234:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    123a:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    123e:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <USB_Device_RemoteWakeupEnabled>
    1242:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1244:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1246:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    124a:	97 7f       	andi	r25, 0xF7	; 247
    124c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1250:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1254:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1258:	c4 c0       	rjmp	.+392    	; 0x13e2 <USB_Device_ProcessControlRequest+0x22e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    125a:	28 2f       	mov	r18, r24
    125c:	2d 7f       	andi	r18, 0xFD	; 253
    125e:	09 f0       	breq	.+2      	; 0x1262 <USB_Device_ProcessControlRequest+0xae>
    1260:	e8 c0       	rjmp	.+464    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1262:	88 23       	and	r24, r24
    1264:	19 f0       	breq	.+6      	; 0x126c <USB_Device_ProcessControlRequest+0xb8>
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	61 f0       	breq	.+24     	; 0x1282 <USB_Device_ProcessControlRequest+0xce>
    126a:	e3 c0       	rjmp	.+454    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    126c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	09 f0       	breq	.+2      	; 0x1276 <USB_Device_ProcessControlRequest+0xc2>
    1274:	de c0       	rjmp	.+444    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1276:	93 30       	cpi	r25, 0x03	; 3
    1278:	09 f0       	breq	.+2      	; 0x127c <USB_Device_ProcessControlRequest+0xc8>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <USB_Device_RemoteWakeupEnabled>
    1280:	2b c0       	rjmp	.+86     	; 0x12d8 <USB_Device_ProcessControlRequest+0x124>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1282:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    1286:	81 11       	cpse	r24, r1
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <USB_Device_ProcessControlRequest+0x124>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    128a:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
    128e:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1290:	09 f4       	brne	.+2      	; 0x1294 <USB_Device_ProcessControlRequest+0xe0>
    1292:	cf c0       	rjmp	.+414    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1294:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1298:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    129c:	20 ff       	sbrs	r18, 0
    129e:	1c c0       	rjmp	.+56     	; 0x12d8 <USB_Device_ProcessControlRequest+0x124>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    12a0:	93 30       	cpi	r25, 0x03	; 3
    12a2:	21 f4       	brne	.+8      	; 0x12ac <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    12a4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12a8:	80 62       	ori	r24, 0x20	; 32
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <USB_Device_ProcessControlRequest+0x120>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    12ac:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12b0:	90 61       	ori	r25, 0x10	; 16
    12b2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	a9 01       	movw	r20, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <USB_Device_ProcessControlRequest+0x10e>
    12be:	44 0f       	add	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <USB_Device_ProcessControlRequest+0x10a>
    12c6:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    12ca:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    12ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    12d2:	88 60       	ori	r24, 0x08	; 8
    12d4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12e0:	87 7f       	andi	r24, 0xF7	; 247
    12e2:	82 c0       	rjmp	.+260    	; 0x13e8 <USB_Device_ProcessControlRequest+0x234>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12e4:	81 11       	cpse	r24, r1
    12e6:	a5 c0       	rjmp	.+330    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    12e8:	10 91 0d 05 	lds	r17, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    12ec:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    12ee:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    12f2:	80 78       	andi	r24, 0x80	; 128
    12f4:	81 2b       	or	r24, r17
    12f6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    12fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12fe:	87 7f       	andi	r24, 0xF7	; 247
    1300:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1304:	e2 dd       	rcall	.-1084   	; 0xeca <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1306:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    130a:	80 ff       	sbrs	r24, 0
    130c:	fc cf       	rjmp	.-8      	; 0x1306 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    130e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1318:	11 11       	cpse	r17, r1
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <USB_Device_ProcessControlRequest+0x16c>
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <USB_Device_ProcessControlRequest+0x16e>
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>
    1326:	85 c0       	rjmp	.+266    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1328:	80 58       	subi	r24, 0x80	; 128
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	08 f0       	brcs	.+2      	; 0x1330 <USB_Device_ProcessControlRequest+0x17c>
    132e:	81 c0       	rjmp	.+258    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1330:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    1334:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <USB_ControlRequest+0x3>
    1338:	8c 3d       	cpi	r24, 0xDC	; 220
    133a:	53 e0       	ldi	r21, 0x03	; 3
    133c:	95 07       	cpc	r25, r21
    133e:	71 f5       	brne	.+92     	; 0x139c <USB_Device_ProcessControlRequest+0x1e8>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1344:	8a e2       	ldi	r24, 0x2A	; 42
    1346:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1348:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    134a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    134c:	de 01       	movw	r26, r28
    134e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1350:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1352:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1354:	51 e2       	ldi	r21, 0x21	; 33
    1356:	e3 2f       	mov	r30, r19
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    135e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1360:	20 ff       	sbrs	r18, 0
    1362:	03 c0       	rjmp	.+6      	; 0x136a <USB_Device_ProcessControlRequest+0x1b6>
					{
						SerialByte >>= 4;
    1364:	e2 95       	swap	r30
    1366:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1368:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    136a:	ef 70       	andi	r30, 0x0F	; 15
    136c:	8e 2f       	mov	r24, r30
    136e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1370:	ea 30       	cpi	r30, 0x0A	; 10
    1372:	10 f0       	brcs	.+4      	; 0x1378 <USB_Device_ProcessControlRequest+0x1c4>
    1374:	c7 96       	adiw	r24, 0x37	; 55
    1376:	01 c0       	rjmp	.+2      	; 0x137a <USB_Device_ProcessControlRequest+0x1c6>
    1378:	c0 96       	adiw	r24, 0x30	; 48
    137a:	8d 93       	st	X+, r24
    137c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	24 31       	cpi	r18, 0x14	; 20
    1382:	49 f7       	brne	.-46     	; 0x1356 <USB_Device_ProcessControlRequest+0x1a2>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1384:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1390:	6a e2       	ldi	r22, 0x2A	; 42
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	60 dc       	rcall	.-1856   	; 0xc5a <Endpoint_Write_Control_Stream_LE>
    139a:	12 c0       	rjmp	.+36     	; 0x13c0 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    139c:	ae 01       	movw	r20, r28
    139e:	4f 5f       	subi	r20, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	60 91 0f 05 	lds	r22, 0x050F	; 0x80050f <USB_ControlRequest+0x4>
    13a6:	be d8       	rcall	.-3716   	; 0x524 <CALLBACK_USB_GetDescriptor>
    13a8:	bc 01       	movw	r22, r24
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <USB_Device_ProcessControlRequest+0x1fc>
    13ae:	41 c0       	rjmp	.+130    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
    13b0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13b4:	97 7f       	andi	r25, 0xF7	; 247
    13b6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	ee dc       	rcall	.-1572   	; 0xd9c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c4:	8b 77       	andi	r24, 0x7B	; 123
    13c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13ca:	33 c0       	rjmp	.+102    	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    13cc:	80 38       	cpi	r24, 0x80	; 128
    13ce:	89 f5       	brne	.+98     	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13d4:	87 7f       	andi	r24, 0xF7	; 247
    13d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    13da:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13de:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13e6:	8e 77       	andi	r24, 0x7E	; 126
    13e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    13ec:	6e dd       	rcall	.-1316   	; 0xeca <Endpoint_ClearStatusStage>
    13ee:	21 c0       	rjmp	.+66     	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    13f0:	81 11       	cpse	r24, r1
    13f2:	1f c0       	rjmp	.+62     	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    13f4:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    13f8:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <USB_ControlRequest+0x3>
    13fc:	99 27       	eor	r25, r25
    13fe:	02 97       	sbiw	r24, 0x02	; 2
    1400:	c4 f4       	brge	.+48     	; 0x1432 <USB_Device_ProcessControlRequest+0x27e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1402:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1406:	87 7f       	andi	r24, 0xF7	; 247
    1408:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    140c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <USB_ControlRequest+0x2>
    1410:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1414:	5a dd       	rcall	.-1356   	; 0xeca <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1416:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <USB_Device_ConfigurationNumber>
    141a:	81 11       	cpse	r24, r1
    141c:	06 c0       	rjmp	.+12     	; 0x142a <USB_Device_ProcessControlRequest+0x276>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    141e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1422:	87 fd       	sbrc	r24, 7
    1424:	02 c0       	rjmp	.+4      	; 0x142a <USB_Device_ProcessControlRequest+0x276>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	01 c0       	rjmp	.+2      	; 0x142c <USB_Device_ProcessControlRequest+0x278>
    142a:	84 e0       	ldi	r24, 0x04	; 4
    142c:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1430:	71 d8       	rcall	.-3870   	; 0x514 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1432:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1436:	83 ff       	sbrs	r24, 3
    1438:	0a c0       	rjmp	.+20     	; 0x144e <USB_Device_ProcessControlRequest+0x29a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    143a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1444:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1448:	80 62       	ori	r24, 0x20	; 32
    144a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    144e:	aa 96       	adiw	r28, 0x2a	; 42
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	08 95       	ret

00001462 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1462:	08 95       	ret

00001464 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1464:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1466:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <USB_DeviceState>
    146a:	88 23       	and	r24, r24
    146c:	99 f0       	breq	.+38     	; 0x1494 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    146e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1472:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1474:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1478:	89 2f       	mov	r24, r25
    147a:	81 70       	andi	r24, 0x01	; 1
    147c:	90 fd       	sbrc	r25, 0
    147e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1480:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1482:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    148a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    148c:	93 de       	rcall	.-730    	; 0x11b4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    148e:	cf 70       	andi	r28, 0x0F	; 15
    1490:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <__udivmodhi4>:
    1498:	aa 1b       	sub	r26, r26
    149a:	bb 1b       	sub	r27, r27
    149c:	51 e1       	ldi	r21, 0x11	; 17
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <__udivmodhi4_ep>

000014a0 <__udivmodhi4_loop>:
    14a0:	aa 1f       	adc	r26, r26
    14a2:	bb 1f       	adc	r27, r27
    14a4:	a6 17       	cp	r26, r22
    14a6:	b7 07       	cpc	r27, r23
    14a8:	10 f0       	brcs	.+4      	; 0x14ae <__udivmodhi4_ep>
    14aa:	a6 1b       	sub	r26, r22
    14ac:	b7 0b       	sbc	r27, r23

000014ae <__udivmodhi4_ep>:
    14ae:	88 1f       	adc	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	5a 95       	dec	r21
    14b4:	a9 f7       	brne	.-22     	; 0x14a0 <__udivmodhi4_loop>
    14b6:	80 95       	com	r24
    14b8:	90 95       	com	r25
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	08 95       	ret

000014c0 <_exit>:
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>
