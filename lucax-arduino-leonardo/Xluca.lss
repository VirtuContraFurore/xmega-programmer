
Xluca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000156a  000015fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000413  00800100  00800100  000015fe  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000015fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004d8  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006c22  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d27  00000000  00000000  00008709  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004118  00000000  00000000  0000a430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e04  00000000  00000000  0000e548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002598  00000000  00000000  0000f34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005295  00000000  00000000  000118e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000648  00000000  00000000  00016b79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	98 c0       	rjmp	.+304    	; 0x132 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_10>
      2c:	93 c0       	rjmp	.+294    	; 0x154 <__bad_interrupt>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4c 00 75 00     ..L.U.F.A. .L.u.
      bc:	63 00 61 00 20 00 58 00 20 00 70 00 72 00 6f 00     c.a. .X. .p.r.o.
      cc:	67 00 72 00 61 00 6d 00 6d 00 65 00 72 00 00 00     g.r.a.m.m.e.r...

000000dc <ManufacturerString>:
      dc:	1e 03 4c 00 75 00 63 00 61 00 20 00 43 00 65 00     ..L.u.c.a. .C.e.
      ec:	72 00 61 00 67 00 69 00 6f 00 6c 00 69 00 00 00     r.a.g.i.o.l.i...

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ConfigurationDescriptor>:
     100:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 ff ff     .. .....2.......
     110:	ff 00 07 05 82 02 40 00 05 07 05 01 02 40 00 05     ......@......@..

00000120 <DeviceDescriptor>:
     120:	12 01 10 01 00 00 00 40 eb 03 6c 20 01 00 01 02     .......@..l ....
     130:	00 01                                               ..

00000132 <__ctors_end>:
     132:	11 24       	eor	r1, r1
     134:	1f be       	out	0x3f, r1	; 63
     136:	cf ef       	ldi	r28, 0xFF	; 255
     138:	da e0       	ldi	r29, 0x0A	; 10
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	cd bf       	out	0x3d, r28	; 61

0000013e <__do_clear_bss>:
     13e:	25 e0       	ldi	r18, 0x05	; 5
     140:	a0 e0       	ldi	r26, 0x00	; 0
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a3 31       	cpi	r26, 0x13	; 19
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	03 d0       	rcall	.+6      	; 0x156 <main>
     150:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <main>:

int main(void)
{
//	SoftUsart_setup();
//	SoftUsart_print("Hay LUFA is here");
	USB_Init();
     156:	a2 d7       	rcall	.+3908   	; 0x109c <USB_Init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     158:	78 94       	sei
	GlobalInterruptEnable();

	for (;;)
	{
		USB_USBTask();
     15a:	0e 94 83 0a 	call	0x1506	; 0x1506 <USB_USBTask>
     15e:	fd cf       	rjmp	.-6      	; 0x15a <main+0x4>

00000160 <lucax_get_descriptor>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     160:	e8 ee       	ldi	r30, 0xE8	; 232
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	87 7f       	andi	r24, 0xF7	; 247
     168:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     170:	80 81       	ld	r24, Z
     172:	8e 77       	andi	r24, 0x7E	; 126
     174:	80 83       	st	Z, r24
void lucax_get_descriptor(void){
//	SoftUsart_print("* * Get Descriptor");
	Endpoint_ClearSETUP();
	Endpoint_Write_8(0x01); //bit 0: support PDI
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
     176:	01 c7       	rjmp	.+3586   	; 0xf7a <Endpoint_ClearStatusStage>

00000178 <lucax_release_interface>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     178:	e8 ee       	ldi	r30, 0xE8	; 232
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	80 81       	ld	r24, Z
     17e:	87 7f       	andi	r24, 0xF7	; 247
     180:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     182:	80 81       	ld	r24, Z
     184:	8e 77       	andi	r24, 0x7E	; 126
     186:	80 83       	st	Z, r24

void lucax_release_interface(void){
//	SoftUsart_print("* * Release Interface");
	Endpoint_ClearSETUP();
	Endpoint_ClearIN();
	pdi_exit();
     188:	9f d4       	rcall	.+2366   	; 0xac8 <pdi_exit>
	last_op = 0;
     18a:	10 92 01 05 	sts	0x0501, r1
     18e:	08 95       	ret

00000190 <lucax_pdi_nvm_read>:
//	SoftUsart_print("* * Chip erase");
	last_op = nvm_chip_erase();
	lucax_report_error();
}

void lucax_pdi_nvm_read(void){
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <lucax_pdi_nvm_read+0x12>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <lucax_pdi_nvm_read+0x14>
     1a4:	1f 92       	push	r1
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
//	SoftUsart_print("* * NVM read");
	unsigned int count = USB_ControlRequest.wIndex;
     1aa:	00 91 0f 05 	lds	r16, 0x050F
     1ae:	10 91 10 05 	lds	r17, 0x0510
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     1b2:	80 91 e8 00 	lds	r24, 0x00E8
     1b6:	87 7f       	andi	r24, 0xF7	; 247
     1b8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1bc:	80 91 e8 00 	lds	r24, 0x00E8
	unsigned long address = 0;

	Endpoint_ClearSETUP();

	while(Endpoint_IsOUTReceived() == false);
     1c0:	82 ff       	sbrs	r24, 2
     1c2:	fc cf       	rjmp	.-8      	; 0x1bc <lucax_pdi_nvm_read+0x2c>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     1c4:	60 91 f1 00 	lds	r22, 0x00F1
				Data.Bytes[1] = UEDATX;
     1c8:	70 91 f1 00 	lds	r23, 0x00F1
				Data.Bytes[2] = UEDATX;
     1cc:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     1d0:	90 91 f1 00 	lds	r25, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     1d4:	20 91 e8 00 	lds	r18, 0x00E8
     1d8:	2b 77       	andi	r18, 0x7B	; 123
     1da:	20 93 e8 00 	sts	0x00E8, r18
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	Endpoint_ClearStatusStage();
     1de:	6a 83       	std	Y+2, r22	; 0x02
     1e0:	7b 83       	std	Y+3, r23	; 0x03
     1e2:	8c 83       	std	Y+4, r24	; 0x04
     1e4:	9d 83       	std	Y+5, r25	; 0x05
     1e6:	c9 d6       	rcall	.+3474   	; 0xf7a <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     1e8:	22 e0       	ldi	r18, 0x02	; 2
     1ea:	20 93 e9 00 	sts	0x00E9, r18

	Endpoint_SelectEndpoint(VENDOR_IN_EPADDR);

	if(count == 1){
     1ee:	6a 81       	ldd	r22, Y+2	; 0x02
     1f0:	7b 81       	ldd	r23, Y+3	; 0x03
     1f2:	8c 81       	ldd	r24, Y+4	; 0x04
     1f4:	9d 81       	ldd	r25, Y+5	; 0x05
     1f6:	01 30       	cpi	r16, 0x01	; 1
     1f8:	11 05       	cpc	r17, r1
     1fa:	81 f4       	brne	.+32     	; 0x21c <lucax_pdi_nvm_read+0x8c>
		unsigned char data = 0;
     1fc:	19 82       	std	Y+1, r1	; 0x01
		last_op = nvm_read_byte(address, &data);
     1fe:	ae 01       	movw	r20, r28
     200:	4f 5f       	subi	r20, 0xFF	; 255
     202:	5f 4f       	sbci	r21, 0xFF	; 255
     204:	45 d2       	rcall	.+1162   	; 0x690 <nvm_read_byte>
     206:	80 93 01 05 	sts	0x0501, r24
		Endpoint_Write_8(data);
     20a:	89 81       	ldd	r24, Y+1	; 0x01
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     20c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     210:	80 91 e8 00 	lds	r24, 0x00E8
     214:	8e 77       	andi	r24, 0x7E	; 126
     216:	80 93 e8 00 	sts	0x00E8, r24
     21a:	32 c0       	rjmp	.+100    	; 0x280 <lucax_pdi_nvm_read+0xf0>
     21c:	01 30       	cpi	r16, 0x01	; 1
     21e:	24 e0       	ldi	r18, 0x04	; 4
     220:	12 07       	cpc	r17, r18
     222:	10 f0       	brcs	.+4      	; 0x228 <lucax_pdi_nvm_read+0x98>
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	14 e0       	ldi	r17, 0x04	; 4
		return;
	}


	if(count > MAX_BUFFER) count = MAX_BUFFER;
	last_op = nvm_read_bytes(address, buffer, count);
     228:	98 01       	movw	r18, r16
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	51 e0       	ldi	r21, 0x01	; 1
     22e:	4c d2       	rcall	.+1176   	; 0x6c8 <nvm_read_bytes>
     230:	80 93 01 05 	sts	0x0501, r24


	int done = 0;
     234:	c1 2c       	mov	r12, r1
     236:	d1 2c       	mov	r13, r1
	while(count > 0){
     238:	01 15       	cp	r16, r1
     23a:	11 05       	cpc	r17, r1
     23c:	09 f1       	breq	.+66     	; 0x280 <lucax_pdi_nvm_read+0xf0>

//		SoftUsart_print("Read - w");
		int packet = (count>VENDOR_IO_EPSIZE_IN) ? VENDOR_IO_EPSIZE_IN : count;
     23e:	78 01       	movw	r14, r16
     240:	01 34       	cpi	r16, 0x41	; 65
     242:	11 05       	cpc	r17, r1
     244:	18 f0       	brcs	.+6      	; 0x24c <lucax_pdi_nvm_read+0xbc>
     246:	80 e4       	ldi	r24, 0x40	; 64
     248:	e8 2e       	mov	r14, r24
     24a:	f1 2c       	mov	r15, r1

		int time_out=0;
		while(Endpoint_IsINReady()==false){
     24c:	81 e3       	ldi	r24, 0x31	; 49
     24e:	95 e7       	ldi	r25, 0x75	; 117
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     250:	20 91 e8 00 	lds	r18, 0x00E8
     254:	20 fd       	sbrc	r18, 0
     256:	03 c0       	rjmp	.+6      	; 0x25e <lucax_pdi_nvm_read+0xce>
     258:	01 97       	sbiw	r24, 0x01	; 1
			if(time_out++ == 30000)
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	c9 f7       	brne	.-14     	; 0x250 <lucax_pdi_nvm_read+0xc0>
				break;
		}
		Endpoint_Write_Stream_LE(buffer+done, packet, NULL);
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	b7 01       	movw	r22, r14
     264:	c6 01       	movw	r24, r12
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	9e 4f       	sbci	r25, 0xFE	; 254
     26a:	bd d4       	rcall	.+2426   	; 0xbe6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     26c:	80 91 e8 00 	lds	r24, 0x00E8
     270:	8e 77       	andi	r24, 0x7E	; 126
     272:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearIN();

		count -= packet;
     276:	0e 19       	sub	r16, r14
     278:	1f 09       	sbc	r17, r15
		done += packet;
     27a:	ce 0c       	add	r12, r14
     27c:	df 1c       	adc	r13, r15
     27e:	dc cf       	rjmp	.-72     	; 0x238 <lucax_pdi_nvm_read+0xa8>
//	SoftUsart_print_hex(done);
//	SoftUsart_send_str(" bytes at 0x");
//	SoftUsart_print_hex(address >> 16);
//	SoftUsart_print_hex(address & 0xFFFF);
//	SoftUsart_print(" absolute");
}
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	08 95       	ret

0000029c <lucax_pdi_nvm_write_page>:


void lucax_pdi_nvm_write_page(void){
     29c:	9f 92       	push	r9
     29e:	af 92       	push	r10
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
//	SoftUsart_print("* * NVM write page");
	unsigned int count = USB_ControlRequest.wIndex;
     2b2:	e0 90 0f 05 	lds	r14, 0x050F
     2b6:	f0 90 10 05 	lds	r15, 0x0510
	unsigned char memory_type = USB_ControlRequest.wValue;
     2ba:	00 91 0d 05 	lds	r16, 0x050D
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     2be:	80 91 e8 00 	lds	r24, 0x00E8
     2c2:	87 7f       	andi	r24, 0xF7	; 247
     2c4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2c8:	80 91 e8 00 	lds	r24, 0x00E8
	unsigned long address = 0;

	Endpoint_ClearSETUP();

	while(Endpoint_IsOUTReceived() == false);
     2cc:	82 ff       	sbrs	r24, 2
     2ce:	fc cf       	rjmp	.-8      	; 0x2c8 <lucax_pdi_nvm_write_page+0x2c>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     2d0:	90 90 f1 00 	lds	r9, 0x00F1
				Data.Bytes[1] = UEDATX;
     2d4:	a0 90 f1 00 	lds	r10, 0x00F1
				Data.Bytes[2] = UEDATX;
     2d8:	b0 90 f1 00 	lds	r11, 0x00F1
				Data.Bytes[3] = UEDATX;
     2dc:	10 91 f1 00 	lds	r17, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     2e0:	20 91 e8 00 	lds	r18, 0x00E8
     2e4:	2b 77       	andi	r18, 0x7B	; 123
     2e6:	20 93 e8 00 	sts	0x00E8, r18
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	Endpoint_ClearStatusStage();
     2ea:	47 d6       	rcall	.+3214   	; 0xf7a <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 e9 00 	sts	0x00E9, r24
     2f2:	e7 01       	movw	r28, r14
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	e8 16       	cp	r14, r24
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	f8 06       	cpc	r15, r24
     2fc:	10 f0       	brcs	.+4      	; 0x302 <lucax_pdi_nvm_write_page+0x66>
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d4 e0       	ldi	r29, 0x04	; 4
     302:	e1 2c       	mov	r14, r1
     304:	f1 2c       	mov	r15, r1
	Endpoint_SelectEndpoint(VENDOR_OUT_EPADDR);

	if(count > MAX_BUFFER) count = MAX_BUFFER;

	int done = 0;
	while(count > 0){
     306:	20 97       	sbiw	r28, 0x00	; 0
     308:	21 f1       	breq	.+72     	; 0x352 <lucax_pdi_nvm_write_page+0xb6>

//		SoftUsart_print("Write - r");
		int packet = (count>VENDOR_IO_EPSIZE_OUT) ? VENDOR_IO_EPSIZE_OUT : count;
     30a:	6e 01       	movw	r12, r28
     30c:	c1 34       	cpi	r28, 0x41	; 65
     30e:	d1 05       	cpc	r29, r1
     310:	18 f0       	brcs	.+6      	; 0x318 <lucax_pdi_nvm_write_page+0x7c>
     312:	90 e4       	ldi	r25, 0x40	; 64
     314:	c9 2e       	mov	r12, r25
     316:	d1 2c       	mov	r13, r1

		unsigned int time_out = 0;
		while(Endpoint_IsOUTReceived()==false){
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     31c:	80 91 e8 00 	lds	r24, 0x00E8
     320:	82 fd       	sbrc	r24, 2
     322:	06 c0       	rjmp	.+12     	; 0x330 <lucax_pdi_nvm_write_page+0x94>
     324:	21 50       	subi	r18, 0x01	; 1
     326:	31 09       	sbc	r19, r1
			if(time_out++ == 0xFFFF){
     328:	21 15       	cp	r18, r1
     32a:	31 05       	cpc	r19, r1
     32c:	b9 f7       	brne	.-18     	; 0x31c <lucax_pdi_nvm_write_page+0x80>
     32e:	1b c0       	rjmp	.+54     	; 0x366 <lucax_pdi_nvm_write_page+0xca>
//				SoftUsart_print("Waiting for out timed out - r");
				return;
			}
		}
		Endpoint_Read_Stream_LE(buffer+done, packet, NULL);
     330:	40 e0       	ldi	r20, 0x00	; 0
     332:	50 e0       	ldi	r21, 0x00	; 0
     334:	b6 01       	movw	r22, r12
     336:	c7 01       	movw	r24, r14
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	9e 4f       	sbci	r25, 0xFE	; 254
     33c:	9c d4       	rcall	.+2360   	; 0xc76 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     33e:	20 91 e8 00 	lds	r18, 0x00E8
     342:	2b 77       	andi	r18, 0x7B	; 123
     344:	20 93 e8 00 	sts	0x00E8, r18
		Endpoint_ClearOUT();

		count -= packet;
     348:	cc 19       	sub	r28, r12
     34a:	dd 09       	sbc	r29, r13
		done += packet;
     34c:	ec 0c       	add	r14, r12
     34e:	fd 1c       	adc	r15, r13
     350:	da cf       	rjmp	.-76     	; 0x306 <lucax_pdi_nvm_write_page+0x6a>
	}

	last_op = nvm_paged_write(address, buffer, done, memory_type);
     352:	97 01       	movw	r18, r14
     354:	41 e0       	ldi	r20, 0x01	; 1
     356:	51 e0       	ldi	r21, 0x01	; 1
     358:	69 2d       	mov	r22, r9
     35a:	7a 2d       	mov	r23, r10
     35c:	8b 2d       	mov	r24, r11
     35e:	91 2f       	mov	r25, r17
     360:	fa d1       	rcall	.+1012   	; 0x756 <nvm_paged_write>
     362:	80 93 01 05 	sts	0x0501, r24
//	SoftUsart_print_hex(done);
//	SoftUsart_send_str(" bytes at 0x");
//	SoftUsart_print_hex(address >> 16);
//	SoftUsart_print_hex(address & 0xFFFF);
//	SoftUsart_print(" absolute");
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	af 90       	pop	r10
     37a:	9f 90       	pop	r9
     37c:	08 95       	ret

0000037e <lucax_pdi_nvm_write_byte>:

void lucax_pdi_nvm_write_byte(void){
//	SoftUsart_print("* * NVM write byte");
	unsigned char data = USB_ControlRequest.wIndex;
     37e:	40 91 0f 05 	lds	r20, 0x050F
	unsigned char memory_type = USB_ControlRequest.wValue;
     382:	20 91 0d 05 	lds	r18, 0x050D
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     386:	80 91 e8 00 	lds	r24, 0x00E8
     38a:	87 7f       	andi	r24, 0xF7	; 247
     38c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     390:	80 91 e8 00 	lds	r24, 0x00E8
	unsigned long address = 0;

	Endpoint_ClearSETUP();
	while(Endpoint_IsOUTReceived() == false);
     394:	82 ff       	sbrs	r24, 2
     396:	fc cf       	rjmp	.-8      	; 0x390 <lucax_pdi_nvm_write_byte+0x12>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     398:	60 91 f1 00 	lds	r22, 0x00F1
				Data.Bytes[1] = UEDATX;
     39c:	70 91 f1 00 	lds	r23, 0x00F1
				Data.Bytes[2] = UEDATX;
     3a0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
     3a4:	90 91 f1 00 	lds	r25, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     3a8:	30 91 e8 00 	lds	r19, 0x00E8
     3ac:	3b 77       	andi	r19, 0x7B	; 123
     3ae:	30 93 e8 00 	sts	0x00E8, r19
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3b2:	30 91 e8 00 	lds	r19, 0x00E8
	address = Endpoint_Read_32_LE();
	Endpoint_ClearOUT();

	while(Endpoint_IsINReady() == false);
     3b6:	30 ff       	sbrs	r19, 0
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <lucax_pdi_nvm_write_byte+0x34>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3ba:	30 91 e8 00 	lds	r19, 0x00E8
     3be:	3e 77       	andi	r19, 0x7E	; 126
     3c0:	30 93 e8 00 	sts	0x00E8, r19
	Endpoint_ClearIN();

	last_op = nvm_write_byte(address, data, memory_type);
     3c4:	a4 d1       	rcall	.+840    	; 0x70e <nvm_write_byte>
     3c6:	80 93 01 05 	sts	0x0501, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 e9 00 	sts	0x00E9, r24
     3d0:	08 95       	ret

000003d2 <lucax_report_error>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3d2:	e8 ee       	ldi	r30, 0xE8	; 232
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	80 83       	st	Z, r24
}

void lucax_report_error(void){
//	SoftUsart_print("* * Report error");
	Endpoint_ClearSETUP();
	Endpoint_Write_8(last_op); //send result
     3dc:	80 91 01 05 	lds	r24, 0x0501
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3e0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3e4:	80 81       	ld	r24, Z
     3e6:	8e 77       	andi	r24, 0x7E	; 126
     3e8:	80 83       	st	Z, r24
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
     3ea:	c7 c5       	rjmp	.+2958   	; 0xf7a <Endpoint_ClearStatusStage>

000003ec <lucax_pdi_init>:
	last_op = 0;
}

void lucax_pdi_init(void){
//	SoftUsart_print("* * Pdi init");
	last_op = pdi_init(USB_ControlRequest.wValue);
     3ec:	80 91 0d 05 	lds	r24, 0x050D
     3f0:	90 91 0e 05 	lds	r25, 0x050E
     3f4:	9a d3       	rcall	.+1844   	; 0xb2a <pdi_init>
     3f6:	80 93 01 05 	sts	0x0501, r24
	lucax_report_error();
     3fa:	eb cf       	rjmp	.-42     	; 0x3d2 <lucax_report_error>

000003fc <lucax_pdi_chip_erase>:
}

void lucax_pdi_chip_erase(void){
//	SoftUsart_print("* * Chip erase");
	last_op = nvm_chip_erase();
     3fc:	45 d1       	rcall	.+650    	; 0x688 <nvm_chip_erase>
     3fe:	80 93 01 05 	sts	0x0501, r24
	lucax_report_error();
     402:	e7 cf       	rjmp	.-50     	; 0x3d2 <lucax_report_error>

00000404 <lucax_pdi_raw_read>:
	Endpoint_ClearIN();
	Endpoint_ClearStatusStage();
}


void lucax_pdi_raw_read(void){
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
//	SoftUsart_print("* * Raw read");
	long address = USB_ControlRequest.wIndex;
     40c:	60 91 0f 05 	lds	r22, 0x050F
     410:	70 91 10 05 	lds	r23, 0x0510
     414:	cb 01       	movw	r24, r22
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b0 e0       	ldi	r27, 0x00	; 0
	address<<=16;
     41a:	77 27       	eor	r23, r23
     41c:	66 27       	eor	r22, r22
	address |= USB_ControlRequest.wValue;
     41e:	00 91 0d 05 	lds	r16, 0x050D
     422:	10 91 0e 05 	lds	r17, 0x050E
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	60 2b       	or	r22, r16
     42c:	71 2b       	or	r23, r17
     42e:	82 2b       	or	r24, r18
     430:	93 2b       	or	r25, r19
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     432:	e8 ee       	ldi	r30, 0xE8	; 232
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	20 81       	ld	r18, Z
     438:	27 7f       	andi	r18, 0xF7	; 247
     43a:	20 83       	st	Z, r18
	Endpoint_ClearSETUP();
	last_op = pdi_read_bytes(address, buffer, USB_ControlRequest.wLength);
     43c:	c1 e1       	ldi	r28, 0x11	; 17
     43e:	d5 e0       	ldi	r29, 0x05	; 5
     440:	28 81       	ld	r18, Y
     442:	39 81       	ldd	r19, Y+1	; 0x01
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	51 e0       	ldi	r21, 0x01	; 1
     448:	83 d2       	rcall	.+1286   	; 0x950 <pdi_read_bytes>
     44a:	80 93 01 05 	sts	0x0501, r24

	Endpoint_Write_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     44e:	68 81       	ld	r22, Y
     450:	79 81       	ldd	r23, Y+1	; 0x01
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	57 d4       	rcall	.+2222   	; 0xd06 <Endpoint_Write_Control_Stream_LE>

	Endpoint_ClearStatusStage();

}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
	Endpoint_ClearSETUP();
	last_op = pdi_read_bytes(address, buffer, USB_ControlRequest.wLength);

	Endpoint_Write_Control_Stream_LE(buffer, USB_ControlRequest.wLength);

	Endpoint_ClearStatusStage();
     460:	8c c5       	rjmp	.+2840   	; 0xf7a <Endpoint_ClearStatusStage>

00000462 <lucax_pdi_raw_write>:

}

void lucax_pdi_raw_write(void){
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
//	SoftUsart_print("* * Raw read");
	long address = USB_ControlRequest.wIndex;
     46e:	c0 90 0f 05 	lds	r12, 0x050F
     472:	d0 90 10 05 	lds	r13, 0x0510
     476:	e1 2c       	mov	r14, r1
     478:	f1 2c       	mov	r15, r1
	address<<=16;
     47a:	76 01       	movw	r14, r12
     47c:	dd 24       	eor	r13, r13
     47e:	cc 24       	eor	r12, r12
	address |= USB_ControlRequest.wValue;
     480:	80 91 0d 05 	lds	r24, 0x050D
     484:	90 91 0e 05 	lds	r25, 0x050E
     488:	a0 e0       	ldi	r26, 0x00	; 0
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	c8 2a       	or	r12, r24
     48e:	d9 2a       	or	r13, r25
     490:	ea 2a       	or	r14, r26
     492:	fb 2a       	or	r15, r27
     494:	e8 ee       	ldi	r30, 0xE8	; 232
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	87 7f       	andi	r24, 0xF7	; 247
     49c:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Read_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     49e:	c1 e1       	ldi	r28, 0x11	; 17
     4a0:	d5 e0       	ldi	r29, 0x05	; 5
     4a2:	68 81       	ld	r22, Y
     4a4:	79 81       	ldd	r23, Y+1	; 0x01
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	8f d4       	rcall	.+2334   	; 0xdca <Endpoint_Read_Control_Stream_LE>

	Endpoint_ClearStatusStage();
     4ac:	66 d5       	rcall	.+2764   	; 0xf7a <Endpoint_ClearStatusStage>

	last_op = pdi_write_bytes(address, buffer, USB_ControlRequest.wLength);
     4ae:	28 81       	ld	r18, Y
     4b0:	39 81       	ldd	r19, Y+1	; 0x01
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	51 e0       	ldi	r21, 0x01	; 1
     4b6:	c7 01       	movw	r24, r14
     4b8:	b6 01       	movw	r22, r12
     4ba:	a7 d2       	rcall	.+1358   	; 0xa0a <pdi_write_bytes>
     4bc:	80 93 01 05 	sts	0x0501, r24
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret

000004ce <EVENT_USB_Device_ControlRequest>:
{
//	SoftUsart_send_str("Control request 0x");
//	SoftUsart_print_hex(USB_ControlRequest.bRequest);
//	SoftUsart_send_str("\n\r");

	switch(USB_ControlRequest.bRequest){
     4ce:	80 91 0c 05 	lds	r24, 0x050C
     4d2:	86 32       	cpi	r24, 0x26	; 38
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <EVENT_USB_Device_ControlRequest+0xa>
     4d6:	3d c0       	rjmp	.+122    	; 0x552 <EVENT_USB_Device_ControlRequest+0x84>
     4d8:	58 f4       	brcc	.+22     	; 0x4f0 <EVENT_USB_Device_ControlRequest+0x22>
     4da:	82 32       	cpi	r24, 0x22	; 34
     4dc:	09 f1       	breq	.+66     	; 0x520 <EVENT_USB_Device_ControlRequest+0x52>
     4de:	18 f4       	brcc	.+6      	; 0x4e6 <EVENT_USB_Device_ControlRequest+0x18>
     4e0:	81 32       	cpi	r24, 0x21	; 33
     4e2:	a1 f0       	breq	.+40     	; 0x50c <EVENT_USB_Device_ControlRequest+0x3e>
     4e4:	08 95       	ret
     4e6:	83 32       	cpi	r24, 0x23	; 35
     4e8:	01 f1       	breq	.+64     	; 0x52a <EVENT_USB_Device_ControlRequest+0x5c>
     4ea:	84 32       	cpi	r24, 0x24	; 36
     4ec:	41 f1       	breq	.+80     	; 0x53e <EVENT_USB_Device_ControlRequest+0x70>
     4ee:	08 95       	ret
     4f0:	89 32       	cpi	r24, 0x29	; 41
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <EVENT_USB_Device_ControlRequest+0x28>
     4f4:	38 c0       	rjmp	.+112    	; 0x566 <EVENT_USB_Device_ControlRequest+0x98>
     4f6:	28 f4       	brcc	.+10     	; 0x502 <EVENT_USB_Device_ControlRequest+0x34>
     4f8:	87 32       	cpi	r24, 0x27	; 39
     4fa:	31 f1       	breq	.+76     	; 0x548 <EVENT_USB_Device_ControlRequest+0x7a>
     4fc:	88 32       	cpi	r24, 0x28	; 40
     4fe:	71 f1       	breq	.+92     	; 0x55c <EVENT_USB_Device_ControlRequest+0x8e>
     500:	08 95       	ret
     502:	8a 32       	cpi	r24, 0x2A	; 42
     504:	41 f0       	breq	.+16     	; 0x516 <EVENT_USB_Device_ControlRequest+0x48>
     506:	8b 32       	cpi	r24, 0x2B	; 43
     508:	a9 f0       	breq	.+42     	; 0x534 <EVENT_USB_Device_ControlRequest+0x66>
     50a:	08 95       	ret

	case LUCAX_GET_DESCRIPTOR:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     50c:	80 91 0b 05 	lds	r24, 0x050B
     510:	87 ff       	sbrs	r24, 7
     512:	2d c0       	rjmp	.+90     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_get_descriptor();
     514:	25 ce       	rjmp	.-950    	; 0x160 <lucax_get_descriptor>
		break;
	case LUCAX_REPORT_ERROR:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     516:	80 91 0b 05 	lds	r24, 0x050B
     51a:	87 ff       	sbrs	r24, 7
     51c:	28 c0       	rjmp	.+80     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_report_error();
     51e:	59 cf       	rjmp	.-334    	; 0x3d2 <lucax_report_error>
		break;
	case LUCAX_RELEASE_INTERFACE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     520:	80 91 0b 05 	lds	r24, 0x050B
     524:	87 fd       	sbrc	r24, 7
     526:	23 c0       	rjmp	.+70     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_release_interface();
     528:	27 ce       	rjmp	.-946    	; 0x178 <lucax_release_interface>
		break;

	case LUCAX_PDI_INIT:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     52a:	80 91 0b 05 	lds	r24, 0x050B
     52e:	87 ff       	sbrs	r24, 7
     530:	1e c0       	rjmp	.+60     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_init();
     532:	5c cf       	rjmp	.-328    	; 0x3ec <lucax_pdi_init>
		break;
	case LUCAX_PDI_CHIP_ERASE:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     534:	80 91 0b 05 	lds	r24, 0x050B
     538:	87 ff       	sbrs	r24, 7
     53a:	19 c0       	rjmp	.+50     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_chip_erase();
     53c:	5f cf       	rjmp	.-322    	; 0x3fc <lucax_pdi_chip_erase>
		break;
	case LUCAX_PDI_NVM_READ:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     53e:	80 91 0b 05 	lds	r24, 0x050B
     542:	87 fd       	sbrc	r24, 7
     544:	14 c0       	rjmp	.+40     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_nvm_read();
     546:	24 ce       	rjmp	.-952    	; 0x190 <lucax_pdi_nvm_read>
		break;
	case LUCAX_PDI_NVM_WRITE_PAGE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     548:	80 91 0b 05 	lds	r24, 0x050B
     54c:	87 fd       	sbrc	r24, 7
     54e:	0f c0       	rjmp	.+30     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_nvm_write_page();
     550:	a5 ce       	rjmp	.-694    	; 0x29c <lucax_pdi_nvm_write_page>
		break;
	case LUCAX_PDI_NVM_WRITE_BYTE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     552:	80 91 0b 05 	lds	r24, 0x050B
     556:	87 fd       	sbrc	r24, 7
     558:	0a c0       	rjmp	.+20     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_nvm_write_byte();
     55a:	11 cf       	rjmp	.-478    	; 0x37e <lucax_pdi_nvm_write_byte>
		break;
	case LUCAX_PDI_RAW_READ:
		if(USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     55c:	80 91 0b 05 	lds	r24, 0x050B
     560:	87 ff       	sbrs	r24, 7
     562:	05 c0       	rjmp	.+10     	; 0x56e <EVENT_USB_Device_ControlRequest+0xa0>
			lucax_pdi_raw_read();
     564:	4f cf       	rjmp	.-354    	; 0x404 <lucax_pdi_raw_read>
		break;
	case LUCAX_PDI_RAW_WRITE:
		if((USB_ControlRequest.bmRequestType & (1<<7)) == 0)
     566:	80 91 0b 05 	lds	r24, 0x050B
     56a:	87 ff       	sbrs	r24, 7
			lucax_pdi_raw_write();
     56c:	7a cf       	rjmp	.-268    	; 0x462 <lucax_pdi_raw_write>
     56e:	08 95       	ret

00000570 <EVENT_USB_Device_Connect>:
	last_op = pdi_write_bytes(address, buffer, USB_ControlRequest.wLength);
}

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
     570:	08 95       	ret

00000572 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
     572:	08 95       	ret

00000574 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     574:	42 e3       	ldi	r20, 0x32	; 50
     576:	61 e8       	ldi	r22, 0x81	; 129
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	ca d4       	rcall	.+2452   	; 0xf10 <Endpoint_ConfigureEndpoint_Prv>
     57c:	42 e3       	ldi	r20, 0x32	; 50
     57e:	60 e8       	ldi	r22, 0x80	; 128
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	c6 c4       	rjmp	.+2444   	; 0xf10 <Endpoint_ConfigureEndpoint_Prv>

00000584 <CALLBACK_USB_GetDescriptor>:

uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void ** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     584:	29 2f       	mov	r18, r25
     586:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     588:	22 30       	cpi	r18, 0x02	; 2
     58a:	31 05       	cpc	r19, r1
     58c:	59 f0       	breq	.+22     	; 0x5a4 <CALLBACK_USB_GetDescriptor+0x20>
     58e:	23 30       	cpi	r18, 0x03	; 3
     590:	31 05       	cpc	r19, r1
     592:	69 f0       	breq	.+26     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x2a>
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	f9 f4       	brne	.+62     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x54>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     59a:	82 e1       	ldi	r24, 0x12	; 18
     59c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     59e:	20 e2       	ldi	r18, 0x20	; 32
     5a0:	31 e0       	ldi	r19, 0x01	; 1
     5a2:	1e c0       	rjmp	.+60     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     5a4:	80 e2       	ldi	r24, 0x20	; 32
     5a6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     5ac:	19 c0       	rjmp	.+50     	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
     5ae:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	91 05       	cpc	r25, r1
     5b4:	41 f0       	breq	.+16     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x42>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	91 05       	cpc	r25, r1
     5ba:	41 f0       	breq	.+16     	; 0x5cc <CALLBACK_USB_GetDescriptor+0x48>
     5bc:	89 2b       	or	r24, r25
     5be:	61 f4       	brne	.+24     	; 0x5d8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5c0:	ec ef       	ldi	r30, 0xFC	; 252
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     5c6:	ec ed       	ldi	r30, 0xDC	; 220
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x4c>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     5cc:	ec ea       	ldi	r30, 0xAC	; 172
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	84 91       	lpm	r24, Z
     5d2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     5d4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <CALLBACK_USB_GetDescriptor+0x5c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
                                    const void ** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     5e0:	fa 01       	movw	r30, r20
     5e2:	31 83       	std	Z+1, r19	; 0x01
     5e4:	20 83       	st	Z, r18
	return Size;
}
     5e6:	08 95       	ret

000005e8 <nvm_pointer>:
#include "driver/pdi_physical.h"
#include "driver/pdi_const.h"

#include <util/delay.h>

void nvm_pointer(unsigned long c){
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <nvm_pointer+0x6>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <nvm_pointer+0x8>
     5f0:	1f 92       	push	r1
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[5];
	data[0] = PDI_STORE_INDIRECT | (PTR<<2) | LONG;
     5f6:	2b e6       	ldi	r18, 0x6B	; 107
     5f8:	29 83       	std	Y+1, r18	; 0x01
	data[1] = c;
     5fa:	6a 83       	std	Y+2, r22	; 0x02
	data[2] = c>>8;
     5fc:	7b 83       	std	Y+3, r23	; 0x03
	data[3] = c>>16;
     5fe:	8c 83       	std	Y+4, r24	; 0x04
	data[4] = c>>24;
     600:	9d 83       	std	Y+5, r25	; 0x05
	pdi_write_raw(data, 5);
     602:	65 e0       	ldi	r22, 0x05	; 5
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	ec d1       	rcall	.+984    	; 0x9e4 <pdi_write_raw>
}
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <nvm_cmd>:

void  nvm_cmd(unsigned char c){
	pdi_write_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_CMD, c);
     61c:	48 2f       	mov	r20, r24
     61e:	6a ec       	ldi	r22, 0xCA	; 202
     620:	71 e0       	ldi	r23, 0x01	; 1
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	70 c1       	rjmp	.+736    	; 0x908 <pdi_write_byte>

00000628 <trig_cmdex>:
}


void  trig_cmdex(void){
	pdi_write_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_CTRLA, 0x01);
     628:	41 e0       	ldi	r20, 0x01	; 1
     62a:	6b ec       	ldi	r22, 0xCB	; 203
     62c:	71 e0       	ldi	r23, 0x01	; 1
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	6a c1       	rjmp	.+724    	; 0x908 <pdi_write_byte>

00000634 <wait_nvm>:
}

PdiResult wait_nvm(void){
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	1f 92       	push	r1
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
	unsigned char wait = 0xff;
	while(wait--){
     640:	1e ef       	ldi	r17, 0xFE	; 254
     642:	1f 3f       	cpi	r17, 0xFF	; 255
     644:	c9 f0       	breq	.+50     	; 0x678 <wait_nvm+0x44>
		unsigned char status;
		unsigned char ret = pdi_read_byte(PDI_MEMORY_BASE + NVM_BASE + NVM_STATUS, &status);
     646:	ae 01       	movw	r20, r28
     648:	4f 5f       	subi	r20, 0xFF	; 255
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	6f ec       	ldi	r22, 0xCF	; 207
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	2f d1       	rcall	.+606    	; 0x8b4 <pdi_read_byte>
		if(ret != NO_ERROR)
     656:	81 11       	cpse	r24, r1
     658:	12 c0       	rjmp	.+36     	; 0x67e <wait_nvm+0x4a>
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	81 0f       	add	r24, r17
			return ret;
		if((status & (1<<7)) == 0) //Poll NVMBUSY flag
     65e:	99 81       	ldd	r25, Y+1	; 0x01
     660:	97 ff       	sbrs	r25, 7
     662:	08 c0       	rjmp	.+16     	; 0x674 <wait_nvm+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     664:	ef e9       	ldi	r30, 0x9F	; 159
     666:	ff e0       	ldi	r31, 0x0F	; 15
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <wait_nvm+0x34>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <wait_nvm+0x3a>
     66e:	00 00       	nop
     670:	18 2f       	mov	r17, r24
     672:	e7 cf       	rjmp	.-50     	; 0x642 <wait_nvm+0xe>
			break;
		_delay_ms(1);
	}
	if(wait == 0)
     674:	11 23       	and	r17, r17
     676:	11 f0       	breq	.+4      	; 0x67c <wait_nvm+0x48>
		return TIME_OUT;
	return NO_ERROR;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	01 c0       	rjmp	.+2      	; 0x67e <wait_nvm+0x4a>
		if((status & (1<<7)) == 0) //Poll NVMBUSY flag
			break;
		_delay_ms(1);
	}
	if(wait == 0)
		return TIME_OUT;
     67c:	82 e0       	ldi	r24, 0x02	; 2
	return NO_ERROR;
}
     67e:	0f 90       	pop	r0
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	08 95       	ret

00000688 <nvm_chip_erase>:

PdiResult nvm_chip_erase(){
	nvm_cmd(CHIP_ERASE);
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	c8 df       	rcall	.-112    	; 0x61c <nvm_cmd>
	trig_cmdex();
     68c:	cd df       	rcall	.-102    	; 0x628 <trig_cmdex>
	return wait_nvm();
     68e:	d2 cf       	rjmp	.-92     	; 0x634 <wait_nvm>

00000690 <nvm_read_byte>:
}

PdiResult nvm_read_byte(unsigned long address, unsigned char * data){
     690:	cf 92       	push	r12
     692:	df 92       	push	r13
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <nvm_read_byte+0xe>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
	nvm_cmd(READ_NVM); //read nvm
     6a6:	83 e4       	ldi	r24, 0x43	; 67
     6a8:	49 83       	std	Y+1, r20	; 0x01
     6aa:	5a 83       	std	Y+2, r21	; 0x02
     6ac:	b7 df       	rcall	.-146    	; 0x61c <nvm_cmd>
	return pdi_read_byte(address, data);
     6ae:	49 81       	ldd	r20, Y+1	; 0x01
     6b0:	5a 81       	ldd	r21, Y+2	; 0x02
     6b2:	c7 01       	movw	r24, r14
     6b4:	b6 01       	movw	r22, r12
}
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
	return wait_nvm();
}

PdiResult nvm_read_byte(unsigned long address, unsigned char * data){
	nvm_cmd(READ_NVM); //read nvm
	return pdi_read_byte(address, data);
     6c6:	f6 c0       	rjmp	.+492    	; 0x8b4 <pdi_read_byte>

000006c8 <nvm_read_bytes>:
}


PdiResult nvm_read_bytes(unsigned long address, unsigned char * data, unsigned int count){
     6c8:	cf 92       	push	r12
     6ca:	df 92       	push	r13
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <nvm_read_bytes+0xe>
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <nvm_read_bytes+0x10>
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
	nvm_cmd(READ_NVM); //read nvm
     6e0:	83 e4       	ldi	r24, 0x43	; 67
     6e2:	2b 83       	std	Y+3, r18	; 0x03
     6e4:	3c 83       	std	Y+4, r19	; 0x04
     6e6:	49 83       	std	Y+1, r20	; 0x01
     6e8:	5a 83       	std	Y+2, r21	; 0x02
     6ea:	98 df       	rcall	.-208    	; 0x61c <nvm_cmd>
	return pdi_read_bytes(address, data, count);
     6ec:	2b 81       	ldd	r18, Y+3	; 0x03
     6ee:	3c 81       	ldd	r19, Y+4	; 0x04
     6f0:	49 81       	ldd	r20, Y+1	; 0x01
     6f2:	5a 81       	ldd	r21, Y+2	; 0x02
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
}
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
}


PdiResult nvm_read_bytes(unsigned long address, unsigned char * data, unsigned int count){
	nvm_cmd(READ_NVM); //read nvm
	return pdi_read_bytes(address, data, count);
     70c:	21 c1       	rjmp	.+578    	; 0x950 <pdi_read_bytes>

0000070e <nvm_write_byte>:
}


PdiResult nvm_write_byte(unsigned long address, unsigned char data, ByteMemory mem){
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <nvm_write_byte+0xe>
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	6b 01       	movw	r12, r22
     722:	7c 01       	movw	r14, r24
	nvm_cmd((mem == LOCK) ? WRITE_LOCK : WRITE_FUSE);
     724:	21 30       	cpi	r18, 0x01	; 1
     726:	11 f4       	brne	.+4      	; 0x72c <nvm_write_byte+0x1e>
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	01 c0       	rjmp	.+2      	; 0x72e <nvm_write_byte+0x20>
     72c:	8c e4       	ldi	r24, 0x4C	; 76
     72e:	2a 83       	std	Y+2, r18	; 0x02
     730:	49 83       	std	Y+1, r20	; 0x01
     732:	74 df       	rcall	.-280    	; 0x61c <nvm_cmd>
	pdi_write_byte(address, data);
     734:	49 81       	ldd	r20, Y+1	; 0x01
     736:	c7 01       	movw	r24, r14
     738:	b6 01       	movw	r22, r12
     73a:	e6 d0       	rcall	.+460    	; 0x908 <pdi_write_byte>

	if(mem == LOCK)
     73c:	2a 81       	ldd	r18, Y+2	; 0x02
     73e:	21 30       	cpi	r18, 0x01	; 1
     740:	09 f4       	brne	.+2      	; 0x744 <nvm_write_byte+0x36>
		trig_cmdex();
     742:	72 df       	rcall	.-284    	; 0x628 <trig_cmdex>

	return wait_nvm();
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
	pdi_write_byte(address, data);

	if(mem == LOCK)
		trig_cmdex();

	return wait_nvm();
     754:	6f cf       	rjmp	.-290    	; 0x634 <wait_nvm>

00000756 <nvm_paged_write>:
}

PdiResult nvm_paged_write(unsigned long address, unsigned char * data, unsigned int count, PagedMemory mem){
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	00 d0       	rcall	.+0      	; 0x76e <nvm_paged_write+0x18>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	6b 01       	movw	r12, r22
     774:	7c 01       	movw	r14, r24
     776:	4a 01       	movw	r8, r20
     778:	59 01       	movw	r10, r18
	//erase page buffer
	nvm_pointer(address);
     77a:	36 df       	rcall	.-404    	; 0x5e8 <nvm_pointer>
	nvm_cmd((mem == FLASH) ? ERASE_FLASH_PAGE_BUFFER : ERASE_EEPROM_PAGE_BUFFER);
     77c:	01 11       	cpse	r16, r1
     77e:	02 c0       	rjmp	.+4      	; 0x784 <nvm_paged_write+0x2e>
     780:	86 e2       	ldi	r24, 0x26	; 38
     782:	01 c0       	rjmp	.+2      	; 0x786 <nvm_paged_write+0x30>
     784:	86 e3       	ldi	r24, 0x36	; 54
     786:	4a df       	rcall	.-364    	; 0x61c <nvm_cmd>
	trig_cmdex();
     788:	4f df       	rcall	.-354    	; 0x628 <trig_cmdex>
	wait_nvm();
     78a:	54 df       	rcall	.-344    	; 0x634 <wait_nvm>

	//load page buffer
	nvm_cmd((mem == FLASH) ? LOAD_FLASH_PAGE_BUFFER : LOAD_EEPROM_PAGE_BUFFER);
     78c:	01 11       	cpse	r16, r1
     78e:	02 c0       	rjmp	.+4      	; 0x794 <nvm_paged_write+0x3e>
     790:	83 e2       	ldi	r24, 0x23	; 35
     792:	01 c0       	rjmp	.+2      	; 0x796 <nvm_paged_write+0x40>
     794:	83 e3       	ldi	r24, 0x33	; 51
     796:	42 df       	rcall	.-380    	; 0x61c <nvm_cmd>
	pdi_write_bytes(address, data, count);
     798:	95 01       	movw	r18, r10
     79a:	a4 01       	movw	r20, r8
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	34 d1       	rcall	.+616    	; 0xa0a <pdi_write_bytes>

	//write page
	nvm_cmd((mem == FLASH) ? ERASE_WRITE_FLASH_PAGE : ERASE_WRITE_EEPROM_PAGE); //erase and write
     7a2:	01 11       	cpse	r16, r1
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <nvm_paged_write+0x54>
     7a6:	8f e2       	ldi	r24, 0x2F	; 47
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <nvm_paged_write+0x56>
     7aa:	85 e3       	ldi	r24, 0x35	; 53
     7ac:	37 df       	rcall	.-402    	; 0x61c <nvm_cmd>
	nvm_pointer(address);
     7ae:	c7 01       	movw	r24, r14
     7b0:	b6 01       	movw	r22, r12
     7b2:	1a df       	rcall	.-460    	; 0x5e8 <nvm_pointer>
	unsigned char dummy[] = {PDI_STORE_INDIRECT | (PTR_DATA_INC<<2), 0x00};	//perform a dummy write to trigger previous command
     7b4:	84 e6       	ldi	r24, 0x64	; 100
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	1a 82       	std	Y+2, r1	; 0x02
	pdi_write_raw(dummy, sizeof(dummy));
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	10 d1       	rcall	.+544    	; 0x9e4 <pdi_write_raw>

	return wait_nvm();
     7c4:	37 df       	rcall	.-402    	; 0x634 <wait_nvm>
}
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	af 90       	pop	r10
     7dc:	9f 90       	pop	r9
     7de:	8f 90       	pop	r8
     7e0:	08 95       	ret

000007e2 <usart_setup>:

UsartState state;
char pending;

void usart_setup(unsigned int ubrr){
	UBRR1 = (ubrr&0xFFFF)-1; //baud
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	90 93 cd 00 	sts	0x00CD, r25
     7e8:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1C = (1<<UMSEL10) | (1<<UPM11) | (1<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (1<<UCPOL1);
     7ec:	8f e6       	ldi	r24, 0x6F	; 111
     7ee:	80 93 ca 00 	sts	0x00CA, r24
     7f2:	08 95       	ret

000007f4 <usart_tx_mode>:
}

void usart_tx_mode(void){
	UCSR1B = 1<<TXEN1;
     7f4:	88 e0       	ldi	r24, 0x08	; 8
     7f6:	80 93 c9 00 	sts	0x00C9, r24
	state = UTX;
     7fa:	10 92 03 05 	sts	0x0503, r1
	pending = 0;
     7fe:	10 92 02 05 	sts	0x0502, r1
     802:	08 95       	ret

00000804 <usart_rx_mode>:
}

void usart_rx_mode(void){
	UCSR1B = 1<<RXEN1;
     804:	80 e1       	ldi	r24, 0x10	; 16
     806:	80 93 c9 00 	sts	0x00C9, r24
	state = URX;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	80 93 03 05 	sts	0x0503, r24
     810:	08 95       	ret

00000812 <usart_disconnect>:
}

void usart_disconnect(void){
	UCSR1B = 0;
     812:	10 92 c9 00 	sts	0x00C9, r1
     816:	08 95       	ret

00000818 <send_byte>:
}


void send_byte(unsigned char data){
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	1f 92       	push	r1
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
	if(state == URX)
     822:	90 91 03 05 	lds	r25, 0x0503
     826:	91 30       	cpi	r25, 0x01	; 1
     828:	19 f4       	brne	.+6      	; 0x830 <send_byte+0x18>
		usart_tx_mode();
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	e3 df       	rcall	.-58     	; 0x7f4 <usart_tx_mode>
     82e:	89 81       	ldd	r24, Y+1	; 0x01
	while(!(UCSR1A & (1<<UDRE1))); //wait until the transmitter buffer is ready to accept new data
     830:	90 91 c8 00 	lds	r25, 0x00C8
     834:	95 ff       	sbrs	r25, 5
     836:	fc cf       	rjmp	.-8      	; 0x830 <send_byte+0x18>
	UDR1 = data;
     838:	80 93 ce 00 	sts	0x00CE, r24
	UCSR1A |= 1<<TXC1; //clear transmit completed flag
     83c:	80 91 c8 00 	lds	r24, 0x00C8
     840:	80 64       	ori	r24, 0x40	; 64
     842:	80 93 c8 00 	sts	0x00C8, r24
	pending = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 02 05 	sts	0x0502, r24
}
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <read_byte>:

//TODO: add time out control
unsigned char read_byte(unsigned char *data){
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ec 01       	movw	r28, r24
	if(state == UTX){
     85a:	80 91 03 05 	lds	r24, 0x0503
     85e:	81 11       	cpse	r24, r1
     860:	07 c0       	rjmp	.+14     	; 0x870 <read_byte+0x1c>
		while (!(UCSR1A & (1<<TXC1)));//check if transmission is completed before disabling the transmitter
     862:	80 91 c8 00 	lds	r24, 0x00C8
     866:	86 ff       	sbrs	r24, 6
     868:	fc cf       	rjmp	.-8      	; 0x862 <read_byte+0xe>
		usart_rx_mode();
     86a:	cc df       	rcall	.-104    	; 0x804 <usart_rx_mode>
		pending = 0;
     86c:	10 92 02 05 	sts	0x0502, r1
	UCSR1A |= 1<<TXC1; //clear transmit completed flag
	pending = 1;
}

//TODO: add time out control
unsigned char read_byte(unsigned char *data){
     870:	8a ef       	ldi	r24, 0xFA	; 250
		while (!(UCSR1A & (1<<TXC1)));//check if transmission is completed before disabling the transmitter
		usart_rx_mode();
		pending = 0;
	}
	unsigned char retry = 250;
	while (!(UCSR1A & (1<<RXC1))){
     872:	90 91 c8 00 	lds	r25, 0x00C8
     876:	97 fd       	sbrc	r25, 7
     878:	07 c0       	rjmp	.+14     	; 0x888 <read_byte+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87a:	90 e5       	ldi	r25, 0x50	; 80
     87c:	9a 95       	dec	r25
     87e:	f1 f7       	brne	.-4      	; 0x87c <read_byte+0x28>
     880:	81 50       	subi	r24, 0x01	; 1
		retry--;
		_delay_us(15);
		if(retry == 0) return 0x01;
     882:	b9 f7       	brne	.-18     	; 0x872 <read_byte+0x1e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	04 c0       	rjmp	.+8      	; 0x890 <read_byte+0x3c>
	}
	*data = UDR1;
     888:	80 91 ce 00 	lds	r24, 0x00CE
     88c:	88 83       	st	Y, r24
	return 0;
     88e:	80 e0       	ldi	r24, 0x00	; 0
}
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <usart_wait_tx>:

void usart_wait_tx(void){
	if((state == UTX) && (pending == 1)){
     896:	80 91 03 05 	lds	r24, 0x0503
     89a:	81 11       	cpse	r24, r1
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <usart_wait_tx+0x1c>
     89e:	80 91 02 05 	lds	r24, 0x0502
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	31 f4       	brne	.+12     	; 0x8b2 <usart_wait_tx+0x1c>
		while (!(UCSR1A & (1<<TXC1)));
     8a6:	80 91 c8 00 	lds	r24, 0x00C8
     8aa:	86 ff       	sbrs	r24, 6
     8ac:	fc cf       	rjmp	.-8      	; 0x8a6 <usart_wait_tx+0x10>
		pending = 0;
     8ae:	10 92 02 05 	sts	0x0502, r1
     8b2:	08 95       	ret

000008b4 <pdi_read_byte>:
	pdi_on = 1;
	return NO_ERROR;
}


PdiResult pdi_read_byte(unsigned long address, unsigned char *data){
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	6b 01       	movw	r12, r22
     8c4:	7c 01       	movw	r14, r24
     8c6:	ea 01       	movw	r28, r20
	if(pdi_on == 0) return PDI_DISABLED;
     8c8:	80 91 00 01 	lds	r24, 0x0100
     8cc:	88 23       	and	r24, r24
     8ce:	89 f0       	breq	.+34     	; 0x8f2 <pdi_read_byte+0x3e>
	send_byte(PDI_LOAD_DIRECT | (LONG<<2) | (BYTE<<0));
     8d0:	8c e0       	ldi	r24, 0x0C	; 12
     8d2:	a2 df       	rcall	.-188    	; 0x818 <send_byte>
     8d4:	14 e0       	ldi	r17, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(address&0xFF);
     8d6:	8c 2d       	mov	r24, r12
     8d8:	9f df       	rcall	.-194    	; 0x818 <send_byte>
		address>>=8;
     8da:	cd 2c       	mov	r12, r13
     8dc:	de 2c       	mov	r13, r14
     8de:	ef 2c       	mov	r14, r15
     8e0:	ff 24       	eor	r15, r15
     8e2:	11 50       	subi	r17, 0x01	; 1


PdiResult pdi_read_byte(unsigned long address, unsigned char *data){
	if(pdi_on == 0) return PDI_DISABLED;
	send_byte(PDI_LOAD_DIRECT | (LONG<<2) | (BYTE<<0));
	for(char c = 0; c<4; c++){
     8e4:	c1 f7       	brne	.-16     	; 0x8d6 <pdi_read_byte+0x22>
		send_byte(address&0xFF);
		address>>=8;
	}
	if(read_byte(data)) return TIME_OUT;
     8e6:	ce 01       	movw	r24, r28
     8e8:	b5 df       	rcall	.-150    	; 0x854 <read_byte>
     8ea:	88 23       	and	r24, r24
     8ec:	21 f0       	breq	.+8      	; 0x8f6 <pdi_read_byte+0x42>
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <pdi_read_byte+0x44>
	return NO_ERROR;
}


PdiResult pdi_read_byte(unsigned long address, unsigned char *data){
	if(pdi_on == 0) return PDI_DISABLED;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <pdi_read_byte+0x44>
		send_byte(address&0xFF);
		address>>=8;
	}
	if(read_byte(data)) return TIME_OUT;
	//TODO:check for error
	return NO_ERROR;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret

00000908 <pdi_write_byte>:

PdiResult pdi_write_byte(unsigned long address, unsigned char data){
     908:	cf 92       	push	r12
     90a:	df 92       	push	r13
     90c:	ef 92       	push	r14
     90e:	ff 92       	push	r15
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	6b 01       	movw	r12, r22
     916:	7c 01       	movw	r14, r24
     918:	d4 2f       	mov	r29, r20
	if(pdi_on == 0) return PDI_DISABLED;
     91a:	80 91 00 01 	lds	r24, 0x0100
     91e:	88 23       	and	r24, r24
     920:	79 f0       	breq	.+30     	; 0x940 <pdi_write_byte+0x38>
	send_byte(PDI_STORE_DIRECT | (LONG<<2) | (BYTE<<0));
     922:	8c e4       	ldi	r24, 0x4C	; 76
     924:	79 df       	rcall	.-270    	; 0x818 <send_byte>
     926:	c4 e0       	ldi	r28, 0x04	; 4
	for(char c = 0; c<4; c++){
		send_byte(address);
     928:	8c 2d       	mov	r24, r12
     92a:	76 df       	rcall	.-276    	; 0x818 <send_byte>
		address>>=8;
     92c:	cd 2c       	mov	r12, r13
     92e:	de 2c       	mov	r13, r14
     930:	ef 2c       	mov	r14, r15
     932:	ff 24       	eor	r15, r15
     934:	c1 50       	subi	r28, 0x01	; 1
}

PdiResult pdi_write_byte(unsigned long address, unsigned char data){
	if(pdi_on == 0) return PDI_DISABLED;
	send_byte(PDI_STORE_DIRECT | (LONG<<2) | (BYTE<<0));
	for(char c = 0; c<4; c++){
     936:	c1 f7       	brne	.-16     	; 0x928 <pdi_write_byte+0x20>
		send_byte(address);
		address>>=8;
	}
	send_byte(data);
     938:	8d 2f       	mov	r24, r29
     93a:	6e df       	rcall	.-292    	; 0x818 <send_byte>
	return NO_ERROR;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	01 c0       	rjmp	.+2      	; 0x942 <pdi_write_byte+0x3a>
	//TODO:check for error
	return NO_ERROR;
}

PdiResult pdi_write_byte(unsigned long address, unsigned char data){
	if(pdi_on == 0) return PDI_DISABLED;
     940:	81 e0       	ldi	r24, 0x01	; 1
		send_byte(address);
		address>>=8;
	}
	send_byte(data);
	return NO_ERROR;
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <pdi_read_bytes>:

PdiResult pdi_read_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
     950:	9f 92       	push	r9
     952:	af 92       	push	r10
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
     96a:	94 2e       	mov	r9, r20
     96c:	a5 2e       	mov	r10, r21
     96e:	e9 01       	movw	r28, r18
	if(pdi_on == 0) return PDI_DISABLED;
     970:	80 91 00 01 	lds	r24, 0x0100
     974:	88 23       	and	r24, r24
     976:	49 f1       	breq	.+82     	; 0x9ca <pdi_read_bytes+0x7a>
	unsigned int count_tmp = count-1;
     978:	89 01       	movw	r16, r18
     97a:	01 50       	subi	r16, 0x01	; 1
     97c:	11 09       	sbc	r17, r1
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
     97e:	8b e6       	ldi	r24, 0x6B	; 107
     980:	4b df       	rcall	.-362    	; 0x818 <send_byte>
     982:	34 e0       	ldi	r19, 0x04	; 4
     984:	b3 2e       	mov	r11, r19
	for(char c = 0; c<4; c++){
		send_byte(start_address);
     986:	8c 2d       	mov	r24, r12
     988:	47 df       	rcall	.-370    	; 0x818 <send_byte>
		start_address>>=8;
     98a:	cd 2c       	mov	r12, r13
     98c:	de 2c       	mov	r13, r14
     98e:	ef 2c       	mov	r14, r15
     990:	ff 24       	eor	r15, r15
     992:	ba 94       	dec	r11
PdiResult pdi_read_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
	unsigned int count_tmp = count-1;
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
	for(char c = 0; c<4; c++){
     994:	c1 f7       	brne	.-16     	; 0x986 <pdi_read_bytes+0x36>
		send_byte(start_address);
		start_address>>=8;
	}
	//set repeat counter
	send_byte(PDI_REPEAT | WORD);
     996:	81 ea       	ldi	r24, 0xA1	; 161
     998:	3f df       	rcall	.-386    	; 0x818 <send_byte>
	send_byte(count_tmp);
     99a:	80 2f       	mov	r24, r16
     99c:	3d df       	rcall	.-390    	; 0x818 <send_byte>
	count_tmp>>=8;
	send_byte(count_tmp);
     99e:	81 2f       	mov	r24, r17
     9a0:	3b df       	rcall	.-394    	; 0x818 <send_byte>
	//send first read instruction
	send_byte(PDI_LOAD_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
     9a2:	84 e2       	ldi	r24, 0x24	; 36
     9a4:	39 df       	rcall	.-398    	; 0x818 <send_byte>
     9a6:	e9 2c       	mov	r14, r9
     9a8:	fa 2c       	mov	r15, r10
     9aa:	ce 0d       	add	r28, r14
     9ac:	df 1d       	adc	r29, r15
	for(unsigned int c=0; c<count; c++){
     9ae:	ec 16       	cp	r14, r28
     9b0:	fd 06       	cpc	r15, r29
     9b2:	49 f0       	breq	.+18     	; 0x9c6 <pdi_read_bytes+0x76>
		if(read_byte(data+c))
     9b4:	c7 01       	movw	r24, r14
     9b6:	4e df       	rcall	.-356    	; 0x854 <read_byte>
     9b8:	9f ef       	ldi	r25, 0xFF	; 255
     9ba:	e9 1a       	sub	r14, r25
     9bc:	f9 0a       	sbc	r15, r25
     9be:	88 23       	and	r24, r24
     9c0:	b1 f3       	breq	.-20     	; 0x9ae <pdi_read_bytes+0x5e>
			return TIME_OUT;
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <pdi_read_bytes+0x7c>
	}

	return NO_ERROR;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <pdi_read_bytes+0x7c>
	send_byte(data);
	return NO_ERROR;
}

PdiResult pdi_read_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
		if(read_byte(data+c))
			return TIME_OUT;
	}

	return NO_ERROR;
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	9f 90       	pop	r9
     9e2:	08 95       	ret

000009e4 <pdi_write_raw>:
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
	pdi_write_raw(data, count);
	return NO_ERROR;
}

void pdi_write_raw(unsigned char * data, unsigned int count){
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
     9ee:	8b 01       	movw	r16, r22
     9f0:	08 0f       	add	r16, r24
     9f2:	19 1f       	adc	r17, r25
	for(; count>0; count--, data++)
     9f4:	c0 17       	cp	r28, r16
     9f6:	d1 07       	cpc	r29, r17
     9f8:	19 f0       	breq	.+6      	; 0xa00 <pdi_write_raw+0x1c>
		send_byte(*data);
     9fa:	89 91       	ld	r24, Y+
     9fc:	0d df       	rcall	.-486    	; 0x818 <send_byte>
     9fe:	fa cf       	rjmp	.-12     	; 0x9f4 <pdi_write_raw+0x10>
}
     a00:	df 91       	pop	r29
     a02:	cf 91       	pop	r28
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <pdi_write_bytes>:
	}

	return NO_ERROR;
}

PdiResult pdi_write_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
     a24:	5a 01       	movw	r10, r20
     a26:	e9 01       	movw	r28, r18
	if(pdi_on == 0) return PDI_DISABLED;
     a28:	80 91 00 01 	lds	r24, 0x0100
     a2c:	88 23       	and	r24, r24
     a2e:	e1 f0       	breq	.+56     	; 0xa68 <pdi_write_bytes+0x5e>
	unsigned int count_tmp = count-1;
     a30:	89 01       	movw	r16, r18
     a32:	01 50       	subi	r16, 0x01	; 1
     a34:	11 09       	sbc	r17, r1
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
     a36:	8b e6       	ldi	r24, 0x6B	; 107
     a38:	ef de       	rcall	.-546    	; 0x818 <send_byte>
     a3a:	54 e0       	ldi	r21, 0x04	; 4
     a3c:	95 2e       	mov	r9, r21
	for(char c = 0; c<4; c++){
		send_byte(start_address);
     a3e:	8c 2d       	mov	r24, r12
     a40:	eb de       	rcall	.-554    	; 0x818 <send_byte>
		start_address>>=8;
     a42:	cd 2c       	mov	r12, r13
     a44:	de 2c       	mov	r13, r14
     a46:	ef 2c       	mov	r14, r15
     a48:	ff 24       	eor	r15, r15
     a4a:	9a 94       	dec	r9
PdiResult pdi_write_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
	unsigned int count_tmp = count-1;
	//set pointer
	send_byte(PDI_STORE_INDIRECT | (PTR<<2) | LONG);
	for(char c = 0; c<4; c++){
     a4c:	c1 f7       	brne	.-16     	; 0xa3e <pdi_write_bytes+0x34>
		send_byte(start_address);
		start_address>>=8;
	}
	//set repeat counter
	send_byte(PDI_REPEAT | WORD);
     a4e:	81 ea       	ldi	r24, 0xA1	; 161
     a50:	e3 de       	rcall	.-570    	; 0x818 <send_byte>
	send_byte(count_tmp);
     a52:	80 2f       	mov	r24, r16
     a54:	e1 de       	rcall	.-574    	; 0x818 <send_byte>
	count_tmp>>=8;
	send_byte(count_tmp);
     a56:	81 2f       	mov	r24, r17
     a58:	df de       	rcall	.-578    	; 0x818 <send_byte>
	//send first read instruction
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
     a5a:	84 e6       	ldi	r24, 0x64	; 100
     a5c:	dd de       	rcall	.-582    	; 0x818 <send_byte>
	pdi_write_raw(data, count);
     a5e:	be 01       	movw	r22, r28
     a60:	c5 01       	movw	r24, r10
     a62:	c0 df       	rcall	.-128    	; 0x9e4 <pdi_write_raw>
	return NO_ERROR;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <pdi_write_bytes+0x60>

	return NO_ERROR;
}

PdiResult pdi_write_bytes(unsigned long start_address, unsigned char *data, unsigned int count){
	if(pdi_on == 0) return PDI_DISABLED;
     a68:	81 e0       	ldi	r24, 0x01	; 1
	send_byte(count_tmp);
	//send first read instruction
	send_byte(PDI_STORE_INDIRECT | (PTR_DATA_INC<<2) | BYTE);
	pdi_write_raw(data, count);
	return NO_ERROR;
}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	bf 90       	pop	r11
     a7c:	af 90       	pop	r10
     a7e:	9f 90       	pop	r9
     a80:	08 95       	ret

00000a82 <send_break>:
	PDI_DDR &= ~((1<<CLK) | (1<<TX) | (1<<RX)); //all input
	pdi_on = 0;
}

void send_break(void){
	PDI_DDR |= (1<<TX); //tx output low (from default state)
     a82:	53 9a       	sbi	0x0a, 3	; 10
	usart_rx_mode();//put in rx mode to manually override data pin
     a84:	bf de       	rcall	.-642    	; 0x804 <usart_rx_mode>
	for(unsigned int c = 0; c<char_us; c+=10)
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	20 91 04 05 	lds	r18, 0x0504
     a8e:	30 91 05 05 	lds	r19, 0x0505
     a92:	82 17       	cp	r24, r18
     a94:	93 07       	cpc	r25, r19
     a96:	28 f4       	brcc	.+10     	; 0xaa2 <send_break+0x20>
     a98:	20 e3       	ldi	r18, 0x30	; 48
     a9a:	2a 95       	dec	r18
     a9c:	f1 f7       	brne	.-4      	; 0xa9a <send_break+0x18>
     a9e:	0a 96       	adiw	r24, 0x0a	; 10
     aa0:	f4 cf       	rjmp	.-24     	; 0xa8a <send_break+0x8>
		_delay_us(9);
	PDI_DDR &= ~(1<<TX); //restore
     aa2:	53 98       	cbi	0x0a, 3	; 10
	usart_tx_mode();
     aa4:	a7 ce       	rjmp	.-690    	; 0x7f4 <usart_tx_mode>

00000aa6 <send_idle>:
}

void send_idle(void){
	usart_wait_tx();
     aa6:	f7 de       	rcall	.-530    	; 0x896 <usart_wait_tx>
	usart_tx_mode();
     aa8:	a5 de       	rcall	.-694    	; 0x7f4 <usart_tx_mode>
	for(unsigned int c = 0; c<char_us; c+=10)
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	20 91 04 05 	lds	r18, 0x0504
     ab2:	30 91 05 05 	lds	r19, 0x0505
     ab6:	82 17       	cp	r24, r18
     ab8:	93 07       	cpc	r25, r19
     aba:	28 f4       	brcc	.+10     	; 0xac6 <send_idle+0x20>
     abc:	20 e3       	ldi	r18, 0x30	; 48
     abe:	2a 95       	dec	r18
     ac0:	f1 f7       	brne	.-4      	; 0xabe <send_idle+0x18>
     ac2:	0a 96       	adiw	r24, 0x0a	; 10
     ac4:	f4 cf       	rjmp	.-24     	; 0xaae <send_idle+0x8>
		_delay_us(9);
}
     ac6:	08 95       	ret

00000ac8 <pdi_exit>:
		send_byte(*data);
}

void pdi_exit(void){
	//always synchronize the protocol in case something went bad
	send_break();
     ac8:	dc df       	rcall	.-72     	; 0xa82 <send_break>
	send_break();
     aca:	db df       	rcall	.-74     	; 0xa82 <send_break>
	send_idle();
     acc:	ec df       	rcall	.-40     	; 0xaa6 <send_idle>
	send_idle();
     ace:	eb df       	rcall	.-42     	; 0xaa6 <send_idle>
	//end reset
	send_byte(PDI_STORE_CONTROL_REG | PDI_RESET_REG);
     ad0:	81 ec       	ldi	r24, 0xC1	; 193
     ad2:	a2 de       	rcall	.-700    	; 0x818 <send_byte>
	send_byte(0);
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	a0 de       	rcall	.-704    	; 0x818 <send_byte>

	send_idle();
     ad8:	e6 df       	rcall	.-52     	; 0xaa6 <send_idle>
	send_idle();
     ada:	e5 df       	rcall	.-54     	; 0xaa6 <send_idle>
	send_idle();
     adc:	e4 df       	rcall	.-56     	; 0xaa6 <send_idle>
	send_idle();
     ade:	e3 df       	rcall	.-58     	; 0xaa6 <send_idle>

	usart_disconnect();
     ae0:	98 de       	rcall	.-720    	; 0x812 <usart_disconnect>
	PDI_PORT &= ~((1<<CLK) | (1<<TX) | (1<<RX)); //disable pull ups
     ae2:	8b b1       	in	r24, 0x0b	; 11
     ae4:	83 7d       	andi	r24, 0xD3	; 211
     ae6:	8b b9       	out	0x0b, r24	; 11
	PDI_DDR &= ~((1<<CLK) | (1<<TX) | (1<<RX)); //all input
     ae8:	8a b1       	in	r24, 0x0a	; 10
     aea:	83 7d       	andi	r24, 0xD3	; 211
     aec:	8a b9       	out	0x0a, r24	; 10
	pdi_on = 0;
     aee:	10 92 00 01 	sts	0x0100, r1
     af2:	08 95       	ret

00000af4 <send_idles>:
	usart_tx_mode();
	for(unsigned int c = 0; c<char_us; c+=10)
		_delay_us(9);
}

void send_idles(char n){
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	1f 92       	push	r1
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
	for(char c = 0; c<n; c++)
     b00:	10 e0       	ldi	r17, 0x00	; 0
     b02:	18 17       	cp	r17, r24
     b04:	29 f0       	breq	.+10     	; 0xb10 <__stack+0x11>
		send_idle();
     b06:	89 83       	std	Y+1, r24	; 0x01
     b08:	ce df       	rcall	.-100    	; 0xaa6 <send_idle>
	for(unsigned int c = 0; c<char_us; c+=10)
		_delay_us(9);
}

void send_idles(char n){
	for(char c = 0; c<n; c++)
     b0a:	1f 5f       	subi	r17, 0xFF	; 255
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	f9 cf       	rjmp	.-14     	; 0xb02 <__stack+0x3>
		send_idle();
}
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <pin_default_state>:

void pin_default_state(void){
	//RX input, TX input, CLK output
	PDI_PORT &= ~((1<<TX) | (1<<RX) | (1<<CLK));
     b1a:	8b b1       	in	r24, 0x0b	; 11
     b1c:	83 7d       	andi	r24, 0xD3	; 211
     b1e:	8b b9       	out	0x0b, r24	; 11
	PDI_DDR &= ~((1<<RX) | (1<<TX));
     b20:	8a b1       	in	r24, 0x0a	; 10
     b22:	83 7f       	andi	r24, 0xF3	; 243
     b24:	8a b9       	out	0x0a, r24	; 10
	PDI_DDR |= (1<<CLK) ;
     b26:	55 9a       	sbi	0x0a, 5	; 10
     b28:	08 95       	ret

00000b2a <pdi_init>:
#include "pdi_const.h"

unsigned char pdi_on = 0;
unsigned int char_us;

PdiResult pdi_init(unsigned int freq_khz){
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	1f 92       	push	r1
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	9c 01       	movw	r18, r24
	char_us = 12000/freq_khz; //break and idle character length in us
     b38:	80 ee       	ldi	r24, 0xE0	; 224
     b3a:	9e e2       	ldi	r25, 0x2E	; 46
     b3c:	b9 01       	movw	r22, r18
     b3e:	ff d4       	rcall	.+2558   	; 0x153e <__udivmodhi4>
     b40:	70 93 05 05 	sts	0x0505, r23
     b44:	60 93 04 05 	sts	0x0504, r22
	//RX input, TX output low, CLK output low
	PDI_PORT &= ~((1<<TX) | (1<<RX) | (1<<CLK));
     b48:	8b b1       	in	r24, 0x0b	; 11
     b4a:	83 7d       	andi	r24, 0xD3	; 211
     b4c:	8b b9       	out	0x0b, r24	; 11
	PDI_DDR &= ~(1<<RX);
     b4e:	52 98       	cbi	0x0a, 2	; 10
	PDI_DDR |= (1<<CLK) | (1<<TX);
     b50:	8a b1       	in	r24, 0x0a	; 10
     b52:	88 62       	ori	r24, 0x28	; 40
     b54:	8a b9       	out	0x0a, r24	; 10

	//Setup USART
	long brr = (F_CPU/2000)/freq_khz;
     b56:	80 e4       	ldi	r24, 0x40	; 64
     b58:	9f e1       	ldi	r25, 0x1F	; 31
     b5a:	b9 01       	movw	r22, r18
     b5c:	f0 d4       	rcall	.+2528   	; 0x153e <__udivmodhi4>
     b5e:	cb 01       	movw	r24, r22
	usart_setup(brr);
     b60:	40 de       	rcall	.-896    	; 0x7e2 <usart_setup>
     b62:	85 e3       	ldi	r24, 0x35	; 53
     b64:	8a 95       	dec	r24
     b66:	f1 f7       	brne	.-4      	; 0xb64 <pdi_init+0x3a>
     b68:	00 00       	nop

	_delay_us(10); //TODO: check if could be removed
	PDI_PORT |= 1<<TX; //Disable reset and wait at least 95 ns and opt 100us
     b6a:	5b 9a       	sbi	0x0b, 3	; 11

	usart_tx_mode();
     b6c:	43 de       	rcall	.-890    	; 0x7f4 <usart_tx_mode>
	pin_default_state();
     b6e:	d5 df       	rcall	.-86     	; 0xb1a <pin_default_state>
	send_idles(2);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	c0 df       	rcall	.-128    	; 0xaf4 <send_idles>

	//set idle bits between dir. change to 16
	send_byte(PDI_STORE_CONTROL_REG | PDI_CTRL_REG);
     b74:	82 ec       	ldi	r24, 0xC2	; 194
     b76:	50 de       	rcall	.-864    	; 0x818 <send_byte>
	send_byte(0x03);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	4e de       	rcall	.-868    	; 0x818 <send_byte>
	send_idle();
     b7c:	94 df       	rcall	.-216    	; 0xaa6 <send_idle>

	//reset device
	send_byte(PDI_STORE_CONTROL_REG | PDI_RESET_REG);
     b7e:	81 ec       	ldi	r24, 0xC1	; 193
     b80:	4b de       	rcall	.-874    	; 0x818 <send_byte>
	send_byte(PDI_RESET_SIGNATURE);
     b82:	89 e5       	ldi	r24, 0x59	; 89
     b84:	49 de       	rcall	.-878    	; 0x818 <send_byte>
	send_idle();
     b86:	8f df       	rcall	.-226    	; 0xaa6 <send_idle>

	//provide 64bit programming key - little endian
	send_byte(PDI_KEY);
     b88:	80 ee       	ldi	r24, 0xE0	; 224
     b8a:	46 de       	rcall	.-884    	; 0x818 <send_byte>
	send_byte(0xFF);
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	44 de       	rcall	.-888    	; 0x818 <send_byte>
	send_byte(0x88);
     b90:	88 e8       	ldi	r24, 0x88	; 136
     b92:	42 de       	rcall	.-892    	; 0x818 <send_byte>
	send_byte(0xD8);
     b94:	88 ed       	ldi	r24, 0xD8	; 216
     b96:	40 de       	rcall	.-896    	; 0x818 <send_byte>
	send_byte(0xCD);
     b98:	8d ec       	ldi	r24, 0xCD	; 205
     b9a:	3e de       	rcall	.-900    	; 0x818 <send_byte>
	send_byte(0x45);
     b9c:	85 e4       	ldi	r24, 0x45	; 69
     b9e:	3c de       	rcall	.-904    	; 0x818 <send_byte>
	send_byte(0xAB);
     ba0:	8b ea       	ldi	r24, 0xAB	; 171
     ba2:	3a de       	rcall	.-908    	; 0x818 <send_byte>
	send_byte(0x89);
     ba4:	89 e8       	ldi	r24, 0x89	; 137
     ba6:	38 de       	rcall	.-912    	; 0x818 <send_byte>
	send_byte(0x12);
     ba8:	82 e1       	ldi	r24, 0x12	; 18
     baa:	36 de       	rcall	.-916    	; 0x818 <send_byte>
	send_idles(2);
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	a2 df       	rcall	.-188    	; 0xaf4 <send_idles>
     bb0:	18 ec       	ldi	r17, 0xC8	; 200

	//poll Non Volatile Memory Enable bit
	unsigned char retry = 200;
	for(; retry > 0; retry--){
		send_byte(PDI_LOAD_CONTROL_REG | PDI_STATUS_REG);
     bb2:	80 e8       	ldi	r24, 0x80	; 128
     bb4:	31 de       	rcall	.-926    	; 0x818 <send_byte>
		unsigned char status;
		if(read_byte(&status))
     bb6:	ce 01       	movw	r24, r28
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	4c de       	rcall	.-872    	; 0x854 <read_byte>
     bbc:	81 11       	cpse	r24, r1
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <pdi_init+0xb0>
			return TIME_OUT;
		if(status & (1<<NVMEN))break;
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	81 fd       	sbrc	r24, 1
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <pdi_init+0xa6>
		send_idles(2);
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	95 df       	rcall	.-214    	; 0xaf4 <send_idles>
     bca:	11 50       	subi	r17, 0x01	; 1
	send_byte(0x12);
	send_idles(2);

	//poll Non Volatile Memory Enable bit
	unsigned char retry = 200;
	for(; retry > 0; retry--){
     bcc:	91 f7       	brne	.-28     	; 0xbb2 <pdi_init+0x88>
     bce:	05 c0       	rjmp	.+10     	; 0xbda <pdi_init+0xb0>
		if(status & (1<<NVMEN))break;
		send_idles(2);
	}
	if(retry == 0) return TIME_OUT;

	pdi_on = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 00 01 	sts	0x0100, r24
	return NO_ERROR;
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <pdi_init+0xb2>
		if(read_byte(&status))
			return TIME_OUT;
		if(status & (1<<NVMEN))break;
		send_idles(2);
	}
	if(retry == 0) return TIME_OUT;
     bda:	82 e0       	ldi	r24, 0x02	; 2

	pdi_on = 1;
	return NO_ERROR;
}
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	08 95       	ret

00000be6 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
     bee:	0f 93       	push	r16
     bf0:	1f 93       	push	r17
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	7c 01       	movw	r14, r24
     bf8:	8b 01       	movw	r16, r22
     bfa:	ea 01       	movw	r28, r20
     bfc:	df d1       	rcall	.+958    	; 0xfbc <Endpoint_WaitUntilReady>
     bfe:	81 11       	cpse	r24, r1
     c00:	31 c0       	rjmp	.+98     	; 0xc64 <Endpoint_Write_Stream_LE+0x7e>
     c02:	20 97       	sbiw	r28, 0x00	; 0
     c04:	31 f0       	breq	.+12     	; 0xc12 <Endpoint_Write_Stream_LE+0x2c>
     c06:	88 81       	ld	r24, Y
     c08:	99 81       	ldd	r25, Y+1	; 0x01
     c0a:	08 1b       	sub	r16, r24
     c0c:	19 0b       	sbc	r17, r25
     c0e:	e8 0e       	add	r14, r24
     c10:	f9 1e       	adc	r15, r25
     c12:	c1 2c       	mov	r12, r1
     c14:	d1 2c       	mov	r13, r1
     c16:	01 15       	cp	r16, r1
     c18:	11 05       	cpc	r17, r1
     c1a:	19 f1       	breq	.+70     	; 0xc62 <Endpoint_Write_Stream_LE+0x7c>
     c1c:	80 91 e8 00 	lds	r24, 0x00E8
     c20:	85 fd       	sbrc	r24, 5
     c22:	14 c0       	rjmp	.+40     	; 0xc4c <Endpoint_Write_Stream_LE+0x66>
     c24:	80 91 e8 00 	lds	r24, 0x00E8
     c28:	8e 77       	andi	r24, 0x7E	; 126
     c2a:	80 93 e8 00 	sts	0x00E8, r24
     c2e:	6b d4       	rcall	.+2262   	; 0x1506 <USB_USBTask>
     c30:	20 97       	sbiw	r28, 0x00	; 0
     c32:	41 f0       	breq	.+16     	; 0xc44 <Endpoint_Write_Stream_LE+0x5e>
     c34:	88 81       	ld	r24, Y
     c36:	99 81       	ldd	r25, Y+1	; 0x01
     c38:	8c 0d       	add	r24, r12
     c3a:	9d 1d       	adc	r25, r13
     c3c:	99 83       	std	Y+1, r25	; 0x01
     c3e:	88 83       	st	Y, r24
     c40:	85 e0       	ldi	r24, 0x05	; 5
     c42:	10 c0       	rjmp	.+32     	; 0xc64 <Endpoint_Write_Stream_LE+0x7e>
     c44:	bb d1       	rcall	.+886    	; 0xfbc <Endpoint_WaitUntilReady>
     c46:	88 23       	and	r24, r24
     c48:	31 f3       	breq	.-52     	; 0xc16 <Endpoint_Write_Stream_LE+0x30>
     c4a:	0c c0       	rjmp	.+24     	; 0xc64 <Endpoint_Write_Stream_LE+0x7e>
     c4c:	f7 01       	movw	r30, r14
     c4e:	81 91       	ld	r24, Z+
     c50:	7f 01       	movw	r14, r30
     c52:	80 93 f1 00 	sts	0x00F1, r24
     c56:	01 50       	subi	r16, 0x01	; 1
     c58:	11 09       	sbc	r17, r1
     c5a:	ff ef       	ldi	r31, 0xFF	; 255
     c5c:	cf 1a       	sub	r12, r31
     c5e:	df 0a       	sbc	r13, r31
     c60:	da cf       	rjmp	.-76     	; 0xc16 <Endpoint_Write_Stream_LE+0x30>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	1f 91       	pop	r17
     c6a:	0f 91       	pop	r16
     c6c:	ff 90       	pop	r15
     c6e:	ef 90       	pop	r14
     c70:	df 90       	pop	r13
     c72:	cf 90       	pop	r12
     c74:	08 95       	ret

00000c76 <Endpoint_Read_Stream_LE>:
     c76:	cf 92       	push	r12
     c78:	df 92       	push	r13
     c7a:	ef 92       	push	r14
     c7c:	ff 92       	push	r15
     c7e:	0f 93       	push	r16
     c80:	1f 93       	push	r17
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	7c 01       	movw	r14, r24
     c88:	8b 01       	movw	r16, r22
     c8a:	ea 01       	movw	r28, r20
     c8c:	97 d1       	rcall	.+814    	; 0xfbc <Endpoint_WaitUntilReady>
     c8e:	81 11       	cpse	r24, r1
     c90:	31 c0       	rjmp	.+98     	; 0xcf4 <Endpoint_Read_Stream_LE+0x7e>
     c92:	20 97       	sbiw	r28, 0x00	; 0
     c94:	31 f0       	breq	.+12     	; 0xca2 <Endpoint_Read_Stream_LE+0x2c>
     c96:	88 81       	ld	r24, Y
     c98:	99 81       	ldd	r25, Y+1	; 0x01
     c9a:	08 1b       	sub	r16, r24
     c9c:	19 0b       	sbc	r17, r25
     c9e:	e8 0e       	add	r14, r24
     ca0:	f9 1e       	adc	r15, r25
     ca2:	c1 2c       	mov	r12, r1
     ca4:	d1 2c       	mov	r13, r1
     ca6:	01 15       	cp	r16, r1
     ca8:	11 05       	cpc	r17, r1
     caa:	19 f1       	breq	.+70     	; 0xcf2 <Endpoint_Read_Stream_LE+0x7c>
     cac:	80 91 e8 00 	lds	r24, 0x00E8
     cb0:	85 fd       	sbrc	r24, 5
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <Endpoint_Read_Stream_LE+0x66>
     cb4:	80 91 e8 00 	lds	r24, 0x00E8
     cb8:	8b 77       	andi	r24, 0x7B	; 123
     cba:	80 93 e8 00 	sts	0x00E8, r24
     cbe:	23 d4       	rcall	.+2118   	; 0x1506 <USB_USBTask>
     cc0:	20 97       	sbiw	r28, 0x00	; 0
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <Endpoint_Read_Stream_LE+0x5e>
     cc4:	88 81       	ld	r24, Y
     cc6:	99 81       	ldd	r25, Y+1	; 0x01
     cc8:	8c 0d       	add	r24, r12
     cca:	9d 1d       	adc	r25, r13
     ccc:	99 83       	std	Y+1, r25	; 0x01
     cce:	88 83       	st	Y, r24
     cd0:	85 e0       	ldi	r24, 0x05	; 5
     cd2:	10 c0       	rjmp	.+32     	; 0xcf4 <Endpoint_Read_Stream_LE+0x7e>
     cd4:	73 d1       	rcall	.+742    	; 0xfbc <Endpoint_WaitUntilReady>
     cd6:	88 23       	and	r24, r24
     cd8:	31 f3       	breq	.-52     	; 0xca6 <Endpoint_Read_Stream_LE+0x30>
     cda:	0c c0       	rjmp	.+24     	; 0xcf4 <Endpoint_Read_Stream_LE+0x7e>
     cdc:	80 91 f1 00 	lds	r24, 0x00F1
     ce0:	f7 01       	movw	r30, r14
     ce2:	81 93       	st	Z+, r24
     ce4:	7f 01       	movw	r14, r30
     ce6:	01 50       	subi	r16, 0x01	; 1
     ce8:	11 09       	sbc	r17, r1
     cea:	ff ef       	ldi	r31, 0xFF	; 255
     cec:	cf 1a       	sub	r12, r31
     cee:	df 0a       	sbc	r13, r31
     cf0:	da cf       	rjmp	.-76     	; 0xca6 <Endpoint_Read_Stream_LE+0x30>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	08 95       	ret

00000d06 <Endpoint_Write_Control_Stream_LE>:
     d06:	20 91 11 05 	lds	r18, 0x0511
     d0a:	30 91 12 05 	lds	r19, 0x0512
     d0e:	26 17       	cp	r18, r22
     d10:	37 07       	cpc	r19, r23
     d12:	48 f0       	brcs	.+18     	; 0xd26 <Endpoint_Write_Control_Stream_LE+0x20>
     d14:	61 15       	cp	r22, r1
     d16:	71 05       	cpc	r23, r1
     d18:	39 f4       	brne	.+14     	; 0xd28 <Endpoint_Write_Control_Stream_LE+0x22>
     d1a:	20 91 e8 00 	lds	r18, 0x00E8
     d1e:	2e 77       	andi	r18, 0x7E	; 126
     d20:	20 93 e8 00 	sts	0x00E8, r18
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <Endpoint_Write_Control_Stream_LE+0x22>
     d26:	b9 01       	movw	r22, r18
     d28:	fc 01       	movw	r30, r24
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	61 15       	cp	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	c1 f1       	breq	.+112    	; 0xda2 <Endpoint_Write_Control_Stream_LE+0x9c>
     d32:	80 91 0a 05 	lds	r24, 0x050A
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <Endpoint_Write_Control_Stream_LE+0x36>
     d3a:	41 c0       	rjmp	.+130    	; 0xdbe <Endpoint_Write_Control_Stream_LE+0xb8>
     d3c:	85 30       	cpi	r24, 0x05	; 5
     d3e:	09 f4       	brne	.+2      	; 0xd42 <Endpoint_Write_Control_Stream_LE+0x3c>
     d40:	40 c0       	rjmp	.+128    	; 0xdc2 <Endpoint_Write_Control_Stream_LE+0xbc>
     d42:	80 91 e8 00 	lds	r24, 0x00E8
     d46:	83 fd       	sbrc	r24, 3
     d48:	3e c0       	rjmp	.+124    	; 0xdc6 <Endpoint_Write_Control_Stream_LE+0xc0>
     d4a:	80 91 e8 00 	lds	r24, 0x00E8
     d4e:	82 ff       	sbrs	r24, 2
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <Endpoint_Write_Control_Stream_LE+0x58>
     d52:	80 91 e8 00 	lds	r24, 0x00E8
     d56:	82 ff       	sbrs	r24, 2
     d58:	27 c0       	rjmp	.+78     	; 0xda8 <Endpoint_Write_Control_Stream_LE+0xa2>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	08 95       	ret
     d5e:	80 91 e8 00 	lds	r24, 0x00E8
     d62:	80 ff       	sbrs	r24, 0
     d64:	e3 cf       	rjmp	.-58     	; 0xd2c <Endpoint_Write_Control_Stream_LE+0x26>
     d66:	20 91 f3 00 	lds	r18, 0x00F3
     d6a:	80 91 f2 00 	lds	r24, 0x00F2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	92 2b       	or	r25, r18
     d72:	61 15       	cp	r22, r1
     d74:	71 05       	cpc	r23, r1
     d76:	51 f0       	breq	.+20     	; 0xd8c <Endpoint_Write_Control_Stream_LE+0x86>
     d78:	80 34       	cpi	r24, 0x40	; 64
     d7a:	91 05       	cpc	r25, r1
     d7c:	38 f4       	brcc	.+14     	; 0xd8c <Endpoint_Write_Control_Stream_LE+0x86>
     d7e:	21 91       	ld	r18, Z+
     d80:	20 93 f1 00 	sts	0x00F1, r18
     d84:	61 50       	subi	r22, 0x01	; 1
     d86:	71 09       	sbc	r23, r1
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	f3 cf       	rjmp	.-26     	; 0xd72 <Endpoint_Write_Control_Stream_LE+0x6c>
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	80 34       	cpi	r24, 0x40	; 64
     d90:	91 05       	cpc	r25, r1
     d92:	09 f0       	breq	.+2      	; 0xd96 <Endpoint_Write_Control_Stream_LE+0x90>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	80 91 e8 00 	lds	r24, 0x00E8
     d9a:	8e 77       	andi	r24, 0x7E	; 126
     d9c:	80 93 e8 00 	sts	0x00E8, r24
     da0:	c5 cf       	rjmp	.-118    	; 0xd2c <Endpoint_Write_Control_Stream_LE+0x26>
     da2:	21 11       	cpse	r18, r1
     da4:	c6 cf       	rjmp	.-116    	; 0xd32 <Endpoint_Write_Control_Stream_LE+0x2c>
     da6:	d5 cf       	rjmp	.-86     	; 0xd52 <Endpoint_Write_Control_Stream_LE+0x4c>
     da8:	80 91 0a 05 	lds	r24, 0x050A
     dac:	88 23       	and	r24, r24
     dae:	39 f0       	breq	.+14     	; 0xdbe <Endpoint_Write_Control_Stream_LE+0xb8>
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	39 f0       	breq	.+14     	; 0xdc2 <Endpoint_Write_Control_Stream_LE+0xbc>
     db4:	80 91 e8 00 	lds	r24, 0x00E8
     db8:	83 ff       	sbrs	r24, 3
     dba:	cb cf       	rjmp	.-106    	; 0xd52 <Endpoint_Write_Control_Stream_LE+0x4c>
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <Endpoint_Write_Control_Stream_LE+0xc0>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	08 95       	ret
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	08 95       	ret
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	08 95       	ret

00000dca <Endpoint_Read_Control_Stream_LE>:
     dca:	61 15       	cp	r22, r1
     dcc:	71 05       	cpc	r23, r1
     dce:	29 f4       	brne	.+10     	; 0xdda <Endpoint_Read_Control_Stream_LE+0x10>
     dd0:	20 91 e8 00 	lds	r18, 0x00E8
     dd4:	2b 77       	andi	r18, 0x7B	; 123
     dd6:	20 93 e8 00 	sts	0x00E8, r18
     dda:	61 15       	cp	r22, r1
     ddc:	71 05       	cpc	r23, r1
     dde:	41 f1       	breq	.+80     	; 0xe30 <Endpoint_Read_Control_Stream_LE+0x66>
     de0:	20 91 0a 05 	lds	r18, 0x050A
     de4:	22 23       	and	r18, r18
     de6:	69 f1       	breq	.+90     	; 0xe42 <Endpoint_Read_Control_Stream_LE+0x78>
     de8:	25 30       	cpi	r18, 0x05	; 5
     dea:	69 f1       	breq	.+90     	; 0xe46 <Endpoint_Read_Control_Stream_LE+0x7c>
     dec:	20 91 e8 00 	lds	r18, 0x00E8
     df0:	23 fd       	sbrc	r18, 3
     df2:	23 c0       	rjmp	.+70     	; 0xe3a <Endpoint_Read_Control_Stream_LE+0x70>
     df4:	20 91 e8 00 	lds	r18, 0x00E8
     df8:	22 ff       	sbrs	r18, 2
     dfa:	f2 cf       	rjmp	.-28     	; 0xde0 <Endpoint_Read_Control_Stream_LE+0x16>
     dfc:	fc 01       	movw	r30, r24
     dfe:	cf 01       	movw	r24, r30
     e00:	40 91 f3 00 	lds	r20, 0x00F3
     e04:	20 91 f2 00 	lds	r18, 0x00F2
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	34 2b       	or	r19, r20
     e0c:	23 2b       	or	r18, r19
     e0e:	01 f3       	breq	.-64     	; 0xdd0 <Endpoint_Read_Control_Stream_LE+0x6>
     e10:	80 91 f1 00 	lds	r24, 0x00F1
     e14:	81 93       	st	Z+, r24
     e16:	cf 01       	movw	r24, r30
     e18:	61 50       	subi	r22, 0x01	; 1
     e1a:	71 09       	sbc	r23, r1
     e1c:	61 15       	cp	r22, r1
     e1e:	71 05       	cpc	r23, r1
     e20:	71 f7       	brne	.-36     	; 0xdfe <Endpoint_Read_Control_Stream_LE+0x34>
     e22:	d6 cf       	rjmp	.-84     	; 0xdd0 <Endpoint_Read_Control_Stream_LE+0x6>
     e24:	80 91 0a 05 	lds	r24, 0x050A
     e28:	88 23       	and	r24, r24
     e2a:	59 f0       	breq	.+22     	; 0xe42 <Endpoint_Read_Control_Stream_LE+0x78>
     e2c:	85 30       	cpi	r24, 0x05	; 5
     e2e:	59 f0       	breq	.+22     	; 0xe46 <Endpoint_Read_Control_Stream_LE+0x7c>
     e30:	80 91 e8 00 	lds	r24, 0x00E8
     e34:	80 ff       	sbrs	r24, 0
     e36:	f6 cf       	rjmp	.-20     	; 0xe24 <Endpoint_Read_Control_Stream_LE+0x5a>
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <Endpoint_Read_Control_Stream_LE+0x74>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	08 95       	ret
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	08 95       	ret
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	08 95       	ret

00000e4a <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e4a:	20 91 11 05 	lds	r18, 0x0511
     e4e:	30 91 12 05 	lds	r19, 0x0512
     e52:	26 17       	cp	r18, r22
     e54:	37 07       	cpc	r19, r23
     e56:	48 f0       	brcs	.+18     	; 0xe6a <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e58:	61 15       	cp	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	39 f4       	brne	.+14     	; 0xe6c <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5e:	20 91 e8 00 	lds	r18, 0x00E8
     e62:	2e 77       	andi	r18, 0x7E	; 126
     e64:	20 93 e8 00 	sts	0x00E8, r18
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <Endpoint_Write_Control_PStream_LE+0x22>
     e6a:	b9 01       	movw	r22, r18
     e6c:	fc 01       	movw	r30, r24
     e6e:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e70:	61 15       	cp	r22, r1
     e72:	71 05       	cpc	r23, r1
     e74:	c9 f1       	breq	.+114    	; 0xee8 <Endpoint_Write_Control_PStream_LE+0x9e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e76:	80 91 0a 05 	lds	r24, 0x050A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e7a:	88 23       	and	r24, r24
     e7c:	09 f4       	brne	.+2      	; 0xe80 <Endpoint_Write_Control_PStream_LE+0x36>
     e7e:	42 c0       	rjmp	.+132    	; 0xf04 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e80:	85 30       	cpi	r24, 0x05	; 5
     e82:	09 f4       	brne	.+2      	; 0xe86 <Endpoint_Write_Control_PStream_LE+0x3c>
     e84:	41 c0       	rjmp	.+130    	; 0xf08 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e86:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     e8a:	83 fd       	sbrc	r24, 3
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     e92:	82 ff       	sbrs	r24, 2
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <Endpoint_Write_Control_PStream_LE+0x58>
     e96:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e9a:	82 ff       	sbrs	r24, 2
     e9c:	28 c0       	rjmp	.+80     	; 0xeee <Endpoint_Write_Control_PStream_LE+0xa4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
     ea6:	80 ff       	sbrs	r24, 0
     ea8:	e3 cf       	rjmp	.-58     	; 0xe70 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     eaa:	20 91 f3 00 	lds	r18, 0x00F3
     eae:	80 91 f2 00 	lds	r24, 0x00F2
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     eb6:	61 15       	cp	r22, r1
     eb8:	71 05       	cpc	r23, r1
     eba:	59 f0       	breq	.+22     	; 0xed2 <Endpoint_Write_Control_PStream_LE+0x88>
     ebc:	80 34       	cpi	r24, 0x40	; 64
     ebe:	91 05       	cpc	r25, r1
     ec0:	40 f4       	brcc	.+16     	; 0xed2 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ec2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ec4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ec8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     eca:	61 50       	subi	r22, 0x01	; 1
     ecc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	f2 cf       	rjmp	.-28     	; 0xeb6 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	80 34       	cpi	r24, 0x40	; 64
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <Endpoint_Write_Control_PStream_LE+0x92>
     eda:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     edc:	80 91 e8 00 	lds	r24, 0x00E8
     ee0:	8e 77       	andi	r24, 0x7E	; 126
     ee2:	80 93 e8 00 	sts	0x00E8, r24
     ee6:	c4 cf       	rjmp	.-120    	; 0xe70 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ee8:	21 11       	cpse	r18, r1
     eea:	c5 cf       	rjmp	.-118    	; 0xe76 <Endpoint_Write_Control_PStream_LE+0x2c>
     eec:	d4 cf       	rjmp	.-88     	; 0xe96 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     eee:	80 91 0a 05 	lds	r24, 0x050A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ef2:	88 23       	and	r24, r24
     ef4:	39 f0       	breq	.+14     	; 0xf04 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ef6:	85 30       	cpi	r24, 0x05	; 5
     ef8:	39 f0       	breq	.+14     	; 0xf08 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     efa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     efe:	83 ff       	sbrs	r24, 3
     f00:	ca cf       	rjmp	.-108    	; 0xe96 <Endpoint_Write_Control_PStream_LE+0x4c>
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <Endpoint_Write_Control_PStream_LE+0xc2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     f0e:	08 95       	ret

00000f10 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     f10:	98 2f       	mov	r25, r24
     f12:	97 30       	cpi	r25, 0x07	; 7
     f14:	58 f5       	brcc	.+86     	; 0xf6c <Endpoint_ConfigureEndpoint_Prv+0x5c>
     f16:	90 93 e9 00 	sts	0x00E9, r25
     f1a:	98 17       	cp	r25, r24
     f1c:	39 f0       	breq	.+14     	; 0xf2c <Endpoint_ConfigureEndpoint_Prv+0x1c>
     f1e:	70 91 ec 00 	lds	r23, 0x00EC
     f22:	20 91 ed 00 	lds	r18, 0x00ED
     f26:	50 91 f0 00 	lds	r21, 0x00F0
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <Endpoint_ConfigureEndpoint_Prv+0x22>
     f2c:	24 2f       	mov	r18, r20
     f2e:	76 2f       	mov	r23, r22
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	21 ff       	sbrs	r18, 1
     f34:	19 c0       	rjmp	.+50     	; 0xf68 <Endpoint_ConfigureEndpoint_Prv+0x58>
     f36:	30 91 eb 00 	lds	r19, 0x00EB
     f3a:	3e 7f       	andi	r19, 0xFE	; 254
     f3c:	30 93 eb 00 	sts	0x00EB, r19
     f40:	30 91 ed 00 	lds	r19, 0x00ED
     f44:	3d 7f       	andi	r19, 0xFD	; 253
     f46:	30 93 ed 00 	sts	0x00ED, r19
     f4a:	30 91 eb 00 	lds	r19, 0x00EB
     f4e:	31 60       	ori	r19, 0x01	; 1
     f50:	30 93 eb 00 	sts	0x00EB, r19
     f54:	70 93 ec 00 	sts	0x00EC, r23
     f58:	20 93 ed 00 	sts	0x00ED, r18
     f5c:	50 93 f0 00 	sts	0x00F0, r21
     f60:	20 91 ee 00 	lds	r18, 0x00EE
     f64:	27 ff       	sbrs	r18, 7
     f66:	07 c0       	rjmp	.+14     	; 0xf76 <Endpoint_ConfigureEndpoint_Prv+0x66>
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	d3 cf       	rjmp	.-90     	; 0xf12 <Endpoint_ConfigureEndpoint_Prv+0x2>
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	80 93 e9 00 	sts	0x00E9, r24
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	08 95       	ret
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     f7a:	80 91 0b 05 	lds	r24, 0x050B
     f7e:	87 fd       	sbrc	r24, 7
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f82:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     f86:	80 ff       	sbrs	r24, 0
     f88:	0e c0       	rjmp	.+28     	; 0xfa6 <Endpoint_ClearStatusStage+0x2c>
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f8c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     f90:	82 fd       	sbrc	r24, 2
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     f94:	80 91 0a 05 	lds	r24, 0x050A
     f98:	81 11       	cpse	r24, r1
     f9a:	f8 cf       	rjmp	.-16     	; 0xf8c <Endpoint_ClearStatusStage+0x12>
     f9c:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
     fa2:	8b 77       	andi	r24, 0x7B	; 123
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     fa6:	80 91 0a 05 	lds	r24, 0x050A
     faa:	81 11       	cpse	r24, r1
     fac:	ea cf       	rjmp	.-44     	; 0xf82 <Endpoint_ClearStatusStage+0x8>
     fae:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb0:	80 91 e8 00 	lds	r24, 0x00E8
     fb4:	8e 77       	andi	r24, 0x7E	; 126
     fb6:	80 93 e8 00 	sts	0x00E8, r24
     fba:	08 95       	ret

00000fbc <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     fbc:	80 91 e4 00 	lds	r24, 0x00E4
     fc0:	90 91 e5 00 	lds	r25, 0x00E5
     fc4:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     fc6:	20 91 ec 00 	lds	r18, 0x00EC
     fca:	20 ff       	sbrs	r18, 0
     fcc:	21 c0       	rjmp	.+66     	; 0x1010 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     fce:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     fd2:	20 fd       	sbrc	r18, 0
     fd4:	21 c0       	rjmp	.+66     	; 0x1018 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fd6:	20 91 0a 05 	lds	r18, 0x050A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fda:	22 23       	and	r18, r18
     fdc:	89 f0       	breq	.+34     	; 0x1000 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fde:	25 30       	cpi	r18, 0x05	; 5
     fe0:	89 f0       	breq	.+34     	; 0x1004 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     fe2:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     fe6:	25 fd       	sbrc	r18, 5
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <Endpoint_WaitUntilReady+0x4c>
     fea:	20 91 e4 00 	lds	r18, 0x00E4
     fee:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ff2:	28 17       	cp	r18, r24
     ff4:	39 07       	cpc	r19, r25
     ff6:	39 f3       	breq	.-50     	; 0xfc6 <Endpoint_WaitUntilReady+0xa>
     ff8:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ffa:	41 f0       	breq	.+16     	; 0x100c <Endpoint_WaitUntilReady+0x50>
     ffc:	c9 01       	movw	r24, r18
     ffe:	e3 cf       	rjmp	.-58     	; 0xfc6 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    100c:	84 e0       	ldi	r24, 0x04	; 4
    100e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1010:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1014:	22 ff       	sbrs	r18, 2
    1016:	df cf       	rjmp	.-66     	; 0xfd6 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret

0000101c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1024:	4b d0       	rcall	.+150    	; 0x10bc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1026:	52 d0       	rcall	.+164    	; 0x10cc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1028:	c8 ed       	ldi	r28, 0xD8	; 216
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	88 81       	ld	r24, Y
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1032:	88 81       	ld	r24, Y
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1038:	88 81       	ld	r24, Y
    103a:	8f 7d       	andi	r24, 0xDF	; 223
    103c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    103e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1040:	10 92 0a 05 	sts	0x050A, r1
	USB_Device_ConfigurationNumber  = 0;
    1044:	10 92 06 05 	sts	0x0506, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1048:	10 92 08 05 	sts	0x0508, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    104c:	10 92 07 05 	sts	0x0507, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1050:	00 ee       	ldi	r16, 0xE0	; 224
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	f8 01       	movw	r30, r16
    1056:	80 81       	ld	r24, Z
    1058:	8b 7f       	andi	r24, 0xFB	; 251
    105a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    105c:	88 81       	ld	r24, Y
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1062:	42 e3       	ldi	r20, 0x32	; 50
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	53 df       	rcall	.-346    	; 0xf10 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    106a:	e1 ee       	ldi	r30, 0xE1	; 225
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8e 7f       	andi	r24, 0xFE	; 254
    1072:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1074:	e2 ee       	ldi	r30, 0xE2	; 226
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	81 60       	ori	r24, 0x01	; 1
    107c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    107e:	80 81       	ld	r24, Z
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1084:	f8 01       	movw	r30, r16
    1086:	80 81       	ld	r24, Z
    1088:	8e 7f       	andi	r24, 0xFE	; 254
    108a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    108c:	88 81       	ld	r24, Y
    108e:	80 61       	ori	r24, 0x10	; 16
    1090:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	08 95       	ret

0000109c <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    109c:	e8 ed       	ldi	r30, 0xD8	; 216
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7e       	andi	r24, 0xEF	; 239
    10a4:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    10a6:	e7 ed       	ldi	r30, 0xD7	; 215
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	81 60       	ori	r24, 0x01	; 1
    10ae:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 09 05 	sts	0x0509, r24

	USB_ResetInterface();
    10ba:	b0 cf       	rjmp	.-160    	; 0x101c <USB_ResetInterface>

000010bc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    10bc:	e8 ed       	ldi	r30, 0xD8	; 216
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    10c6:	10 92 e2 00 	sts	0x00E2, r1
    10ca:	08 95       	ret

000010cc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    10cc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    10d0:	10 92 e1 00 	sts	0x00E1, r1
    10d4:	08 95       	ret

000010d6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    10f8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    10fc:	82 ff       	sbrs	r24, 2
    10fe:	0a c0       	rjmp	.+20     	; 0x1114 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1100:	80 91 e2 00 	lds	r24, 0x00E2
    1104:	82 ff       	sbrs	r24, 2
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1108:	80 91 e1 00 	lds	r24, 0x00E1
    110c:	8b 7f       	andi	r24, 0xFB	; 251
    110e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1112:	f8 d1       	rcall	.+1008   	; 0x1504 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1114:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1118:	80 ff       	sbrs	r24, 0
    111a:	1d c0       	rjmp	.+58     	; 0x1156 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    111c:	80 91 d8 00 	lds	r24, 0x00D8
    1120:	80 ff       	sbrs	r24, 0
    1122:	19 c0       	rjmp	.+50     	; 0x1156 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1124:	80 91 da 00 	lds	r24, 0x00DA
    1128:	8e 7f       	andi	r24, 0xFE	; 254
    112a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    112e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1132:	80 ff       	sbrs	r24, 0
    1134:	0c c0       	rjmp	.+24     	; 0x114e <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1136:	80 e1       	ldi	r24, 0x10	; 16
    1138:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    113a:	82 e1       	ldi	r24, 0x12	; 18
    113c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    113e:	09 b4       	in	r0, 0x29	; 41
    1140:	00 fe       	sbrs	r0, 0
    1142:	fd cf       	rjmp	.-6      	; 0x113e <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	80 93 0a 05 	sts	0x050A, r24
			EVENT_USB_Device_Connect();
    114a:	12 da       	rcall	.-3036   	; 0x570 <EVENT_USB_Device_Connect>
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    114e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1150:	10 92 0a 05 	sts	0x050A, r1
			EVENT_USB_Device_Disconnect();
    1154:	0e da       	rcall	.-3044   	; 0x572 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1156:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    115a:	80 ff       	sbrs	r24, 0
    115c:	18 c0       	rjmp	.+48     	; 0x118e <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    115e:	80 91 e2 00 	lds	r24, 0x00E2
    1162:	80 ff       	sbrs	r24, 0
    1164:	14 c0       	rjmp	.+40     	; 0x118e <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1166:	80 91 e2 00 	lds	r24, 0x00E2
    116a:	8e 7f       	andi	r24, 0xFE	; 254
    116c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1170:	80 91 e2 00 	lds	r24, 0x00E2
    1174:	80 61       	ori	r24, 0x10	; 16
    1176:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    117a:	80 91 d8 00 	lds	r24, 0x00D8
    117e:	80 62       	ori	r24, 0x20	; 32
    1180:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1184:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	80 93 0a 05 	sts	0x050A, r24
		EVENT_USB_Device_Suspend();
    118c:	bb d1       	rcall	.+886    	; 0x1504 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    118e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1192:	84 ff       	sbrs	r24, 4
    1194:	2f c0       	rjmp	.+94     	; 0x11f4 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1196:	80 91 e2 00 	lds	r24, 0x00E2
    119a:	84 ff       	sbrs	r24, 4
    119c:	2b c0       	rjmp	.+86     	; 0x11f4 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    119e:	80 e1       	ldi	r24, 0x10	; 16
    11a0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11a2:	82 e1       	ldi	r24, 0x12	; 18
    11a4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    11a6:	09 b4       	in	r0, 0x29	; 41
    11a8:	00 fe       	sbrs	r0, 0
    11aa:	fd cf       	rjmp	.-6      	; 0x11a6 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    11ac:	80 91 d8 00 	lds	r24, 0x00D8
    11b0:	8f 7d       	andi	r24, 0xDF	; 223
    11b2:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    11b6:	80 91 e1 00 	lds	r24, 0x00E1
    11ba:	8f 7e       	andi	r24, 0xEF	; 239
    11bc:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    11c0:	80 91 e2 00 	lds	r24, 0x00E2
    11c4:	8f 7e       	andi	r24, 0xEF	; 239
    11c6:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    11ca:	80 91 e2 00 	lds	r24, 0x00E2
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    11d4:	80 91 06 05 	lds	r24, 0x0506
    11d8:	88 23       	and	r24, r24
    11da:	11 f0       	breq	.+4      	; 0x11e0 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    11e0:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    11e4:	87 ff       	sbrs	r24, 7
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <__vector_10+0x116>
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <__vector_10+0x118>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	80 93 0a 05 	sts	0x050A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    11f2:	88 d1       	rcall	.+784    	; 0x1504 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    11f4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    11f8:	83 ff       	sbrs	r24, 3
    11fa:	22 c0       	rjmp	.+68     	; 0x1240 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    11fc:	80 91 e2 00 	lds	r24, 0x00E2
    1200:	83 ff       	sbrs	r24, 3
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1204:	80 91 e1 00 	lds	r24, 0x00E1
    1208:	87 7f       	andi	r24, 0xF7	; 247
    120a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	80 93 0a 05 	sts	0x050A, r24
		USB_Device_ConfigurationNumber = 0;
    1214:	10 92 06 05 	sts	0x0506, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1218:	80 91 e1 00 	lds	r24, 0x00E1
    121c:	8e 7f       	andi	r24, 0xFE	; 254
    121e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1222:	80 91 e2 00 	lds	r24, 0x00E2
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    122c:	80 91 e2 00 	lds	r24, 0x00E2
    1230:	80 61       	ori	r24, 0x10	; 16
    1232:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1236:	42 e3       	ldi	r20, 0x32	; 50
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	69 de       	rcall	.-814    	; 0xf10 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    123e:	62 d1       	rcall	.+708    	; 0x1504 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	aa 97       	sbiw	r28, 0x2a	; 42
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	eb e0       	ldi	r30, 0x0B	; 11
    127a:	f5 e0       	ldi	r31, 0x05	; 5
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    127c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1280:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1282:	25 e0       	ldi	r18, 0x05	; 5
    1284:	e3 31       	cpi	r30, 0x13	; 19
    1286:	f2 07       	cpc	r31, r18
    1288:	c9 f7       	brne	.-14     	; 0x127c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    128a:	21 d9       	rcall	.-3518   	; 0x4ce <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    128c:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1290:	83 ff       	sbrs	r24, 3
    1292:	20 c1       	rjmp	.+576    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1294:	90 91 0b 05 	lds	r25, 0x050B

		switch (USB_ControlRequest.bRequest)
    1298:	80 91 0c 05 	lds	r24, 0x050C
    129c:	85 30       	cpi	r24, 0x05	; 5
    129e:	09 f4       	brne	.+2      	; 0x12a2 <USB_Device_ProcessControlRequest+0x40>
    12a0:	77 c0       	rjmp	.+238    	; 0x1390 <USB_Device_ProcessControlRequest+0x12e>
    12a2:	30 f4       	brcc	.+12     	; 0x12b0 <USB_Device_ProcessControlRequest+0x4e>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	81 f1       	breq	.+96     	; 0x1308 <USB_Device_ProcessControlRequest+0xa6>
    12a8:	68 f0       	brcs	.+26     	; 0x12c4 <USB_Device_ProcessControlRequest+0x62>
    12aa:	83 30       	cpi	r24, 0x03	; 3
    12ac:	69 f1       	breq	.+90     	; 0x1308 <USB_Device_ProcessControlRequest+0xa6>
    12ae:	12 c1       	rjmp	.+548    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
    12b0:	88 30       	cpi	r24, 0x08	; 8
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <USB_Device_ProcessControlRequest+0x54>
    12b4:	e1 c0       	rjmp	.+450    	; 0x1478 <USB_Device_ProcessControlRequest+0x216>
    12b6:	89 30       	cpi	r24, 0x09	; 9
    12b8:	09 f4       	brne	.+2      	; 0x12bc <USB_Device_ProcessControlRequest+0x5a>
    12ba:	f0 c0       	rjmp	.+480    	; 0x149c <USB_Device_ProcessControlRequest+0x23a>
    12bc:	86 30       	cpi	r24, 0x06	; 6
    12be:	09 f0       	breq	.+2      	; 0x12c2 <USB_Device_ProcessControlRequest+0x60>
    12c0:	09 c1       	rjmp	.+530    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
    12c2:	88 c0       	rjmp	.+272    	; 0x13d4 <USB_Device_ProcessControlRequest+0x172>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    12c4:	90 38       	cpi	r25, 0x80	; 128
    12c6:	81 f0       	breq	.+32     	; 0x12e8 <USB_Device_ProcessControlRequest+0x86>
    12c8:	92 38       	cpi	r25, 0x82	; 130
    12ca:	09 f0       	breq	.+2      	; 0x12ce <USB_Device_ProcessControlRequest+0x6c>
    12cc:	03 c1       	rjmp	.+518    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12ce:	80 91 0f 05 	lds	r24, 0x050F
    12d2:	8f 70       	andi	r24, 0x0F	; 15
    12d4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    12d8:	80 91 eb 00 	lds	r24, 0x00EB
    12dc:	85 fb       	bst	r24, 5
    12de:	88 27       	eor	r24, r24
    12e0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12e2:	10 92 e9 00 	sts	0x00E9, r1
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <USB_Device_ProcessControlRequest+0x92>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    12e8:	80 91 07 05 	lds	r24, 0x0507
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    12ec:	90 91 08 05 	lds	r25, 0x0508
    12f0:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    12f2:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12f4:	90 91 e8 00 	lds	r25, 0x00E8
    12f8:	97 7f       	andi	r25, 0xF7	; 247
    12fa:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    12fe:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1302:	10 92 f1 00 	sts	0x00F1, r1
    1306:	c3 c0       	rjmp	.+390    	; 0x148e <USB_Device_ProcessControlRequest+0x22c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1308:	29 2f       	mov	r18, r25
    130a:	2d 7f       	andi	r18, 0xFD	; 253
    130c:	09 f0       	breq	.+2      	; 0x1310 <USB_Device_ProcessControlRequest+0xae>
    130e:	e2 c0       	rjmp	.+452    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1310:	99 23       	and	r25, r25
    1312:	19 f0       	breq	.+6      	; 0x131a <USB_Device_ProcessControlRequest+0xb8>
    1314:	92 30       	cpi	r25, 0x02	; 2
    1316:	61 f0       	breq	.+24     	; 0x1330 <USB_Device_ProcessControlRequest+0xce>
    1318:	dd c0       	rjmp	.+442    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    131a:	90 91 0d 05 	lds	r25, 0x050D
    131e:	91 30       	cpi	r25, 0x01	; 1
    1320:	09 f0       	breq	.+2      	; 0x1324 <USB_Device_ProcessControlRequest+0xc2>
    1322:	d8 c0       	rjmp	.+432    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	09 f0       	breq	.+2      	; 0x132a <USB_Device_ProcessControlRequest+0xc8>
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	90 93 08 05 	sts	0x0508, r25
    132e:	2a c0       	rjmp	.+84     	; 0x1384 <USB_Device_ProcessControlRequest+0x122>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1330:	90 91 0d 05 	lds	r25, 0x050D
    1334:	91 11       	cpse	r25, r1
    1336:	26 c0       	rjmp	.+76     	; 0x1384 <USB_Device_ProcessControlRequest+0x122>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1338:	20 91 0f 05 	lds	r18, 0x050F
    133c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    133e:	09 f4       	brne	.+2      	; 0x1342 <USB_Device_ProcessControlRequest+0xe0>
    1340:	c9 c0       	rjmp	.+402    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1342:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1346:	90 91 eb 00 	lds	r25, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    134a:	90 ff       	sbrs	r25, 0
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <USB_Device_ProcessControlRequest+0x122>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	21 f4       	brne	.+8      	; 0x135a <USB_Device_ProcessControlRequest+0xf8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1352:	80 91 eb 00 	lds	r24, 0x00EB
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	13 c0       	rjmp	.+38     	; 0x1380 <USB_Device_ProcessControlRequest+0x11e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    135a:	80 91 eb 00 	lds	r24, 0x00EB
    135e:	80 61       	ori	r24, 0x10	; 16
    1360:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	01 c0       	rjmp	.+2      	; 0x136e <USB_Device_ProcessControlRequest+0x10c>
    136c:	88 0f       	add	r24, r24
    136e:	0a 94       	dec	r0
    1370:	ea f7       	brpl	.-6      	; 0x136c <USB_Device_ProcessControlRequest+0x10a>
    1372:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1376:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    137a:	80 91 eb 00 	lds	r24, 0x00EB
    137e:	88 60       	ori	r24, 0x08	; 8
    1380:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1384:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1388:	80 91 e8 00 	lds	r24, 0x00E8
    138c:	87 7f       	andi	r24, 0xF7	; 247
    138e:	82 c0       	rjmp	.+260    	; 0x1494 <USB_Device_ProcessControlRequest+0x232>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1390:	91 11       	cpse	r25, r1
    1392:	a0 c0       	rjmp	.+320    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1394:	10 91 0d 05 	lds	r17, 0x050D
    1398:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    139a:	80 91 e3 00 	lds	r24, 0x00E3
    139e:	80 78       	andi	r24, 0x80	; 128
    13a0:	81 2b       	or	r24, r17
    13a2:	80 93 e3 00 	sts	0x00E3, r24
    13a6:	80 91 e8 00 	lds	r24, 0x00E8
    13aa:	87 7f       	andi	r24, 0xF7	; 247
    13ac:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    13b0:	e4 dd       	rcall	.-1080   	; 0xf7a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13b2:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    13b6:	80 ff       	sbrs	r24, 0
    13b8:	fc cf       	rjmp	.-8      	; 0x13b2 <USB_Device_ProcessControlRequest+0x150>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    13ba:	80 91 e3 00 	lds	r24, 0x00E3
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    13c4:	11 23       	and	r17, r17
    13c6:	11 f0       	breq	.+4      	; 0x13cc <USB_Device_ProcessControlRequest+0x16a>
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <USB_Device_ProcessControlRequest+0x16c>
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	80 93 0a 05 	sts	0x050A, r24
    13d2:	80 c0       	rjmp	.+256    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	92 30       	cpi	r25, 0x02	; 2
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <USB_Device_ProcessControlRequest+0x17a>
    13da:	7c c0       	rjmp	.+248    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    13dc:	80 91 0d 05 	lds	r24, 0x050D
    13e0:	90 91 0e 05 	lds	r25, 0x050E
    13e4:	8c 3d       	cpi	r24, 0xDC	; 220
    13e6:	23 e0       	ldi	r18, 0x03	; 3
    13e8:	92 07       	cpc	r25, r18
    13ea:	71 f5       	brne	.+92     	; 0x1448 <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    13f0:	8a e2       	ldi	r24, 0x2A	; 42
    13f2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    13f4:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    13f6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    13f8:	de 01       	movw	r26, r28
    13fa:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    13fc:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    13fe:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1400:	51 e2       	ldi	r21, 0x21	; 33
    1402:	e3 2f       	mov	r30, r19
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	50 93 57 00 	sts	0x0057, r21
    140a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    140c:	20 ff       	sbrs	r18, 0
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
    1410:	e2 95       	swap	r30
    1412:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1414:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1416:	ef 70       	andi	r30, 0x0F	; 15
    1418:	8e 2f       	mov	r24, r30
    141a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    141c:	ea 30       	cpi	r30, 0x0A	; 10
    141e:	10 f0       	brcs	.+4      	; 0x1424 <USB_Device_ProcessControlRequest+0x1c2>
    1420:	c7 96       	adiw	r24, 0x37	; 55
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <USB_Device_ProcessControlRequest+0x1c4>
    1424:	c0 96       	adiw	r24, 0x30	; 48
    1426:	8d 93       	st	X+, r24
    1428:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	24 31       	cpi	r18, 0x14	; 20
    142e:	49 f7       	brne	.-46     	; 0x1402 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1430:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1432:	80 91 e8 00 	lds	r24, 0x00E8
    1436:	87 7f       	andi	r24, 0xF7	; 247
    1438:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    143c:	6a e2       	ldi	r22, 0x2A	; 42
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	60 dc       	rcall	.-1856   	; 0xd06 <Endpoint_Write_Control_Stream_LE>
    1446:	12 c0       	rjmp	.+36     	; 0x146c <USB_Device_ProcessControlRequest+0x20a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1448:	ae 01       	movw	r20, r28
    144a:	4f 5f       	subi	r20, 0xFF	; 255
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	60 91 0f 05 	lds	r22, 0x050F
    1452:	98 d8       	rcall	.-3792   	; 0x584 <CALLBACK_USB_GetDescriptor>
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	09 f4       	brne	.+2      	; 0x145a <USB_Device_ProcessControlRequest+0x1f8>
    1458:	3d c0       	rjmp	.+122    	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
    145a:	20 91 e8 00 	lds	r18, 0x00E8
    145e:	27 7f       	andi	r18, 0xF7	; 247
    1460:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1464:	bc 01       	movw	r22, r24
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	ef dc       	rcall	.-1570   	; 0xe4a <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    146c:	80 91 e8 00 	lds	r24, 0x00E8
    1470:	8b 77       	andi	r24, 0x7B	; 123
    1472:	80 93 e8 00 	sts	0x00E8, r24
    1476:	2e c0       	rjmp	.+92     	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1478:	90 38       	cpi	r25, 0x80	; 128
    147a:	61 f5       	brne	.+88     	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    147c:	80 91 e8 00 	lds	r24, 0x00E8
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1486:	80 91 06 05 	lds	r24, 0x0506
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    148a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    148e:	80 91 e8 00 	lds	r24, 0x00E8
    1492:	8e 77       	andi	r24, 0x7E	; 126
    1494:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1498:	70 dd       	rcall	.-1312   	; 0xf7a <Endpoint_ClearStatusStage>
    149a:	1c c0       	rjmp	.+56     	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    149c:	91 11       	cpse	r25, r1
    149e:	1a c0       	rjmp	.+52     	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    14a0:	90 91 0d 05 	lds	r25, 0x050D
    14a4:	92 30       	cpi	r25, 0x02	; 2
    14a6:	b0 f4       	brcc	.+44     	; 0x14d4 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14a8:	80 91 e8 00 	lds	r24, 0x00E8
    14ac:	87 7f       	andi	r24, 0xF7	; 247
    14ae:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    14b2:	90 93 06 05 	sts	0x0506, r25

	Endpoint_ClearStatusStage();
    14b6:	61 dd       	rcall	.-1342   	; 0xf7a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    14b8:	80 91 06 05 	lds	r24, 0x0506
    14bc:	81 11       	cpse	r24, r1
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14c0:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    14c4:	87 ff       	sbrs	r24, 7
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <USB_Device_ProcessControlRequest+0x26a>
    14c8:	84 e0       	ldi	r24, 0x04	; 4
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <USB_Device_ProcessControlRequest+0x26c>
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	80 93 0a 05 	sts	0x050A, r24

	EVENT_USB_Device_ConfigurationChanged();
    14d2:	50 d8       	rcall	.-3936   	; 0x574 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14d4:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    14d8:	83 ff       	sbrs	r24, 3
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14dc:	80 91 e8 00 	lds	r24, 0x00E8
    14e0:	87 7f       	andi	r24, 0xF7	; 247
    14e2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    14e6:	80 91 eb 00 	lds	r24, 0x00EB
    14ea:	80 62       	ori	r24, 0x20	; 32
    14ec:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    14f0:	aa 96       	adiw	r28, 0x2a	; 42
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	08 95       	ret

00001504 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1504:	08 95       	ret

00001506 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1506:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1508:	80 91 0a 05 	lds	r24, 0x050A
    150c:	88 23       	and	r24, r24
    150e:	a9 f0       	breq	.+42     	; 0x153a <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1510:	80 91 e9 00 	lds	r24, 0x00E9
    1514:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1516:	90 91 ec 00 	lds	r25, 0x00EC
    151a:	90 ff       	sbrs	r25, 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <USB_USBTask+0x1c>
    151e:	90 e8       	ldi	r25, 0x80	; 128
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <USB_USBTask+0x1e>
    1522:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1524:	c9 2f       	mov	r28, r25
    1526:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1528:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    152c:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1530:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1532:	97 de       	rcall	.-722    	; 0x1262 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1534:	cf 70       	andi	r28, 0x0F	; 15
    1536:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <__udivmodhi4>:
    153e:	aa 1b       	sub	r26, r26
    1540:	bb 1b       	sub	r27, r27
    1542:	51 e1       	ldi	r21, 0x11	; 17
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <__udivmodhi4_ep>

00001546 <__udivmodhi4_loop>:
    1546:	aa 1f       	adc	r26, r26
    1548:	bb 1f       	adc	r27, r27
    154a:	a6 17       	cp	r26, r22
    154c:	b7 07       	cpc	r27, r23
    154e:	10 f0       	brcs	.+4      	; 0x1554 <__udivmodhi4_ep>
    1550:	a6 1b       	sub	r26, r22
    1552:	b7 0b       	sbc	r27, r23

00001554 <__udivmodhi4_ep>:
    1554:	88 1f       	adc	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	5a 95       	dec	r21
    155a:	a9 f7       	brne	.-22     	; 0x1546 <__udivmodhi4_loop>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	08 95       	ret

00001566 <_exit>:
    1566:	f8 94       	cli

00001568 <__stop_program>:
    1568:	ff cf       	rjmp	.-2      	; 0x1568 <__stop_program>
